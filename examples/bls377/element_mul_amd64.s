#include "textflag.h"

// func mulAssignElement(res,y *Element)
// montgomery multiplication of res by y 
// stores the result in res
TEXT ·mulAssignElement(SB), NOSPLIT, $0-16
	// the algorithm is described here
	// https://hackmd.io/@zkteam/modular_multiplication
	// however, to benefit from the ADCX and ADOX carry chains
	// we split the inner loops in 2:
	// for i=0 to N-1
	// 		for j=0 to N-1
	// 		    (A,t[j])  := t[j] + x[j]*y[i] + A
	// 		m := t[0]*q'[0] mod W
	// 		C,_ := t[0] + m*q[0]
	// 		for j=1 to N-1
	// 		    (C,t[j-1]) := t[j] + m*q[j] + C
	// 		t[N-1] = C + A

    // dereference x
    MOVQ res+0(FP), R9
    // check if we support adx and mulx
    CMPB ·supportAdx(SB), $0x0000000000000001
    JNE no_adx
    // dereference y
    MOVQ y+8(FP), R12
    // outter loop 0
    // clear up flags
    XORQ DX, DX
    // DX = y[0]
    MOVQ 0(R12), DX
    MULXQ 0(R9), CX, BX
    MULXQ 8(R9), AX, BP
    ADOXQ AX, BX
    MULXQ 16(R9), AX, SI
    ADOXQ AX, BP
    MULXQ 24(R9), AX, DI
    ADOXQ AX, SI
    MULXQ 32(R9), AX, R8
    ADOXQ AX, DI
    MULXQ 40(R9), AX, R11
    ADOXQ AX, R8
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R11
    ADOXQ DX, R11
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ R11, R8
    // outter loop 1
    // clear up flags
    XORQ DX, DX
    // DX = y[1]
    MOVQ 8(R12), DX
    MULXQ 0(R9), AX, R11
    ADOXQ AX, CX
    ADCXQ R11, BX
    MULXQ 8(R9), AX, R11
    ADOXQ AX, BX
    ADCXQ R11, BP
    MULXQ 16(R9), AX, R11
    ADOXQ AX, BP
    ADCXQ R11, SI
    MULXQ 24(R9), AX, R11
    ADOXQ AX, SI
    ADCXQ R11, DI
    MULXQ 32(R9), AX, R11
    ADOXQ AX, DI
    ADCXQ R11, R8
    MULXQ 40(R9), AX, R11
    ADOXQ AX, R8
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R11
    ADOXQ DX, R11
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ R11, R8
    // outter loop 2
    // clear up flags
    XORQ DX, DX
    // DX = y[2]
    MOVQ 16(R12), DX
    MULXQ 0(R9), AX, R11
    ADOXQ AX, CX
    ADCXQ R11, BX
    MULXQ 8(R9), AX, R11
    ADOXQ AX, BX
    ADCXQ R11, BP
    MULXQ 16(R9), AX, R11
    ADOXQ AX, BP
    ADCXQ R11, SI
    MULXQ 24(R9), AX, R11
    ADOXQ AX, SI
    ADCXQ R11, DI
    MULXQ 32(R9), AX, R11
    ADOXQ AX, DI
    ADCXQ R11, R8
    MULXQ 40(R9), AX, R11
    ADOXQ AX, R8
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R11
    ADOXQ DX, R11
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ R11, R8
    // outter loop 3
    // clear up flags
    XORQ DX, DX
    // DX = y[3]
    MOVQ 24(R12), DX
    MULXQ 0(R9), AX, R11
    ADOXQ AX, CX
    ADCXQ R11, BX
    MULXQ 8(R9), AX, R11
    ADOXQ AX, BX
    ADCXQ R11, BP
    MULXQ 16(R9), AX, R11
    ADOXQ AX, BP
    ADCXQ R11, SI
    MULXQ 24(R9), AX, R11
    ADOXQ AX, SI
    ADCXQ R11, DI
    MULXQ 32(R9), AX, R11
    ADOXQ AX, DI
    ADCXQ R11, R8
    MULXQ 40(R9), AX, R11
    ADOXQ AX, R8
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R11
    ADOXQ DX, R11
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ R11, R8
    // outter loop 4
    // clear up flags
    XORQ DX, DX
    // DX = y[4]
    MOVQ 32(R12), DX
    MULXQ 0(R9), AX, R11
    ADOXQ AX, CX
    ADCXQ R11, BX
    MULXQ 8(R9), AX, R11
    ADOXQ AX, BX
    ADCXQ R11, BP
    MULXQ 16(R9), AX, R11
    ADOXQ AX, BP
    ADCXQ R11, SI
    MULXQ 24(R9), AX, R11
    ADOXQ AX, SI
    ADCXQ R11, DI
    MULXQ 32(R9), AX, R11
    ADOXQ AX, DI
    ADCXQ R11, R8
    MULXQ 40(R9), AX, R11
    ADOXQ AX, R8
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R11
    ADOXQ DX, R11
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ R11, R8
    // outter loop 5
    // clear up flags
    XORQ DX, DX
    // DX = y[5]
    MOVQ 40(R12), DX
    MULXQ 0(R9), AX, R11
    ADOXQ AX, CX
    ADCXQ R11, BX
    MULXQ 8(R9), AX, R11
    ADOXQ AX, BX
    ADCXQ R11, BP
    MULXQ 16(R9), AX, R11
    ADOXQ AX, BP
    ADCXQ R11, SI
    MULXQ 24(R9), AX, R11
    ADOXQ AX, SI
    ADCXQ R11, DI
    MULXQ 32(R9), AX, R11
    ADOXQ AX, DI
    ADCXQ R11, R8
    MULXQ 40(R9), AX, R11
    ADOXQ AX, R8
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R11
    ADOXQ DX, R11
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ R11, R8
reduce:
    MOVQ CX, R13
    MOVQ $0x8508c00000000001, DX
    SUBQ DX, R13
    MOVQ BX, R14
    MOVQ $0x170b5d4430000000, DX
    SBBQ DX, R14
    MOVQ BP, R15
    MOVQ $0x1ef3622fba094800, DX
    SBBQ DX, R15
    MOVQ SI, R10
    MOVQ $0x1a22d9f300f5138f, DX
    SBBQ DX, R10
    MOVQ DI, R12
    MOVQ $0xc63b05c06ca1493b, DX
    SBBQ DX, R12
    MOVQ R8, R11
    MOVQ $0x01ae3a4617c510ea, DX
    SBBQ DX, R11
    JCS t_is_smaller
    MOVQ R13, 0(R9)
    MOVQ R14, 8(R9)
    MOVQ R15, 16(R9)
    MOVQ R10, 24(R9)
    MOVQ R12, 32(R9)
    MOVQ R11, 40(R9)
    RET
t_is_smaller:
    MOVQ CX, 0(R9)
    MOVQ BX, 8(R9)
    MOVQ BP, 16(R9)
    MOVQ SI, 24(R9)
    MOVQ DI, 32(R9)
    MOVQ R8, 40(R9)
    RET
no_adx:
    // dereference y
    MOVQ y+8(FP), R12
    MOVQ 0(R9), AX
    MOVQ 0(R12), R14
    MULQ R14
    MOVQ AX, CX
    MOVQ DX, R15
    MOVQ $0x8508bfffffffffff, R10
    IMULQ CX, R10
    MOVQ $0x8508c00000000001, AX
    MULQ R10
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ 8(R9), AX
    MULQ R14
    MOVQ R15, BX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x170b5d4430000000, AX
    MULQ R10
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ 16(R9), AX
    MULQ R14
    MOVQ R15, BP
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1ef3622fba094800, AX
    MULQ R10
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ 24(R9), AX
    MULQ R14
    MOVQ R15, SI
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R10
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ 32(R9), AX
    MULQ R14
    MOVQ R15, DI
    ADDQ AX, DI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R10
    ADDQ DI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, SI
    MOVQ DX, R13
    MOVQ 40(R9), AX
    MULQ R14
    MOVQ R15, R8
    ADDQ AX, R8
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R10
    ADDQ R8, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, DI
    MOVQ DX, R13
    ADDQ R13, R15
    MOVQ R15, R8
    MOVQ 0(R9), AX
    MOVQ 8(R12), R14
    MULQ R14
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x8508bfffffffffff, R10
    IMULQ CX, R10
    MOVQ $0x8508c00000000001, AX
    MULQ R10
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ 8(R9), AX
    MULQ R14
    ADDQ R15, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x170b5d4430000000, AX
    MULQ R10
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ 16(R9), AX
    MULQ R14
    ADDQ R15, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1ef3622fba094800, AX
    MULQ R10
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ 24(R9), AX
    MULQ R14
    ADDQ R15, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R10
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ 32(R9), AX
    MULQ R14
    ADDQ R15, DI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, DI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R10
    ADDQ DI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, SI
    MOVQ DX, R13
    MOVQ 40(R9), AX
    MULQ R14
    ADDQ R15, R8
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R8
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R10
    ADDQ R8, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, DI
    MOVQ DX, R13
    ADDQ R13, R15
    MOVQ R15, R8
    MOVQ 0(R9), AX
    MOVQ 16(R12), R14
    MULQ R14
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x8508bfffffffffff, R10
    IMULQ CX, R10
    MOVQ $0x8508c00000000001, AX
    MULQ R10
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ 8(R9), AX
    MULQ R14
    ADDQ R15, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x170b5d4430000000, AX
    MULQ R10
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ 16(R9), AX
    MULQ R14
    ADDQ R15, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1ef3622fba094800, AX
    MULQ R10
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ 24(R9), AX
    MULQ R14
    ADDQ R15, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R10
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ 32(R9), AX
    MULQ R14
    ADDQ R15, DI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, DI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R10
    ADDQ DI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, SI
    MOVQ DX, R13
    MOVQ 40(R9), AX
    MULQ R14
    ADDQ R15, R8
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R8
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R10
    ADDQ R8, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, DI
    MOVQ DX, R13
    ADDQ R13, R15
    MOVQ R15, R8
    MOVQ 0(R9), AX
    MOVQ 24(R12), R14
    MULQ R14
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x8508bfffffffffff, R10
    IMULQ CX, R10
    MOVQ $0x8508c00000000001, AX
    MULQ R10
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ 8(R9), AX
    MULQ R14
    ADDQ R15, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x170b5d4430000000, AX
    MULQ R10
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ 16(R9), AX
    MULQ R14
    ADDQ R15, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1ef3622fba094800, AX
    MULQ R10
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ 24(R9), AX
    MULQ R14
    ADDQ R15, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R10
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ 32(R9), AX
    MULQ R14
    ADDQ R15, DI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, DI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R10
    ADDQ DI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, SI
    MOVQ DX, R13
    MOVQ 40(R9), AX
    MULQ R14
    ADDQ R15, R8
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R8
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R10
    ADDQ R8, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, DI
    MOVQ DX, R13
    ADDQ R13, R15
    MOVQ R15, R8
    MOVQ 0(R9), AX
    MOVQ 32(R12), R14
    MULQ R14
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x8508bfffffffffff, R10
    IMULQ CX, R10
    MOVQ $0x8508c00000000001, AX
    MULQ R10
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ 8(R9), AX
    MULQ R14
    ADDQ R15, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x170b5d4430000000, AX
    MULQ R10
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ 16(R9), AX
    MULQ R14
    ADDQ R15, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1ef3622fba094800, AX
    MULQ R10
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ 24(R9), AX
    MULQ R14
    ADDQ R15, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R10
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ 32(R9), AX
    MULQ R14
    ADDQ R15, DI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, DI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R10
    ADDQ DI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, SI
    MOVQ DX, R13
    MOVQ 40(R9), AX
    MULQ R14
    ADDQ R15, R8
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R8
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R10
    ADDQ R8, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, DI
    MOVQ DX, R13
    ADDQ R13, R15
    MOVQ R15, R8
    MOVQ 0(R9), AX
    MOVQ 40(R12), R14
    MULQ R14
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x8508bfffffffffff, R10
    IMULQ CX, R10
    MOVQ $0x8508c00000000001, AX
    MULQ R10
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ 8(R9), AX
    MULQ R14
    ADDQ R15, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x170b5d4430000000, AX
    MULQ R10
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ 16(R9), AX
    MULQ R14
    ADDQ R15, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1ef3622fba094800, AX
    MULQ R10
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ 24(R9), AX
    MULQ R14
    ADDQ R15, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R10
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ 32(R9), AX
    MULQ R14
    ADDQ R15, DI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, DI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R10
    ADDQ DI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, SI
    MOVQ DX, R13
    MOVQ 40(R9), AX
    MULQ R14
    ADDQ R15, R8
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R8
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R10
    ADDQ R8, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, DI
    MOVQ DX, R13
    ADDQ R13, R15
    MOVQ R15, R8
    JMP reduce


// func fromMontElement(res *Element)
// montgomery multiplication of res by 1 
// stores the result in res
TEXT ·fromMontElement(SB), NOSPLIT, $0-8
	// the algorithm is described here
	// https://hackmd.io/@zkteam/modular_multiplication
	// when y = 1 we have: 
	// for i=0 to N-1
	// 		t[i] = x[i]
	// for i=0 to N-1
	// 		m := t[0]*q'[0] mod W
	// 		C,_ := t[0] + m*q[0]
	// 		for j=1 to N-1
	// 		    (C,t[j-1]) := t[j] + m*q[j] + C
	// 		t[N-1] = C


    // dereference x
    MOVQ res+0(FP), R9
    MOVQ 0(R9), CX
    MOVQ 8(R9), BX
    MOVQ 16(R9), BP
    MOVQ 24(R9), SI
    MOVQ 32(R9), DI
    MOVQ 40(R9), R8
    // check if we support adx and mulx
    CMPB ·supportAdx(SB), $0x0000000000000001
    JNE no_adx
    // outter loop 0
    // clear up flags
    XORQ DX, DX
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ AX, R8
    // outter loop 1
    // clear up flags
    XORQ DX, DX
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ AX, R8
    // outter loop 2
    // clear up flags
    XORQ DX, DX
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ AX, R8
    // outter loop 3
    // clear up flags
    XORQ DX, DX
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ AX, R8
    // outter loop 4
    // clear up flags
    XORQ DX, DX
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ AX, R8
    // outter loop 5
    // clear up flags
    XORQ DX, DX
    MOVQ $0x8508bfffffffffff, DX
    MULXQ CX, R10, DX
    XORQ DX, DX
    MOVQ $0x8508c00000000001, DX
    MULXQ R10, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x170b5d4430000000, DX
    ADCXQ BX, CX
    MULXQ R10, AX, BX
    ADOXQ AX, CX
    MOVQ $0x1ef3622fba094800, DX
    ADCXQ BP, BX
    MULXQ R10, AX, BP
    ADOXQ AX, BX
    MOVQ $0x1a22d9f300f5138f, DX
    ADCXQ SI, BP
    MULXQ R10, AX, SI
    ADOXQ AX, BP
    MOVQ $0xc63b05c06ca1493b, DX
    ADCXQ DI, SI
    MULXQ R10, AX, DI
    ADOXQ AX, SI
    MOVQ $0x01ae3a4617c510ea, DX
    ADCXQ R8, DI
    MULXQ R10, AX, R8
    ADOXQ AX, DI
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, R8
    ADOXQ AX, R8
reduce:
    MOVQ CX, R11
    MOVQ $0x8508c00000000001, DX
    SUBQ DX, R11
    MOVQ BX, R12
    MOVQ $0x170b5d4430000000, DX
    SBBQ DX, R12
    MOVQ BP, R13
    MOVQ $0x1ef3622fba094800, DX
    SBBQ DX, R13
    MOVQ SI, R14
    MOVQ $0x1a22d9f300f5138f, DX
    SBBQ DX, R14
    MOVQ DI, R15
    MOVQ $0xc63b05c06ca1493b, DX
    SBBQ DX, R15
    MOVQ R8, R10
    MOVQ $0x01ae3a4617c510ea, DX
    SBBQ DX, R10
    JCS t_is_smaller
    MOVQ R11, 0(R9)
    MOVQ R12, 8(R9)
    MOVQ R13, 16(R9)
    MOVQ R14, 24(R9)
    MOVQ R15, 32(R9)
    MOVQ R10, 40(R9)
    RET
t_is_smaller:
    MOVQ CX, 0(R9)
    MOVQ BX, 8(R9)
    MOVQ BP, 16(R9)
    MOVQ SI, 24(R9)
    MOVQ DI, 32(R9)
    MOVQ R8, 40(R9)
    RET
no_adx:
    MOVQ $0x8508bfffffffffff, R14
    IMULQ CX, R14
    MOVQ $0x8508c00000000001, AX
    MULQ R14
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R11
    MOVQ $0x170b5d4430000000, AX
    MULQ R14
    ADDQ BX, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, CX
    MOVQ DX, R11
    MOVQ $0x1ef3622fba094800, AX
    MULQ R14
    ADDQ BP, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BX
    MOVQ DX, R11
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R14
    ADDQ SI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BP
    MOVQ DX, R11
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R14
    ADDQ DI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, SI
    MOVQ DX, R11
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R14
    ADDQ R8, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, DI
    MOVQ DX, R11
    MOVQ R11, R8
    MOVQ $0x8508bfffffffffff, R14
    IMULQ CX, R14
    MOVQ $0x8508c00000000001, AX
    MULQ R14
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R11
    MOVQ $0x170b5d4430000000, AX
    MULQ R14
    ADDQ BX, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, CX
    MOVQ DX, R11
    MOVQ $0x1ef3622fba094800, AX
    MULQ R14
    ADDQ BP, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BX
    MOVQ DX, R11
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R14
    ADDQ SI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BP
    MOVQ DX, R11
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R14
    ADDQ DI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, SI
    MOVQ DX, R11
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R14
    ADDQ R8, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, DI
    MOVQ DX, R11
    MOVQ R11, R8
    MOVQ $0x8508bfffffffffff, R14
    IMULQ CX, R14
    MOVQ $0x8508c00000000001, AX
    MULQ R14
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R11
    MOVQ $0x170b5d4430000000, AX
    MULQ R14
    ADDQ BX, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, CX
    MOVQ DX, R11
    MOVQ $0x1ef3622fba094800, AX
    MULQ R14
    ADDQ BP, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BX
    MOVQ DX, R11
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R14
    ADDQ SI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BP
    MOVQ DX, R11
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R14
    ADDQ DI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, SI
    MOVQ DX, R11
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R14
    ADDQ R8, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, DI
    MOVQ DX, R11
    MOVQ R11, R8
    MOVQ $0x8508bfffffffffff, R14
    IMULQ CX, R14
    MOVQ $0x8508c00000000001, AX
    MULQ R14
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R11
    MOVQ $0x170b5d4430000000, AX
    MULQ R14
    ADDQ BX, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, CX
    MOVQ DX, R11
    MOVQ $0x1ef3622fba094800, AX
    MULQ R14
    ADDQ BP, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BX
    MOVQ DX, R11
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R14
    ADDQ SI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BP
    MOVQ DX, R11
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R14
    ADDQ DI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, SI
    MOVQ DX, R11
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R14
    ADDQ R8, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, DI
    MOVQ DX, R11
    MOVQ R11, R8
    MOVQ $0x8508bfffffffffff, R14
    IMULQ CX, R14
    MOVQ $0x8508c00000000001, AX
    MULQ R14
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R11
    MOVQ $0x170b5d4430000000, AX
    MULQ R14
    ADDQ BX, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, CX
    MOVQ DX, R11
    MOVQ $0x1ef3622fba094800, AX
    MULQ R14
    ADDQ BP, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BX
    MOVQ DX, R11
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R14
    ADDQ SI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BP
    MOVQ DX, R11
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R14
    ADDQ DI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, SI
    MOVQ DX, R11
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R14
    ADDQ R8, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, DI
    MOVQ DX, R11
    MOVQ R11, R8
    MOVQ $0x8508bfffffffffff, R14
    IMULQ CX, R14
    MOVQ $0x8508c00000000001, AX
    MULQ R14
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R11
    MOVQ $0x170b5d4430000000, AX
    MULQ R14
    ADDQ BX, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, CX
    MOVQ DX, R11
    MOVQ $0x1ef3622fba094800, AX
    MULQ R14
    ADDQ BP, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BX
    MOVQ DX, R11
    MOVQ $0x1a22d9f300f5138f, AX
    MULQ R14
    ADDQ SI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, BP
    MOVQ DX, R11
    MOVQ $0xc63b05c06ca1493b, AX
    MULQ R14
    ADDQ DI, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, SI
    MOVQ DX, R11
    MOVQ $0x01ae3a4617c510ea, AX
    MULQ R14
    ADDQ R8, R11
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R11
    ADCQ $0x0000000000000000, DX
    MOVQ R11, DI
    MOVQ DX, R11
    MOVQ R11, R8
    JMP reduce
