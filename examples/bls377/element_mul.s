// Code generated by goff (v0.1.0) DO NOT EDIT



#include "textflag.h"

// func mulAsmElement(res,y *Element)
// see https://hackmd.io/@zkteam/modular_multiplication
TEXT ·mulAsmElement(SB), NOSPLIT, $0-16

	MOVQ x+0(FP), R9
	MOVQ y+8(FP), R10

	// test if we have adx
	CMPB ·support_adx_Element(SB), $1
 	JNE no_adx
	XORQ R11 , R11 // TODO if A + C can't overflow we can get rid of that one

	MOVQ 0(R10), R14
	// for j=0 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
		
		MOVQ 0(R9), DX
				MULXQ R14, CX ,  R11
		
		MOVQ 8(R9), DX
				MOVQ R11, BX
			MULXQ R14, AX,  R11
			ADOXQ AX, BX
		
		MOVQ 16(R9), DX
				MOVQ R11, BP
			MULXQ R14, AX,  R11
			ADOXQ AX, BP
		
		MOVQ 24(R9), DX
				MOVQ R11, SI
			MULXQ R14, AX,  R11
			ADOXQ AX, SI
		
		MOVQ 32(R9), DX
				MOVQ R11, DI
			MULXQ R14, AX,  R11
			ADOXQ AX, DI
		
		MOVQ 40(R9), DX
				MOVQ R11, R8
			MULXQ R14, AX,  R11
			ADOXQ AX, R8
	MOVQ $0, DX
	ADCXQ DX, R11 
	ADOXQ DX, R11 
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, DX // R13
	MULXQ CX,R13, DX

	
	XORQ DX, DX // TODO if A + 2 (carries) can't overflow we can get rid of that one
	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, DX
	MULXQ R13, AX, R12
	ADCXQ CX ,AX
	

	// for j=1 to N-1
    //    (C,t[j-1]) := t[j] + m*q[j] + C
		
		MOVQ $0x170b5d4430000000, DX
		MULXQ R13, AX, DX
		ADCXQ  BX, R12 
		ADOXQ AX, R12
		MOVQ R12, CX
			MOVQ DX, R12
		
		MOVQ $0x1ef3622fba094800, DX
		MULXQ R13, AX, DX
		ADCXQ  BP, R12 
		ADOXQ AX, R12
		MOVQ R12, BX
			MOVQ DX, R12
		
		MOVQ $0x1a22d9f300f5138f, DX
		MULXQ R13, AX, DX
		ADCXQ  SI, R12 
		ADOXQ AX, R12
		MOVQ R12, BP
			MOVQ DX, R12
		
		MOVQ $0xc63b05c06ca1493b, DX
		MULXQ R13, AX, DX
		ADCXQ  DI, R12 
		ADOXQ AX, R12
		MOVQ R12, SI
			MOVQ DX, R12
		
		MOVQ $0x01ae3a4617c510ea, DX
		MULXQ R13, AX, DX
		ADCXQ  R8, R12 
		ADOXQ AX, R12
		MOVQ R12, DI
			MOVQ $0, AX
			ADCXQ AX, DX
			ADOXQ DX, R11
			MOVQ R11, R8
	XORQ R11 , R11 // TODO if A + C can't overflow we can get rid of that one

	MOVQ 8(R10), R14
	// for j=0 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
		
		MOVQ 0(R9), DX
				MULXQ R14, AX,  R11
				ADOXQ AX, CX
		
		MOVQ 8(R9), DX
				ADCXQ R11, BX
			MULXQ R14, AX,  R11
			ADOXQ AX, BX
		
		MOVQ 16(R9), DX
				ADCXQ R11, BP
			MULXQ R14, AX,  R11
			ADOXQ AX, BP
		
		MOVQ 24(R9), DX
				ADCXQ R11, SI
			MULXQ R14, AX,  R11
			ADOXQ AX, SI
		
		MOVQ 32(R9), DX
				ADCXQ R11, DI
			MULXQ R14, AX,  R11
			ADOXQ AX, DI
		
		MOVQ 40(R9), DX
				ADCXQ R11, R8
			MULXQ R14, AX,  R11
			ADOXQ AX, R8
	MOVQ $0, DX
	ADCXQ DX, R11 
	ADOXQ DX, R11 
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, DX // R13
	MULXQ CX,R13, DX

	
	XORQ DX, DX // TODO if A + 2 (carries) can't overflow we can get rid of that one
	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, DX
	MULXQ R13, AX, R12
	ADCXQ CX ,AX
	

	// for j=1 to N-1
    //    (C,t[j-1]) := t[j] + m*q[j] + C
		
		MOVQ $0x170b5d4430000000, DX
		MULXQ R13, AX, DX
		ADCXQ  BX, R12 
		ADOXQ AX, R12
		MOVQ R12, CX
			MOVQ DX, R12
		
		MOVQ $0x1ef3622fba094800, DX
		MULXQ R13, AX, DX
		ADCXQ  BP, R12 
		ADOXQ AX, R12
		MOVQ R12, BX
			MOVQ DX, R12
		
		MOVQ $0x1a22d9f300f5138f, DX
		MULXQ R13, AX, DX
		ADCXQ  SI, R12 
		ADOXQ AX, R12
		MOVQ R12, BP
			MOVQ DX, R12
		
		MOVQ $0xc63b05c06ca1493b, DX
		MULXQ R13, AX, DX
		ADCXQ  DI, R12 
		ADOXQ AX, R12
		MOVQ R12, SI
			MOVQ DX, R12
		
		MOVQ $0x01ae3a4617c510ea, DX
		MULXQ R13, AX, DX
		ADCXQ  R8, R12 
		ADOXQ AX, R12
		MOVQ R12, DI
			MOVQ $0, AX
			ADCXQ AX, DX
			ADOXQ DX, R11
			MOVQ R11, R8
	XORQ R11 , R11 // TODO if A + C can't overflow we can get rid of that one

	MOVQ 16(R10), R14
	// for j=0 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
		
		MOVQ 0(R9), DX
				MULXQ R14, AX,  R11
				ADOXQ AX, CX
		
		MOVQ 8(R9), DX
				ADCXQ R11, BX
			MULXQ R14, AX,  R11
			ADOXQ AX, BX
		
		MOVQ 16(R9), DX
				ADCXQ R11, BP
			MULXQ R14, AX,  R11
			ADOXQ AX, BP
		
		MOVQ 24(R9), DX
				ADCXQ R11, SI
			MULXQ R14, AX,  R11
			ADOXQ AX, SI
		
		MOVQ 32(R9), DX
				ADCXQ R11, DI
			MULXQ R14, AX,  R11
			ADOXQ AX, DI
		
		MOVQ 40(R9), DX
				ADCXQ R11, R8
			MULXQ R14, AX,  R11
			ADOXQ AX, R8
	MOVQ $0, DX
	ADCXQ DX, R11 
	ADOXQ DX, R11 
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, DX // R13
	MULXQ CX,R13, DX

	
	XORQ DX, DX // TODO if A + 2 (carries) can't overflow we can get rid of that one
	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, DX
	MULXQ R13, AX, R12
	ADCXQ CX ,AX
	

	// for j=1 to N-1
    //    (C,t[j-1]) := t[j] + m*q[j] + C
		
		MOVQ $0x170b5d4430000000, DX
		MULXQ R13, AX, DX
		ADCXQ  BX, R12 
		ADOXQ AX, R12
		MOVQ R12, CX
			MOVQ DX, R12
		
		MOVQ $0x1ef3622fba094800, DX
		MULXQ R13, AX, DX
		ADCXQ  BP, R12 
		ADOXQ AX, R12
		MOVQ R12, BX
			MOVQ DX, R12
		
		MOVQ $0x1a22d9f300f5138f, DX
		MULXQ R13, AX, DX
		ADCXQ  SI, R12 
		ADOXQ AX, R12
		MOVQ R12, BP
			MOVQ DX, R12
		
		MOVQ $0xc63b05c06ca1493b, DX
		MULXQ R13, AX, DX
		ADCXQ  DI, R12 
		ADOXQ AX, R12
		MOVQ R12, SI
			MOVQ DX, R12
		
		MOVQ $0x01ae3a4617c510ea, DX
		MULXQ R13, AX, DX
		ADCXQ  R8, R12 
		ADOXQ AX, R12
		MOVQ R12, DI
			MOVQ $0, AX
			ADCXQ AX, DX
			ADOXQ DX, R11
			MOVQ R11, R8
	XORQ R11 , R11 // TODO if A + C can't overflow we can get rid of that one

	MOVQ 24(R10), R14
	// for j=0 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
		
		MOVQ 0(R9), DX
				MULXQ R14, AX,  R11
				ADOXQ AX, CX
		
		MOVQ 8(R9), DX
				ADCXQ R11, BX
			MULXQ R14, AX,  R11
			ADOXQ AX, BX
		
		MOVQ 16(R9), DX
				ADCXQ R11, BP
			MULXQ R14, AX,  R11
			ADOXQ AX, BP
		
		MOVQ 24(R9), DX
				ADCXQ R11, SI
			MULXQ R14, AX,  R11
			ADOXQ AX, SI
		
		MOVQ 32(R9), DX
				ADCXQ R11, DI
			MULXQ R14, AX,  R11
			ADOXQ AX, DI
		
		MOVQ 40(R9), DX
				ADCXQ R11, R8
			MULXQ R14, AX,  R11
			ADOXQ AX, R8
	MOVQ $0, DX
	ADCXQ DX, R11 
	ADOXQ DX, R11 
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, DX // R13
	MULXQ CX,R13, DX

	
	XORQ DX, DX // TODO if A + 2 (carries) can't overflow we can get rid of that one
	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, DX
	MULXQ R13, AX, R12
	ADCXQ CX ,AX
	

	// for j=1 to N-1
    //    (C,t[j-1]) := t[j] + m*q[j] + C
		
		MOVQ $0x170b5d4430000000, DX
		MULXQ R13, AX, DX
		ADCXQ  BX, R12 
		ADOXQ AX, R12
		MOVQ R12, CX
			MOVQ DX, R12
		
		MOVQ $0x1ef3622fba094800, DX
		MULXQ R13, AX, DX
		ADCXQ  BP, R12 
		ADOXQ AX, R12
		MOVQ R12, BX
			MOVQ DX, R12
		
		MOVQ $0x1a22d9f300f5138f, DX
		MULXQ R13, AX, DX
		ADCXQ  SI, R12 
		ADOXQ AX, R12
		MOVQ R12, BP
			MOVQ DX, R12
		
		MOVQ $0xc63b05c06ca1493b, DX
		MULXQ R13, AX, DX
		ADCXQ  DI, R12 
		ADOXQ AX, R12
		MOVQ R12, SI
			MOVQ DX, R12
		
		MOVQ $0x01ae3a4617c510ea, DX
		MULXQ R13, AX, DX
		ADCXQ  R8, R12 
		ADOXQ AX, R12
		MOVQ R12, DI
			MOVQ $0, AX
			ADCXQ AX, DX
			ADOXQ DX, R11
			MOVQ R11, R8
	XORQ R11 , R11 // TODO if A + C can't overflow we can get rid of that one

	MOVQ 32(R10), R14
	// for j=0 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
		
		MOVQ 0(R9), DX
				MULXQ R14, AX,  R11
				ADOXQ AX, CX
		
		MOVQ 8(R9), DX
				ADCXQ R11, BX
			MULXQ R14, AX,  R11
			ADOXQ AX, BX
		
		MOVQ 16(R9), DX
				ADCXQ R11, BP
			MULXQ R14, AX,  R11
			ADOXQ AX, BP
		
		MOVQ 24(R9), DX
				ADCXQ R11, SI
			MULXQ R14, AX,  R11
			ADOXQ AX, SI
		
		MOVQ 32(R9), DX
				ADCXQ R11, DI
			MULXQ R14, AX,  R11
			ADOXQ AX, DI
		
		MOVQ 40(R9), DX
				ADCXQ R11, R8
			MULXQ R14, AX,  R11
			ADOXQ AX, R8
	MOVQ $0, DX
	ADCXQ DX, R11 
	ADOXQ DX, R11 
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, DX // R13
	MULXQ CX,R13, DX

	
	XORQ DX, DX // TODO if A + 2 (carries) can't overflow we can get rid of that one
	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, DX
	MULXQ R13, AX, R12
	ADCXQ CX ,AX
	

	// for j=1 to N-1
    //    (C,t[j-1]) := t[j] + m*q[j] + C
		
		MOVQ $0x170b5d4430000000, DX
		MULXQ R13, AX, DX
		ADCXQ  BX, R12 
		ADOXQ AX, R12
		MOVQ R12, CX
			MOVQ DX, R12
		
		MOVQ $0x1ef3622fba094800, DX
		MULXQ R13, AX, DX
		ADCXQ  BP, R12 
		ADOXQ AX, R12
		MOVQ R12, BX
			MOVQ DX, R12
		
		MOVQ $0x1a22d9f300f5138f, DX
		MULXQ R13, AX, DX
		ADCXQ  SI, R12 
		ADOXQ AX, R12
		MOVQ R12, BP
			MOVQ DX, R12
		
		MOVQ $0xc63b05c06ca1493b, DX
		MULXQ R13, AX, DX
		ADCXQ  DI, R12 
		ADOXQ AX, R12
		MOVQ R12, SI
			MOVQ DX, R12
		
		MOVQ $0x01ae3a4617c510ea, DX
		MULXQ R13, AX, DX
		ADCXQ  R8, R12 
		ADOXQ AX, R12
		MOVQ R12, DI
			MOVQ $0, AX
			ADCXQ AX, DX
			ADOXQ DX, R11
			MOVQ R11, R8
	XORQ R11 , R11 // TODO if A + C can't overflow we can get rid of that one

	MOVQ 40(R10), R14
	// for j=0 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
		
		MOVQ 0(R9), DX
				MULXQ R14, AX,  R11
				ADOXQ AX, CX
		
		MOVQ 8(R9), DX
				ADCXQ R11, BX
			MULXQ R14, AX,  R11
			ADOXQ AX, BX
		
		MOVQ 16(R9), DX
				ADCXQ R11, BP
			MULXQ R14, AX,  R11
			ADOXQ AX, BP
		
		MOVQ 24(R9), DX
				ADCXQ R11, SI
			MULXQ R14, AX,  R11
			ADOXQ AX, SI
		
		MOVQ 32(R9), DX
				ADCXQ R11, DI
			MULXQ R14, AX,  R11
			ADOXQ AX, DI
		
		MOVQ 40(R9), DX
				ADCXQ R11, R8
			MULXQ R14, AX,  R11
			ADOXQ AX, R8
	MOVQ $0, DX
	ADCXQ DX, R11 
	ADOXQ DX, R11 
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, DX // R13
	MULXQ CX,R13, DX

	
	XORQ DX, DX // TODO if A + 2 (carries) can't overflow we can get rid of that one
	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, DX
	MULXQ R13, AX, R12
	ADCXQ CX ,AX
	

	// for j=1 to N-1
    //    (C,t[j-1]) := t[j] + m*q[j] + C
		
		MOVQ $0x170b5d4430000000, DX
		MULXQ R13, AX, DX
		ADCXQ  BX, R12 
		ADOXQ AX, R12
		MOVQ R12, CX
			MOVQ DX, R12
		
		MOVQ $0x1ef3622fba094800, DX
		MULXQ R13, AX, DX
		ADCXQ  BP, R12 
		ADOXQ AX, R12
		MOVQ R12, BX
			MOVQ DX, R12
		
		MOVQ $0x1a22d9f300f5138f, DX
		MULXQ R13, AX, DX
		ADCXQ  SI, R12 
		ADOXQ AX, R12
		MOVQ R12, BP
			MOVQ DX, R12
		
		MOVQ $0xc63b05c06ca1493b, DX
		MULXQ R13, AX, DX
		ADCXQ  DI, R12 
		ADOXQ AX, R12
		MOVQ R12, SI
			MOVQ DX, R12
		
		MOVQ $0x01ae3a4617c510ea, DX
		MULXQ R13, AX, DX
		ADCXQ  R8, R12 
		ADOXQ AX, R12
		MOVQ R12, DI
			MOVQ $0, AX
			ADCXQ AX, DX
			ADOXQ DX, R11
			MOVQ R11, R8

reduce:
	// reduce if needed, should do a full comparaison, right now doing the constant time version // number of register used by u
	// u1 starts at 7
	// Q starts at 12
	MOVQ CX, DX
	MOVQ BX, R10
	MOVQ BP, R11
	MOVQ SI, R12
	MOVQ DI, R13
	MOVQ R8, R14
	MOVQ $0x8508c00000000001, R15
	SUBQ  R15, DX
	MOVQ $0x170b5d4430000000, R15
	SBBQ  R15, R10
	MOVQ $0x1ef3622fba094800, R15
	SBBQ  R15, R11
	MOVQ $0x1a22d9f300f5138f, R15
	SBBQ  R15, R12
	MOVQ $0xc63b05c06ca1493b, R15
	SBBQ  R15, R13
	MOVQ $0x01ae3a4617c510ea, R15
	SBBQ  R15, R14
	JCS t_is_smaller // no borrow, we return t
	MOVQ DX, (R9)
	MOVQ R10, 8(R9)
	MOVQ R11, 16(R9)
	MOVQ R12, 24(R9)
	MOVQ R13, 32(R9)
	MOVQ R14, 40(R9)
	RET
t_is_smaller:
	MOVQ CX, 0(R9)
	MOVQ BX, 8(R9)
	MOVQ BP, 16(R9)
	MOVQ SI, 24(R9)
	MOVQ DI, 32(R9)
	MOVQ R8, 40(R9)
	RET

no_adx:
	// (A,t[0]) := t[0] + x[0]*y[0]
	MOVQ (R9), AX // x[0]
	MOVQ 0(R10), R14
	MULQ R14 // x[0] * y[0]	
	MOVQ DX, R11
	MOVQ AX, CX
	
	
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, R13
	IMULQ CX , R13

	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, AX
	MULQ R13
	ADDQ CX ,AX
	ADCQ $0, DX
	MOVQ  DX, R12

	// for j=1 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
    //    (C,t[j-1]) := t[j] + m*q[j] + C
	MOVQ 8(R9), AX
	MULQ R14 // x[1] * y[0]
	MOVQ R11, BX
	ADDQ AX, BX
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x170b5d4430000000, AX
	MULQ R13
	ADDQ  BX, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, CX
	MOVQ DX, R12
	MOVQ 16(R9), AX
	MULQ R14 // x[2] * y[0]
	MOVQ R11, BP
	ADDQ AX, BP
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1ef3622fba094800, AX
	MULQ R13
	ADDQ  BP, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BX
	MOVQ DX, R12
	MOVQ 24(R9), AX
	MULQ R14 // x[3] * y[0]
	MOVQ R11, SI
	ADDQ AX, SI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1a22d9f300f5138f, AX
	MULQ R13
	ADDQ  SI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BP
	MOVQ DX, R12
	MOVQ 32(R9), AX
	MULQ R14 // x[4] * y[0]
	MOVQ R11, DI
	ADDQ AX, DI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0xc63b05c06ca1493b, AX
	MULQ R13
	ADDQ  DI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, SI
	MOVQ DX, R12
	MOVQ 40(R9), AX
	MULQ R14 // x[5] * y[0]
	MOVQ R11, R8
	ADDQ AX, R8
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x01ae3a4617c510ea, AX
	MULQ R13
	ADDQ  R8, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, DI
	MOVQ DX, R12

	ADDQ R12, R11
	MOVQ R11, R8
	// (A,t[0]) := t[0] + x[0]*y[1]
	MOVQ (R9), AX // x[0]
	MOVQ 8(R10), R14
	MULQ R14 // x[0] * y[1]
	ADDQ AX, CX 
	ADCQ $0, DX	
	MOVQ DX, R11
	
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, R13
	IMULQ CX , R13

	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, AX
	MULQ R13
	ADDQ CX ,AX
	ADCQ $0, DX
	MOVQ  DX, R12

	// for j=1 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
    //    (C,t[j-1]) := t[j] + m*q[j] + C
	MOVQ 8(R9), AX
	MULQ R14 // x[1] * y[1]
	ADDQ R11, BX
	ADCQ $0, DX
	ADDQ AX, BX
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x170b5d4430000000, AX
	MULQ R13
	ADDQ  BX, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, CX
	MOVQ DX, R12
	MOVQ 16(R9), AX
	MULQ R14 // x[2] * y[1]
	ADDQ R11, BP
	ADCQ $0, DX
	ADDQ AX, BP
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1ef3622fba094800, AX
	MULQ R13
	ADDQ  BP, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BX
	MOVQ DX, R12
	MOVQ 24(R9), AX
	MULQ R14 // x[3] * y[1]
	ADDQ R11, SI
	ADCQ $0, DX
	ADDQ AX, SI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1a22d9f300f5138f, AX
	MULQ R13
	ADDQ  SI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BP
	MOVQ DX, R12
	MOVQ 32(R9), AX
	MULQ R14 // x[4] * y[1]
	ADDQ R11, DI
	ADCQ $0, DX
	ADDQ AX, DI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0xc63b05c06ca1493b, AX
	MULQ R13
	ADDQ  DI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, SI
	MOVQ DX, R12
	MOVQ 40(R9), AX
	MULQ R14 // x[5] * y[1]
	ADDQ R11, R8
	ADCQ $0, DX
	ADDQ AX, R8
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x01ae3a4617c510ea, AX
	MULQ R13
	ADDQ  R8, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, DI
	MOVQ DX, R12

	ADDQ R12, R11
	MOVQ R11, R8
	// (A,t[0]) := t[0] + x[0]*y[2]
	MOVQ (R9), AX // x[0]
	MOVQ 16(R10), R14
	MULQ R14 // x[0] * y[2]
	ADDQ AX, CX 
	ADCQ $0, DX	
	MOVQ DX, R11
	
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, R13
	IMULQ CX , R13

	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, AX
	MULQ R13
	ADDQ CX ,AX
	ADCQ $0, DX
	MOVQ  DX, R12

	// for j=1 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
    //    (C,t[j-1]) := t[j] + m*q[j] + C
	MOVQ 8(R9), AX
	MULQ R14 // x[1] * y[2]
	ADDQ R11, BX
	ADCQ $0, DX
	ADDQ AX, BX
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x170b5d4430000000, AX
	MULQ R13
	ADDQ  BX, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, CX
	MOVQ DX, R12
	MOVQ 16(R9), AX
	MULQ R14 // x[2] * y[2]
	ADDQ R11, BP
	ADCQ $0, DX
	ADDQ AX, BP
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1ef3622fba094800, AX
	MULQ R13
	ADDQ  BP, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BX
	MOVQ DX, R12
	MOVQ 24(R9), AX
	MULQ R14 // x[3] * y[2]
	ADDQ R11, SI
	ADCQ $0, DX
	ADDQ AX, SI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1a22d9f300f5138f, AX
	MULQ R13
	ADDQ  SI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BP
	MOVQ DX, R12
	MOVQ 32(R9), AX
	MULQ R14 // x[4] * y[2]
	ADDQ R11, DI
	ADCQ $0, DX
	ADDQ AX, DI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0xc63b05c06ca1493b, AX
	MULQ R13
	ADDQ  DI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, SI
	MOVQ DX, R12
	MOVQ 40(R9), AX
	MULQ R14 // x[5] * y[2]
	ADDQ R11, R8
	ADCQ $0, DX
	ADDQ AX, R8
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x01ae3a4617c510ea, AX
	MULQ R13
	ADDQ  R8, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, DI
	MOVQ DX, R12

	ADDQ R12, R11
	MOVQ R11, R8
	// (A,t[0]) := t[0] + x[0]*y[3]
	MOVQ (R9), AX // x[0]
	MOVQ 24(R10), R14
	MULQ R14 // x[0] * y[3]
	ADDQ AX, CX 
	ADCQ $0, DX	
	MOVQ DX, R11
	
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, R13
	IMULQ CX , R13

	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, AX
	MULQ R13
	ADDQ CX ,AX
	ADCQ $0, DX
	MOVQ  DX, R12

	// for j=1 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
    //    (C,t[j-1]) := t[j] + m*q[j] + C
	MOVQ 8(R9), AX
	MULQ R14 // x[1] * y[3]
	ADDQ R11, BX
	ADCQ $0, DX
	ADDQ AX, BX
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x170b5d4430000000, AX
	MULQ R13
	ADDQ  BX, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, CX
	MOVQ DX, R12
	MOVQ 16(R9), AX
	MULQ R14 // x[2] * y[3]
	ADDQ R11, BP
	ADCQ $0, DX
	ADDQ AX, BP
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1ef3622fba094800, AX
	MULQ R13
	ADDQ  BP, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BX
	MOVQ DX, R12
	MOVQ 24(R9), AX
	MULQ R14 // x[3] * y[3]
	ADDQ R11, SI
	ADCQ $0, DX
	ADDQ AX, SI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1a22d9f300f5138f, AX
	MULQ R13
	ADDQ  SI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BP
	MOVQ DX, R12
	MOVQ 32(R9), AX
	MULQ R14 // x[4] * y[3]
	ADDQ R11, DI
	ADCQ $0, DX
	ADDQ AX, DI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0xc63b05c06ca1493b, AX
	MULQ R13
	ADDQ  DI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, SI
	MOVQ DX, R12
	MOVQ 40(R9), AX
	MULQ R14 // x[5] * y[3]
	ADDQ R11, R8
	ADCQ $0, DX
	ADDQ AX, R8
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x01ae3a4617c510ea, AX
	MULQ R13
	ADDQ  R8, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, DI
	MOVQ DX, R12

	ADDQ R12, R11
	MOVQ R11, R8
	// (A,t[0]) := t[0] + x[0]*y[4]
	MOVQ (R9), AX // x[0]
	MOVQ 32(R10), R14
	MULQ R14 // x[0] * y[4]
	ADDQ AX, CX 
	ADCQ $0, DX	
	MOVQ DX, R11
	
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, R13
	IMULQ CX , R13

	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, AX
	MULQ R13
	ADDQ CX ,AX
	ADCQ $0, DX
	MOVQ  DX, R12

	// for j=1 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
    //    (C,t[j-1]) := t[j] + m*q[j] + C
	MOVQ 8(R9), AX
	MULQ R14 // x[1] * y[4]
	ADDQ R11, BX
	ADCQ $0, DX
	ADDQ AX, BX
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x170b5d4430000000, AX
	MULQ R13
	ADDQ  BX, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, CX
	MOVQ DX, R12
	MOVQ 16(R9), AX
	MULQ R14 // x[2] * y[4]
	ADDQ R11, BP
	ADCQ $0, DX
	ADDQ AX, BP
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1ef3622fba094800, AX
	MULQ R13
	ADDQ  BP, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BX
	MOVQ DX, R12
	MOVQ 24(R9), AX
	MULQ R14 // x[3] * y[4]
	ADDQ R11, SI
	ADCQ $0, DX
	ADDQ AX, SI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1a22d9f300f5138f, AX
	MULQ R13
	ADDQ  SI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BP
	MOVQ DX, R12
	MOVQ 32(R9), AX
	MULQ R14 // x[4] * y[4]
	ADDQ R11, DI
	ADCQ $0, DX
	ADDQ AX, DI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0xc63b05c06ca1493b, AX
	MULQ R13
	ADDQ  DI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, SI
	MOVQ DX, R12
	MOVQ 40(R9), AX
	MULQ R14 // x[5] * y[4]
	ADDQ R11, R8
	ADCQ $0, DX
	ADDQ AX, R8
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x01ae3a4617c510ea, AX
	MULQ R13
	ADDQ  R8, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, DI
	MOVQ DX, R12

	ADDQ R12, R11
	MOVQ R11, R8
	// (A,t[0]) := t[0] + x[0]*y[5]
	MOVQ (R9), AX // x[0]
	MOVQ 40(R10), R14
	MULQ R14 // x[0] * y[5]
	ADDQ AX, CX 
	ADCQ $0, DX	
	MOVQ DX, R11
	
	
	// m := t[0]*q'[0] mod W
	MOVQ $0x8508bfffffffffff, R13
	IMULQ CX , R13

	// C,_ := t[0] + m*q[0]
	MOVQ $0x8508c00000000001, AX
	MULQ R13
	ADDQ CX ,AX
	ADCQ $0, DX
	MOVQ  DX, R12

	// for j=1 to N-1
	//    (A,t[j])  := t[j] + x[j]*y[i] + A
    //    (C,t[j-1]) := t[j] + m*q[j] + C
	MOVQ 8(R9), AX
	MULQ R14 // x[1] * y[5]
	ADDQ R11, BX
	ADCQ $0, DX
	ADDQ AX, BX
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x170b5d4430000000, AX
	MULQ R13
	ADDQ  BX, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, CX
	MOVQ DX, R12
	MOVQ 16(R9), AX
	MULQ R14 // x[2] * y[5]
	ADDQ R11, BP
	ADCQ $0, DX
	ADDQ AX, BP
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1ef3622fba094800, AX
	MULQ R13
	ADDQ  BP, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BX
	MOVQ DX, R12
	MOVQ 24(R9), AX
	MULQ R14 // x[3] * y[5]
	ADDQ R11, SI
	ADCQ $0, DX
	ADDQ AX, SI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x1a22d9f300f5138f, AX
	MULQ R13
	ADDQ  SI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, BP
	MOVQ DX, R12
	MOVQ 32(R9), AX
	MULQ R14 // x[4] * y[5]
	ADDQ R11, DI
	ADCQ $0, DX
	ADDQ AX, DI
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0xc63b05c06ca1493b, AX
	MULQ R13
	ADDQ  DI, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, SI
	MOVQ DX, R12
	MOVQ 40(R9), AX
	MULQ R14 // x[5] * y[5]
	ADDQ R11, R8
	ADCQ $0, DX
	ADDQ AX, R8
	ADCQ $0, DX
	MOVQ DX, R11

	MOVQ $0x01ae3a4617c510ea, AX
	MULQ R13
	ADDQ  R8, R12
	ADCQ $0, DX
	ADDQ AX, R12
	ADCQ $0, DX
	
	MOVQ R12, DI
	MOVQ DX, R12

	ADDQ R12, R11
	MOVQ R11, R8

	JMP reduce
