// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goff (v0.2.2) DO NOT EDIT

// Package bw6_761 contains field arithmetic operations
package bw6_761

import "math/bits"

// set functions pointers to ADX version if instruction set available
func init() {
	if supportAdx {

		mulElement = func(res, x, y *Element) {
			_mulLargeADXElement(res, x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11])
		}
		squareElement = func(res, x *Element) {
			_mulLargeADXElement(res, x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11])
		}

		fromMontElement = _fromMontADXElement
	}
}

// -------------------------------------------------------------------------------------------------
// Declarations

//go:noescape
//go:noescape
func _mulLargeADXElement(res *Element, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11 uint64)

// Sub  z = x - y mod q
func (z *Element) Sub(x, y *Element) *Element {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17626244516597989515, 0)
		z[1], c = bits.Add64(z[1], 16614129118623039618, c)
		z[2], c = bits.Add64(z[2], 1588918198704579639, c)
		z[3], c = bits.Add64(z[3], 10998096788944562424, c)
		z[4], c = bits.Add64(z[4], 8204665564953313070, c)
		z[5], c = bits.Add64(z[5], 9694500593442880912, c)
		z[6], c = bits.Add64(z[6], 274362232328168196, c)
		z[7], c = bits.Add64(z[7], 8105254717682411801, c)
		z[8], c = bits.Add64(z[8], 5945444129596489281, c)
		z[9], c = bits.Add64(z[9], 13341377791855249032, c)
		z[10], c = bits.Add64(z[10], 15098257552581525310, c)
		z[11], _ = bits.Add64(z[11], 81882988782276106, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element) SubAssign(x *Element) *Element {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17626244516597989515, 0)
		z[1], c = bits.Add64(z[1], 16614129118623039618, c)
		z[2], c = bits.Add64(z[2], 1588918198704579639, c)
		z[3], c = bits.Add64(z[3], 10998096788944562424, c)
		z[4], c = bits.Add64(z[4], 8204665564953313070, c)
		z[5], c = bits.Add64(z[5], 9694500593442880912, c)
		z[6], c = bits.Add64(z[6], 274362232328168196, c)
		z[7], c = bits.Add64(z[7], 8105254717682411801, c)
		z[8], c = bits.Add64(z[8], 5945444129596489281, c)
		z[9], c = bits.Add64(z[9], 13341377791855249032, c)
		z[10], c = bits.Add64(z[10], 15098257552581525310, c)
		z[11], _ = bits.Add64(z[11], 81882988782276106, c)
	}
	return z
}

//go:noescape
func reduceElement(res *Element)

//go:noescape
func addElement(res, x, y *Element)

//go:noescape
func doubleElement(res, x *Element)

//go:noescape
func _fromMontADXElement(res *Element)

// Add z = x + y mod q
func (z *Element) Add(x, y *Element) *Element {
	addElement(z, x, y)
	return z
}

// AddAssign z = z + x mod q
func (z *Element) AddAssign(x *Element) *Element {
	addElement(z, z, x)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element) Double(x *Element) *Element {
	doubleElement(z, x)
	return z
}
