// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goff (v0.2.2) DO NOT EDIT

// Package bw6_761 contains field arithmetic operations
package bw6_761

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"strconv"
	"sync"
	"unsafe"
)

// Element represents a field element stored on 12 words (uint64)
// Element are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 6891450384315732539396789682275657542479668912536150109513790160209623422243491736087683183289411687640864567753786613451161759120554247759349511699125301598951605099378508850372543631423596795951899700429969112842764913119068299
type Element [12]uint64

// ElementLimbs number of 64 bits words needed to represent Element
const ElementLimbs = 12

// ElementBits number bits needed to represent Element
const ElementBits = 761

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *Element) Bytes() []byte {
	var _z Element
	_z.Set(z).FromMont()
	res := make([]byte, ElementLimbs*8)
	binary.BigEndian.PutUint64(res[(ElementLimbs-1)*8:], _z[0])
	for i := ElementLimbs - 2; i >= 0; i-- {
		binary.BigEndian.PutUint64(res[i*8:(i+1)*8], _z[ElementLimbs-1-i])
	}
	return res
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *Element) SetBytes(e []byte) *Element {
	var tmp big.Int
	tmp.SetBytes(e)
	z.SetBigInt(&tmp)
	return z
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element) SetUint64(v uint64) *Element {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element) Set(x *Element) *Element {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	return z
}

// SetZero z = 0
func (z *Element) SetZero() *Element {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element) SetOne() *Element {
	z[0] = 144959613005956565
	z[1] = 6509995272855063783
	z[2] = 11428286765660613342
	z[3] = 15738672438262922740
	z[4] = 17071399330169272331
	z[5] = 13899911246788437003
	z[6] = 12055474021000362245
	z[7] = 2545351818702954755
	z[8] = 8887388221587179644
	z[9] = 5009280847225881135
	z[10] = 15539704305423854047
	z[11] = 23071597697427581
	return z
}

// Neg z = q - x
func (z *Element) Neg(x *Element) *Element {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(17626244516597989515, x[0], 0)
	z[1], borrow = bits.Sub64(16614129118623039618, x[1], borrow)
	z[2], borrow = bits.Sub64(1588918198704579639, x[2], borrow)
	z[3], borrow = bits.Sub64(10998096788944562424, x[3], borrow)
	z[4], borrow = bits.Sub64(8204665564953313070, x[4], borrow)
	z[5], borrow = bits.Sub64(9694500593442880912, x[5], borrow)
	z[6], borrow = bits.Sub64(274362232328168196, x[6], borrow)
	z[7], borrow = bits.Sub64(8105254717682411801, x[7], borrow)
	z[8], borrow = bits.Sub64(5945444129596489281, x[8], borrow)
	z[9], borrow = bits.Sub64(13341377791855249032, x[9], borrow)
	z[10], borrow = bits.Sub64(15098257552581525310, x[10], borrow)
	z[11], _ = bits.Sub64(81882988782276106, x[11], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element) Div(x, y *Element) *Element {
	var yInv Element
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element) Equal(x *Element) bool {
	return (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element) IsZero() bool {
	return (z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _ElementModulus big.Int
var onceElementModulus sync.Once

func ElementModulus() *big.Int {
	onceElementModulus.Do(func() {
		_ElementModulus.SetString("6891450384315732539396789682275657542479668912536150109513790160209623422243491736087683183289411687640864567753786613451161759120554247759349511699125301598951605099378508850372543631423596795951899700429969112842764913119068299", 10)
	})
	return &_ElementModulus
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element) Inverse(x *Element) *Element {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element{
		17626244516597989515,
		16614129118623039618,
		1588918198704579639,
		10998096788944562424,
		8204665564953313070,
		9694500593442880912,
		274362232328168196,
		8105254717682411801,
		5945444129596489281,
		13341377791855249032,
		15098257552581525310,
		81882988782276106,
	}

	// initialize s = r^2
	var s = Element{
		14305184132582319705,
		8868935336694416555,
		9196887162930508889,
		15486798265448570248,
		5402985275949444416,
		10893197322525159598,
		3204916688966998390,
		12417238192559061753,
		12426306557607898622,
		1305582522441154384,
		10311846026977660324,
		48736111365249031,
	}

	// r = 0
	r := Element{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger, uIsOne, vIsOne bool

	for !uIsOne && !vIsOne {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[11] << 63
			v[11] >>= 1
			t = t2
			t2 = v[10] << 63
			v[10] = (v[10] >> 1) | t
			t = t2
			t2 = v[9] << 63
			v[9] = (v[9] >> 1) | t
			t = t2
			t2 = v[8] << 63
			v[8] = (v[8] >> 1) | t
			t = t2
			t2 = v[7] << 63
			v[7] = (v[7] >> 1) | t
			t = t2
			t2 = v[6] << 63
			v[6] = (v[6] >> 1) | t
			t = t2
			t2 = v[5] << 63
			v[5] = (v[5] >> 1) | t
			t = t2
			t2 = v[4] << 63
			v[4] = (v[4] >> 1) | t
			t = t2
			t2 = v[3] << 63
			v[3] = (v[3] >> 1) | t
			t = t2
			t2 = v[2] << 63
			v[2] = (v[2] >> 1) | t
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 17626244516597989515, 0)
				s[1], carry = bits.Add64(s[1], 16614129118623039618, carry)
				s[2], carry = bits.Add64(s[2], 1588918198704579639, carry)
				s[3], carry = bits.Add64(s[3], 10998096788944562424, carry)
				s[4], carry = bits.Add64(s[4], 8204665564953313070, carry)
				s[5], carry = bits.Add64(s[5], 9694500593442880912, carry)
				s[6], carry = bits.Add64(s[6], 274362232328168196, carry)
				s[7], carry = bits.Add64(s[7], 8105254717682411801, carry)
				s[8], carry = bits.Add64(s[8], 5945444129596489281, carry)
				s[9], carry = bits.Add64(s[9], 13341377791855249032, carry)
				s[10], carry = bits.Add64(s[10], 15098257552581525310, carry)
				s[11], _ = bits.Add64(s[11], 81882988782276106, carry)

			}

			// s = s >> 1
			t2 = s[11] << 63
			s[11] >>= 1
			t = t2
			t2 = s[10] << 63
			s[10] = (s[10] >> 1) | t
			t = t2
			t2 = s[9] << 63
			s[9] = (s[9] >> 1) | t
			t = t2
			t2 = s[8] << 63
			s[8] = (s[8] >> 1) | t
			t = t2
			t2 = s[7] << 63
			s[7] = (s[7] >> 1) | t
			t = t2
			t2 = s[6] << 63
			s[6] = (s[6] >> 1) | t
			t = t2
			t2 = s[5] << 63
			s[5] = (s[5] >> 1) | t
			t = t2
			t2 = s[4] << 63
			s[4] = (s[4] >> 1) | t
			t = t2
			t2 = s[3] << 63
			s[3] = (s[3] >> 1) | t
			t = t2
			t2 = s[2] << 63
			s[2] = (s[2] >> 1) | t
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[11] << 63
			u[11] >>= 1
			t = t2
			t2 = u[10] << 63
			u[10] = (u[10] >> 1) | t
			t = t2
			t2 = u[9] << 63
			u[9] = (u[9] >> 1) | t
			t = t2
			t2 = u[8] << 63
			u[8] = (u[8] >> 1) | t
			t = t2
			t2 = u[7] << 63
			u[7] = (u[7] >> 1) | t
			t = t2
			t2 = u[6] << 63
			u[6] = (u[6] >> 1) | t
			t = t2
			t2 = u[5] << 63
			u[5] = (u[5] >> 1) | t
			t = t2
			t2 = u[4] << 63
			u[4] = (u[4] >> 1) | t
			t = t2
			t2 = u[3] << 63
			u[3] = (u[3] >> 1) | t
			t = t2
			t2 = u[2] << 63
			u[2] = (u[2] >> 1) | t
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 17626244516597989515, 0)
				r[1], carry = bits.Add64(r[1], 16614129118623039618, carry)
				r[2], carry = bits.Add64(r[2], 1588918198704579639, carry)
				r[3], carry = bits.Add64(r[3], 10998096788944562424, carry)
				r[4], carry = bits.Add64(r[4], 8204665564953313070, carry)
				r[5], carry = bits.Add64(r[5], 9694500593442880912, carry)
				r[6], carry = bits.Add64(r[6], 274362232328168196, carry)
				r[7], carry = bits.Add64(r[7], 8105254717682411801, carry)
				r[8], carry = bits.Add64(r[8], 5945444129596489281, carry)
				r[9], carry = bits.Add64(r[9], 13341377791855249032, carry)
				r[10], carry = bits.Add64(r[10], 15098257552581525310, carry)
				r[11], _ = bits.Add64(r[11], 81882988782276106, carry)

			}

			// r = r >> 1
			t2 = r[11] << 63
			r[11] >>= 1
			t = t2
			t2 = r[10] << 63
			r[10] = (r[10] >> 1) | t
			t = t2
			t2 = r[9] << 63
			r[9] = (r[9] >> 1) | t
			t = t2
			t2 = r[8] << 63
			r[8] = (r[8] >> 1) | t
			t = t2
			t2 = r[7] << 63
			r[7] = (r[7] >> 1) | t
			t = t2
			t2 = r[6] << 63
			r[6] = (r[6] >> 1) | t
			t = t2
			t2 = r[5] << 63
			r[5] = (r[5] >> 1) | t
			t = t2
			t2 = r[4] << 63
			r[4] = (r[4] >> 1) | t
			t = t2
			t2 = r[3] << 63
			r[3] = (r[3] >> 1) | t
			t = t2
			t2 = r[2] << 63
			r[2] = (r[2] >> 1) | t
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[11] < u[11] || (v[11] == u[11] && (v[10] < u[10] || (v[10] == u[10] && (v[9] < u[9] || (v[9] == u[9] && (v[8] < u[8] || (v[8] == u[8] && (v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], borrow = bits.Sub64(v[7], u[7], borrow)
			v[8], borrow = bits.Sub64(v[8], u[8], borrow)
			v[9], borrow = bits.Sub64(v[9], u[9], borrow)
			v[10], borrow = bits.Sub64(v[10], u[10], borrow)
			v[11], _ = bits.Sub64(v[11], u[11], borrow)

			// r >= s
			bigger = !(r[11] < s[11] || (r[11] == s[11] && (r[10] < s[10] || (r[10] == s[10] && (r[9] < s[9] || (r[9] == s[9] && (r[8] < s[8] || (r[8] == s[8] && (r[7] < s[7] || (r[7] == s[7] && (r[6] < s[6] || (r[6] == s[6] && (r[5] < s[5] || (r[5] == s[5] && (r[4] < s[4] || (r[4] == s[4] && (r[3] < s[3] || (r[3] == s[3] && (r[2] < s[2] || (r[2] == s[2] && (r[1] < s[1] || (r[1] == s[1] && (r[0] < s[0])))))))))))))))))))))))

			if bigger {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 17626244516597989515, 0)
				s[1], carry = bits.Add64(s[1], 16614129118623039618, carry)
				s[2], carry = bits.Add64(s[2], 1588918198704579639, carry)
				s[3], carry = bits.Add64(s[3], 10998096788944562424, carry)
				s[4], carry = bits.Add64(s[4], 8204665564953313070, carry)
				s[5], carry = bits.Add64(s[5], 9694500593442880912, carry)
				s[6], carry = bits.Add64(s[6], 274362232328168196, carry)
				s[7], carry = bits.Add64(s[7], 8105254717682411801, carry)
				s[8], carry = bits.Add64(s[8], 5945444129596489281, carry)
				s[9], carry = bits.Add64(s[9], 13341377791855249032, carry)
				s[10], carry = bits.Add64(s[10], 15098257552581525310, carry)
				s[11], _ = bits.Add64(s[11], 81882988782276106, carry)

			}

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], borrow = bits.Sub64(s[7], r[7], borrow)
			s[8], borrow = bits.Sub64(s[8], r[8], borrow)
			s[9], borrow = bits.Sub64(s[9], r[9], borrow)
			s[10], borrow = bits.Sub64(s[10], r[10], borrow)
			s[11], _ = bits.Sub64(s[11], r[11], borrow)

		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], borrow = bits.Sub64(u[7], v[7], borrow)
			u[8], borrow = bits.Sub64(u[8], v[8], borrow)
			u[9], borrow = bits.Sub64(u[9], v[9], borrow)
			u[10], borrow = bits.Sub64(u[10], v[10], borrow)
			u[11], _ = bits.Sub64(u[11], v[11], borrow)

			// s >= r
			bigger = !(s[11] < r[11] || (s[11] == r[11] && (s[10] < r[10] || (s[10] == r[10] && (s[9] < r[9] || (s[9] == r[9] && (s[8] < r[8] || (s[8] == r[8] && (s[7] < r[7] || (s[7] == r[7] && (s[6] < r[6] || (s[6] == r[6] && (s[5] < r[5] || (s[5] == r[5] && (s[4] < r[4] || (s[4] == r[4] && (s[3] < r[3] || (s[3] == r[3] && (s[2] < r[2] || (s[2] == r[2] && (s[1] < r[1] || (s[1] == r[1] && (s[0] < r[0])))))))))))))))))))))))

			if bigger {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 17626244516597989515, 0)
				r[1], carry = bits.Add64(r[1], 16614129118623039618, carry)
				r[2], carry = bits.Add64(r[2], 1588918198704579639, carry)
				r[3], carry = bits.Add64(r[3], 10998096788944562424, carry)
				r[4], carry = bits.Add64(r[4], 8204665564953313070, carry)
				r[5], carry = bits.Add64(r[5], 9694500593442880912, carry)
				r[6], carry = bits.Add64(r[6], 274362232328168196, carry)
				r[7], carry = bits.Add64(r[7], 8105254717682411801, carry)
				r[8], carry = bits.Add64(r[8], 5945444129596489281, carry)
				r[9], carry = bits.Add64(r[9], 13341377791855249032, carry)
				r[10], carry = bits.Add64(r[10], 15098257552581525310, carry)
				r[11], _ = bits.Add64(r[11], 81882988782276106, carry)

			}

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], borrow = bits.Sub64(r[7], s[7], borrow)
			r[8], borrow = bits.Sub64(r[8], s[8], borrow)
			r[9], borrow = bits.Sub64(r[9], s[9], borrow)
			r[10], borrow = bits.Sub64(r[10], s[10], borrow)
			r[11], _ = bits.Sub64(r[11], s[11], borrow)

		}
		uIsOne = (u[0] == 1) && (u[11]|u[10]|u[9]|u[8]|u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0
		vIsOne = (v[0] == 1) && (v[11]|v[10]|v[9]|v[8]|v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0
	}

	if uIsOne {
		z.Set(&r)
	} else {
		z.Set(&s)
	}

	return z
}

// SetRandom sets z to a random element < q
func (z *Element) SetRandom() *Element {
	bytes := make([]byte, 96)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[11] %= 81882988782276106

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}

	return z
}

// One returns 1 (in montgommery form)
func One() Element {
	var one Element
	one.SetOne()
	return one
}

// FromInterface converts i1 from uint64, int, string, or Element, big.Int into Element
// panic if provided type is not supported
func FromInterface(i1 interface{}) Element {
	var val Element

	switch c1 := i1.(type) {
	case uint64:
		val.SetUint64(c1)
	case int:
		val.SetString(strconv.Itoa(c1))
	case string:
		val.SetString(c1)
	case big.Int:
		val.SetBigInt(&c1)
	case Element:
		val = c1
	case *Element:
		val.Set(c1)
	case []byte:
		val.SetBytes(c1)
	default:
		panic("invalid type")
	}

	return val
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element) Exp(x Element, exponent ...uint64) *Element {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element) ToRegular() Element {
	return *z.FromMont()
}

// String returns the string form of an Element in Montgomery form
func (z *Element) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element) ToBigInt(res *big.Int) *big.Int {
	bits := (*[12]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[12]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element) SetBigInt(v *big.Int) *Element {
	z.SetZero()

	zero := big.NewInt(0)
	q := ElementModulus()

	// fast path
	c := v.Cmp(q)
	if c == 0 {
		return z
	} else if c != 1 && v.Cmp(zero) != -1 {
		// v should
		vBits := v.Bits()
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
		return z.ToMont()
	}

	// copy input
	vv := new(big.Int).Set(v)
	vv.Mod(v, q)

	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element) SetString(s string) *Element {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element) Legendre() int {
	var l Element
	// z^((q-1)/2)
	l.Exp(*z,
		8813122258298994757,
		17530436596166295617,
		794459099352289819,
		5499048394472281212,
		4102332782476656535,
		4847250296721440456,
		9360553153018859906,
		13275999395695981708,
		2972722064798244640,
		6670688895927624516,
		7549128776290762655,
		40941494391138053,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[11] == 23071597697427581) && (l[10] == 15539704305423854047) && (l[9] == 5009280847225881135) && (l[8] == 8887388221587179644) && (l[7] == 2545351818702954755) && (l[6] == 12055474021000362245) && (l[5] == 13899911246788437003) && (l[4] == 17071399330169272331) && (l[3] == 15738672438262922740) && (l[2] == 11428286765660613342) && (l[1] == 6509995272855063783) && (l[0] == 144959613005956565) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element) Sqrt(x *Element) *Element {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element
	y.Exp(*x,
		13629933166004273187,
		17988590334937923616,
		397229549676144909,
		11972896234090916414,
		2051166391238328267,
		2423625148360720228,
		4680276576509429953,
		6637999697847990854,
		1486361032399122320,
		12558716484818588066,
		12997936425000157135,
		20470747195569026,
	)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// -------------------------------------------------------------------------------------------------
// Constants

// q (modulus)
var qElement = Element{
	17626244516597989515,
	16614129118623039618,
	1588918198704579639,
	10998096788944562424,
	8204665564953313070,
	9694500593442880912,
	274362232328168196,
	8105254717682411801,
	5945444129596489281,
	13341377791855249032,
	15098257552581525310,
	81882988782276106,
}

// q'[0], see montgommery multiplication algorithm
var qElementInv0 uint64 = 744663313386281181

// rSquare
var rSquareElement = Element{
	14305184132582319705,
	8868935336694416555,
	9196887162930508889,
	15486798265448570248,
	5402985275949444416,
	10893197322525159598,
	3204916688966998390,
	12417238192559061753,
	12426306557607898622,
	1305582522441154384,
	10311846026977660324,
	48736111365249031,
}

// -------------------------------------------------------------------------------------------------
// declarations
// do modify tests.go with new declarations to ensure both path (ADX and generic) are tested
var mulElement func(res, x, y *Element) = _mulGenericElement
var squareElement func(res, x *Element) = _squareGenericElement
var fromMontElement func(res *Element) = _fromMontGenericElement

// -------------------------------------------------------------------------------------------------
// APIs

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element) ToMont() *Element {
	mulElement(z, z, &rSquareElement)
	return z
}

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Mul(x, y *Element) *Element {
	mulElement(z, x, y)
	return z
}

// MulAssign z = z * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) MulAssign(x *Element) *Element {
	mulElement(z, z, x)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Square(x *Element) *Element {
	squareElement(z, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element) FromMont() *Element {
	fromMontElement(z)
	return z
}

// Generic (no ADX instructions, no AMD64) versions

func _mulGenericElement(z, x, y *Element) {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd1(v, y[10], c[1])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd1(v, y[11], c[1])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 11
		v := x[11]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], z[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], z[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		z[11], z[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

func _squareGenericElement(z, x *Element) {

	var p [12]uint64

	var u, v uint64
	{
		// round 0
		u, p[0] = bits.Mul64(x[0], x[0])
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		var t uint64
		t, u, v = madd1sb(x[0], x[1], u)
		C, p[0] = madd2(m, 16614129118623039618, v, C)
		t, u, v = madd1s(x[0], x[2], t, u)
		C, p[1] = madd2(m, 1588918198704579639, v, C)
		t, u, v = madd1s(x[0], x[3], t, u)
		C, p[2] = madd2(m, 10998096788944562424, v, C)
		t, u, v = madd1s(x[0], x[4], t, u)
		C, p[3] = madd2(m, 8204665564953313070, v, C)
		t, u, v = madd1s(x[0], x[5], t, u)
		C, p[4] = madd2(m, 9694500593442880912, v, C)
		t, u, v = madd1s(x[0], x[6], t, u)
		C, p[5] = madd2(m, 274362232328168196, v, C)
		t, u, v = madd1s(x[0], x[7], t, u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd1s(x[0], x[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd1s(x[0], x[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd1s(x[0], x[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd1s(x[0], x[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 1
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		u, v = madd1(x[1], x[1], p[1])
		C, p[0] = madd2(m, 16614129118623039618, v, C)
		var t uint64
		t, u, v = madd2sb(x[1], x[2], p[2], u)
		C, p[1] = madd2(m, 1588918198704579639, v, C)
		t, u, v = madd2s(x[1], x[3], p[3], t, u)
		C, p[2] = madd2(m, 10998096788944562424, v, C)
		t, u, v = madd2s(x[1], x[4], p[4], t, u)
		C, p[3] = madd2(m, 8204665564953313070, v, C)
		t, u, v = madd2s(x[1], x[5], p[5], t, u)
		C, p[4] = madd2(m, 9694500593442880912, v, C)
		t, u, v = madd2s(x[1], x[6], p[6], t, u)
		C, p[5] = madd2(m, 274362232328168196, v, C)
		t, u, v = madd2s(x[1], x[7], p[7], t, u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd2s(x[1], x[8], p[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[1], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[1], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[1], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 2
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		u, v = madd1(x[2], x[2], p[2])
		C, p[1] = madd2(m, 1588918198704579639, v, C)
		var t uint64
		t, u, v = madd2sb(x[2], x[3], p[3], u)
		C, p[2] = madd2(m, 10998096788944562424, v, C)
		t, u, v = madd2s(x[2], x[4], p[4], t, u)
		C, p[3] = madd2(m, 8204665564953313070, v, C)
		t, u, v = madd2s(x[2], x[5], p[5], t, u)
		C, p[4] = madd2(m, 9694500593442880912, v, C)
		t, u, v = madd2s(x[2], x[6], p[6], t, u)
		C, p[5] = madd2(m, 274362232328168196, v, C)
		t, u, v = madd2s(x[2], x[7], p[7], t, u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd2s(x[2], x[8], p[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[2], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[2], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[2], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 3
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		u, v = madd1(x[3], x[3], p[3])
		C, p[2] = madd2(m, 10998096788944562424, v, C)
		var t uint64
		t, u, v = madd2sb(x[3], x[4], p[4], u)
		C, p[3] = madd2(m, 8204665564953313070, v, C)
		t, u, v = madd2s(x[3], x[5], p[5], t, u)
		C, p[4] = madd2(m, 9694500593442880912, v, C)
		t, u, v = madd2s(x[3], x[6], p[6], t, u)
		C, p[5] = madd2(m, 274362232328168196, v, C)
		t, u, v = madd2s(x[3], x[7], p[7], t, u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd2s(x[3], x[8], p[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[3], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[3], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[3], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 4
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		u, v = madd1(x[4], x[4], p[4])
		C, p[3] = madd2(m, 8204665564953313070, v, C)
		var t uint64
		t, u, v = madd2sb(x[4], x[5], p[5], u)
		C, p[4] = madd2(m, 9694500593442880912, v, C)
		t, u, v = madd2s(x[4], x[6], p[6], t, u)
		C, p[5] = madd2(m, 274362232328168196, v, C)
		t, u, v = madd2s(x[4], x[7], p[7], t, u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd2s(x[4], x[8], p[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[4], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[4], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[4], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 5
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		C, p[3] = madd2(m, 8204665564953313070, p[4], C)
		u, v = madd1(x[5], x[5], p[5])
		C, p[4] = madd2(m, 9694500593442880912, v, C)
		var t uint64
		t, u, v = madd2sb(x[5], x[6], p[6], u)
		C, p[5] = madd2(m, 274362232328168196, v, C)
		t, u, v = madd2s(x[5], x[7], p[7], t, u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd2s(x[5], x[8], p[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[5], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[5], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[5], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 6
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		C, p[3] = madd2(m, 8204665564953313070, p[4], C)
		C, p[4] = madd2(m, 9694500593442880912, p[5], C)
		u, v = madd1(x[6], x[6], p[6])
		C, p[5] = madd2(m, 274362232328168196, v, C)
		var t uint64
		t, u, v = madd2sb(x[6], x[7], p[7], u)
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		t, u, v = madd2s(x[6], x[8], p[8], t, u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[6], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[6], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[6], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 7
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		C, p[3] = madd2(m, 8204665564953313070, p[4], C)
		C, p[4] = madd2(m, 9694500593442880912, p[5], C)
		C, p[5] = madd2(m, 274362232328168196, p[6], C)
		u, v = madd1(x[7], x[7], p[7])
		C, p[6] = madd2(m, 8105254717682411801, v, C)
		var t uint64
		t, u, v = madd2sb(x[7], x[8], p[8], u)
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		t, u, v = madd2s(x[7], x[9], p[9], t, u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[7], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[7], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 8
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		C, p[3] = madd2(m, 8204665564953313070, p[4], C)
		C, p[4] = madd2(m, 9694500593442880912, p[5], C)
		C, p[5] = madd2(m, 274362232328168196, p[6], C)
		C, p[6] = madd2(m, 8105254717682411801, p[7], C)
		u, v = madd1(x[8], x[8], p[8])
		C, p[7] = madd2(m, 5945444129596489281, v, C)
		var t uint64
		t, u, v = madd2sb(x[8], x[9], p[9], u)
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		t, u, v = madd2s(x[8], x[10], p[10], t, u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[8], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 9
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		C, p[3] = madd2(m, 8204665564953313070, p[4], C)
		C, p[4] = madd2(m, 9694500593442880912, p[5], C)
		C, p[5] = madd2(m, 274362232328168196, p[6], C)
		C, p[6] = madd2(m, 8105254717682411801, p[7], C)
		C, p[7] = madd2(m, 5945444129596489281, p[8], C)
		u, v = madd1(x[9], x[9], p[9])
		C, p[8] = madd2(m, 13341377791855249032, v, C)
		var t uint64
		t, u, v = madd2sb(x[9], x[10], p[10], u)
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2s(x[9], x[11], p[11], t, u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 10
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, p[0] = madd2(m, 16614129118623039618, p[1], C)
		C, p[1] = madd2(m, 1588918198704579639, p[2], C)
		C, p[2] = madd2(m, 10998096788944562424, p[3], C)
		C, p[3] = madd2(m, 8204665564953313070, p[4], C)
		C, p[4] = madd2(m, 9694500593442880912, p[5], C)
		C, p[5] = madd2(m, 274362232328168196, p[6], C)
		C, p[6] = madd2(m, 8105254717682411801, p[7], C)
		C, p[7] = madd2(m, 5945444129596489281, p[8], C)
		C, p[8] = madd2(m, 13341377791855249032, p[9], C)
		u, v = madd1(x[10], x[10], p[10])
		C, p[9] = madd2(m, 15098257552581525310, v, C)
		_, u, v = madd2sb(x[10], x[11], p[11], u)
		p[11], p[10] = madd3(m, 81882988782276106, v, C, u)
	}
	{
		// round 11
		m := p[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, p[0])
		C, z[0] = madd2(m, 16614129118623039618, p[1], C)
		C, z[1] = madd2(m, 1588918198704579639, p[2], C)
		C, z[2] = madd2(m, 10998096788944562424, p[3], C)
		C, z[3] = madd2(m, 8204665564953313070, p[4], C)
		C, z[4] = madd2(m, 9694500593442880912, p[5], C)
		C, z[5] = madd2(m, 274362232328168196, p[6], C)
		C, z[6] = madd2(m, 8105254717682411801, p[7], C)
		C, z[7] = madd2(m, 5945444129596489281, p[8], C)
		C, z[8] = madd2(m, 13341377791855249032, p[9], C)
		C, z[9] = madd2(m, 15098257552581525310, p[10], C)
		u, v = madd1(x[11], x[11], p[11])
		z[11], z[10] = madd3(m, 81882988782276106, v, C, u)
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}

}

func _fromMontGenericElement(z *Element) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 744663313386281181
		C := madd0(m, 17626244516597989515, z[0])
		C, z[0] = madd2(m, 16614129118623039618, z[1], C)
		C, z[1] = madd2(m, 1588918198704579639, z[2], C)
		C, z[2] = madd2(m, 10998096788944562424, z[3], C)
		C, z[3] = madd2(m, 8204665564953313070, z[4], C)
		C, z[4] = madd2(m, 9694500593442880912, z[5], C)
		C, z[5] = madd2(m, 274362232328168196, z[6], C)
		C, z[6] = madd2(m, 8105254717682411801, z[7], C)
		C, z[7] = madd2(m, 5945444129596489281, z[8], C)
		C, z[8] = madd2(m, 13341377791855249032, z[9], C)
		C, z[9] = madd2(m, 15098257552581525310, z[10], C)
		C, z[10] = madd2(m, 81882988782276106, z[11], C)
		z[11] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}
