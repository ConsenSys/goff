#include "textflag.h"

// func mulAssignElement(res,y *Element)
// montgomery multiplication of res by y 
// stores the result in res
TEXT ·mulAssignElement(SB), NOSPLIT, $0-16
	// the algorithm is described here
	// https://hackmd.io/@zkteam/modular_multiplication
	// however, to benefit from the ADCX and ADOX carry chains
	// we split the inner loops in 2:
	// for i=0 to N-1
	// 		for j=0 to N-1
	// 		    (A,t[j])  := t[j] + x[j]*y[i] + A
	// 		m := t[0]*q'[0] mod W
	// 		C,_ := t[0] + m*q[0]
	// 		for j=1 to N-1
	// 		    (C,t[j-1]) := t[j] + m*q[j] + C
	// 		t[N-1] = C + A

    // dereference x
    MOVQ res+0(FP), DI
    // check if we support adx and mulx
    CMPB ·supportAdx(SB), $0x0000000000000001
    JNE no_adx
    // dereference y
    MOVQ y+8(FP), R10
    // outter loop 0
    // clear up flags
    XORQ DX, DX
    // DX = y[0]
    MOVQ 0(R10), DX
    MULXQ 0(DI), CX, BX
    MULXQ 8(DI), AX, BP
    ADOXQ AX, BX
    MULXQ 16(DI), AX, SI
    ADOXQ AX, BP
    MULXQ 24(DI), AX, R9
    ADOXQ AX, SI
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R9
    ADOXQ DX, R9
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ R9, SI
    // outter loop 1
    // clear up flags
    XORQ DX, DX
    // DX = y[1]
    MOVQ 8(R10), DX
    MULXQ 0(DI), AX, R9
    ADOXQ AX, CX
    ADCXQ R9, BX
    MULXQ 8(DI), AX, R9
    ADOXQ AX, BX
    ADCXQ R9, BP
    MULXQ 16(DI), AX, R9
    ADOXQ AX, BP
    ADCXQ R9, SI
    MULXQ 24(DI), AX, R9
    ADOXQ AX, SI
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R9
    ADOXQ DX, R9
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ R9, SI
    // outter loop 2
    // clear up flags
    XORQ DX, DX
    // DX = y[2]
    MOVQ 16(R10), DX
    MULXQ 0(DI), AX, R9
    ADOXQ AX, CX
    ADCXQ R9, BX
    MULXQ 8(DI), AX, R9
    ADOXQ AX, BX
    ADCXQ R9, BP
    MULXQ 16(DI), AX, R9
    ADOXQ AX, BP
    ADCXQ R9, SI
    MULXQ 24(DI), AX, R9
    ADOXQ AX, SI
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R9
    ADOXQ DX, R9
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ R9, SI
    // outter loop 3
    // clear up flags
    XORQ DX, DX
    // DX = y[3]
    MOVQ 24(R10), DX
    MULXQ 0(DI), AX, R9
    ADOXQ AX, CX
    ADCXQ R9, BX
    MULXQ 8(DI), AX, R9
    ADOXQ AX, BX
    ADCXQ R9, BP
    MULXQ 16(DI), AX, R9
    ADOXQ AX, BP
    ADCXQ R9, SI
    MULXQ 24(DI), AX, R9
    ADOXQ AX, SI
    MOVQ $0x0000000000000000, DX
    ADCXQ DX, R9
    ADOXQ DX, R9
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ R9, SI
reduce:
    MOVQ CX, R11
    MOVQ $0x3c208c16d87cfd47, DX
    SUBQ DX, R11
    MOVQ BX, R12
    MOVQ $0x97816a916871ca8d, DX
    SBBQ DX, R12
    MOVQ BP, R13
    MOVQ $0xb85045b68181585d, DX
    SBBQ DX, R13
    MOVQ SI, R14
    MOVQ $0x30644e72e131a029, DX
    SBBQ DX, R14
    JCS t_is_smaller
    MOVQ R11, 0(DI)
    MOVQ R12, 8(DI)
    MOVQ R13, 16(DI)
    MOVQ R14, 24(DI)
    RET
t_is_smaller:
    MOVQ CX, 0(DI)
    MOVQ BX, 8(DI)
    MOVQ BP, 16(DI)
    MOVQ SI, 24(DI)
    RET
no_adx:
    // dereference y
    MOVQ y+8(FP), R11
    MOVQ 0(DI), AX
    MOVQ 0(R11), R8
    MULQ R8
    MOVQ AX, CX
    MOVQ DX, R10
    MOVQ $0x87d20782e4866389, R9
    IMULQ CX, R9
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R9
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ 8(DI), AX
    MULQ R8
    MOVQ R10, BX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x97816a916871ca8d, AX
    MULQ R9
    ADDQ BX, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, CX
    MOVQ DX, R15
    MOVQ 16(DI), AX
    MULQ R8
    MOVQ R10, BP
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0xb85045b68181585d, AX
    MULQ R9
    ADDQ BP, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BX
    MOVQ DX, R15
    MOVQ 24(DI), AX
    MULQ R8
    MOVQ R10, SI
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x30644e72e131a029, AX
    MULQ R9
    ADDQ SI, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BP
    MOVQ DX, R15
    ADDQ R15, R10
    MOVQ R10, SI
    MOVQ 0(DI), AX
    MOVQ 8(R11), R8
    MULQ R8
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x87d20782e4866389, R9
    IMULQ CX, R9
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R9
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ 8(DI), AX
    MULQ R8
    ADDQ R10, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x97816a916871ca8d, AX
    MULQ R9
    ADDQ BX, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, CX
    MOVQ DX, R15
    MOVQ 16(DI), AX
    MULQ R8
    ADDQ R10, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0xb85045b68181585d, AX
    MULQ R9
    ADDQ BP, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BX
    MOVQ DX, R15
    MOVQ 24(DI), AX
    MULQ R8
    ADDQ R10, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x30644e72e131a029, AX
    MULQ R9
    ADDQ SI, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BP
    MOVQ DX, R15
    ADDQ R15, R10
    MOVQ R10, SI
    MOVQ 0(DI), AX
    MOVQ 16(R11), R8
    MULQ R8
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x87d20782e4866389, R9
    IMULQ CX, R9
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R9
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ 8(DI), AX
    MULQ R8
    ADDQ R10, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x97816a916871ca8d, AX
    MULQ R9
    ADDQ BX, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, CX
    MOVQ DX, R15
    MOVQ 16(DI), AX
    MULQ R8
    ADDQ R10, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0xb85045b68181585d, AX
    MULQ R9
    ADDQ BP, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BX
    MOVQ DX, R15
    MOVQ 24(DI), AX
    MULQ R8
    ADDQ R10, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x30644e72e131a029, AX
    MULQ R9
    ADDQ SI, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BP
    MOVQ DX, R15
    ADDQ R15, R10
    MOVQ R10, SI
    MOVQ 0(DI), AX
    MOVQ 24(R11), R8
    MULQ R8
    ADDQ AX, CX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x87d20782e4866389, R9
    IMULQ CX, R9
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R9
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R15
    MOVQ 8(DI), AX
    MULQ R8
    ADDQ R10, BX
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x97816a916871ca8d, AX
    MULQ R9
    ADDQ BX, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, CX
    MOVQ DX, R15
    MOVQ 16(DI), AX
    MULQ R8
    ADDQ R10, BP
    ADCQ $0x0000000000000000, DX
    ADDQ AX, BP
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0xb85045b68181585d, AX
    MULQ R9
    ADDQ BP, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BX
    MOVQ DX, R15
    MOVQ 24(DI), AX
    MULQ R8
    ADDQ R10, SI
    ADCQ $0x0000000000000000, DX
    ADDQ AX, SI
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R10
    MOVQ $0x30644e72e131a029, AX
    MULQ R9
    ADDQ SI, R15
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R15
    ADCQ $0x0000000000000000, DX
    MOVQ R15, BP
    MOVQ DX, R15
    ADDQ R15, R10
    MOVQ R10, SI
    JMP reduce


// func fromMontElement(res *Element)
// montgomery multiplication of res by 1 
// stores the result in res
TEXT ·fromMontElement(SB), NOSPLIT, $0-8
	// the algorithm is described here
	// https://hackmd.io/@zkteam/modular_multiplication
	// when y = 1 we have: 
	// for i=0 to N-1
	// 		t[i] = x[i]
	// for i=0 to N-1
	// 		m := t[0]*q'[0] mod W
	// 		C,_ := t[0] + m*q[0]
	// 		for j=1 to N-1
	// 		    (C,t[j-1]) := t[j] + m*q[j] + C
	// 		t[N-1] = C


    // dereference x
    MOVQ res+0(FP), DI
    MOVQ 0(DI), CX
    MOVQ 8(DI), BX
    MOVQ 16(DI), BP
    MOVQ 24(DI), SI
    // check if we support adx and mulx
    CMPB ·supportAdx(SB), $0x0000000000000001
    JNE no_adx
    // outter loop 0
    // clear up flags
    XORQ DX, DX
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ AX, SI
    // outter loop 1
    // clear up flags
    XORQ DX, DX
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ AX, SI
    // outter loop 2
    // clear up flags
    XORQ DX, DX
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ AX, SI
    // outter loop 3
    // clear up flags
    XORQ DX, DX
    MOVQ $0x87d20782e4866389, DX
    MULXQ CX, R8, DX
    XORQ DX, DX
    MOVQ $0x3c208c16d87cfd47, DX
    MULXQ R8, AX, DX
    ADCXQ CX, AX
    MOVQ DX, CX
    MOVQ $0x97816a916871ca8d, DX
    ADCXQ BX, CX
    MULXQ R8, AX, BX
    ADOXQ AX, CX
    MOVQ $0xb85045b68181585d, DX
    ADCXQ BP, BX
    MULXQ R8, AX, BP
    ADOXQ AX, BX
    MOVQ $0x30644e72e131a029, DX
    ADCXQ SI, BP
    MULXQ R8, AX, SI
    ADOXQ AX, BP
    MOVQ $0x0000000000000000, AX
    ADCXQ AX, SI
    ADOXQ AX, SI
reduce:
    MOVQ CX, R9
    MOVQ $0x3c208c16d87cfd47, DX
    SUBQ DX, R9
    MOVQ BX, R10
    MOVQ $0x97816a916871ca8d, DX
    SBBQ DX, R10
    MOVQ BP, R11
    MOVQ $0xb85045b68181585d, DX
    SBBQ DX, R11
    MOVQ SI, R12
    MOVQ $0x30644e72e131a029, DX
    SBBQ DX, R12
    JCS t_is_smaller
    MOVQ R9, 0(DI)
    MOVQ R10, 8(DI)
    MOVQ R11, 16(DI)
    MOVQ R12, 24(DI)
    RET
t_is_smaller:
    MOVQ CX, 0(DI)
    MOVQ BX, 8(DI)
    MOVQ BP, 16(DI)
    MOVQ SI, 24(DI)
    RET
no_adx:
    MOVQ $0x87d20782e4866389, R8
    IMULQ CX, R8
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R8
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ $0x97816a916871ca8d, AX
    MULQ R8
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ $0xb85045b68181585d, AX
    MULQ R8
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ $0x30644e72e131a029, AX
    MULQ R8
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ R13, SI
    MOVQ $0x87d20782e4866389, R8
    IMULQ CX, R8
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R8
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ $0x97816a916871ca8d, AX
    MULQ R8
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ $0xb85045b68181585d, AX
    MULQ R8
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ $0x30644e72e131a029, AX
    MULQ R8
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ R13, SI
    MOVQ $0x87d20782e4866389, R8
    IMULQ CX, R8
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R8
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ $0x97816a916871ca8d, AX
    MULQ R8
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ $0xb85045b68181585d, AX
    MULQ R8
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ $0x30644e72e131a029, AX
    MULQ R8
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ R13, SI
    MOVQ $0x87d20782e4866389, R8
    IMULQ CX, R8
    MOVQ $0x3c208c16d87cfd47, AX
    MULQ R8
    ADDQ CX, AX
    ADCQ $0x0000000000000000, DX
    MOVQ DX, R13
    MOVQ $0x97816a916871ca8d, AX
    MULQ R8
    ADDQ BX, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, CX
    MOVQ DX, R13
    MOVQ $0xb85045b68181585d, AX
    MULQ R8
    ADDQ BP, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BX
    MOVQ DX, R13
    MOVQ $0x30644e72e131a029, AX
    MULQ R8
    ADDQ SI, R13
    ADCQ $0x0000000000000000, DX
    ADDQ AX, R13
    ADCQ $0x0000000000000000, DX
    MOVQ R13, BP
    MOVQ DX, R13
    MOVQ R13, SI
    JMP reduce
