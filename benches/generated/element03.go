// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 2644556278645378668999525747041241427677128401307806822639
// Code generated by goff DO NOT EDIT
// Element03 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"

	"unsafe"
)

// Element03 represents a field element stored on 3 words (uint64)
// Element03 are assumed to be in Montgomery form in all methods
type Element03 [3]uint64

// Element03Limbs number of 64 bits words needed to represent Element03
const Element03Limbs = 3

// Element03Bits number bits needed to represent Element03
const Element03Bits = 191

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element03) SetUint64(v uint64) *Element03 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element03) Set(x *Element03) *Element03 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	return z
}

// SetZero z = 0
func (z *Element03) SetZero() *Element03 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element03) SetOne() *Element03 {
	z[0] = 17553466986255425058
	z[1] = 12004520956478807625
	z[2] = 2903439243813282260
	return z
}

// Neg z = q - x
func (z *Element03) Neg(x *Element03) *Element03 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(446638543727063279, x[0], 0)
	z[1], borrow = bits.Sub64(12444483595470147803, x[1], borrow)
	z[2], _ = bits.Sub64(7771652414948134677, x[2], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element03) Div(x, y *Element03) *Element03 {
	var yInv Element03
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element03) Equal(x *Element03) bool {
	return (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element03) IsZero() bool {
	return (z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element03ModulusBigInt big.Int
var onceelement03Modulus sync.Once

func element03ModulusBigInt() *big.Int {
	onceelement03Modulus.Do(func() {
		_element03ModulusBigInt.SetString("2644556278645378668999525747041241427677128401307806822639", 10)
	})
	return &_element03ModulusBigInt
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element03) Inverse(x *Element03) *Element03 {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element03{
		446638543727063279,
		12444483595470147803,
		7771652414948134677,
	}

	// initialize s = r^2
	var s = Element03{
		2941430792905201620,
		16030111523311789213,
		5799737111338384675,
	}

	// r = 0
	r := Element03{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger, uIsOne, vIsOne bool

	for !uIsOne && !vIsOne {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[2] << 63
			v[2] >>= 1
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 446638543727063279, 0)
				s[1], carry = bits.Add64(s[1], 12444483595470147803, carry)
				s[2], _ = bits.Add64(s[2], 7771652414948134677, carry)

			}

			// s = s >> 1
			t2 = s[2] << 63
			s[2] >>= 1
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[2] << 63
			u[2] >>= 1
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 446638543727063279, 0)
				r[1], carry = bits.Add64(r[1], 12444483595470147803, carry)
				r[2], _ = bits.Add64(r[2], 7771652414948134677, carry)

			}

			// r = r >> 1
			t2 = r[2] << 63
			r[2] >>= 1
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], _ = bits.Sub64(v[2], u[2], borrow)

			// r >= s
			bigger = !(r[2] < s[2] || (r[2] == s[2] && (r[1] < s[1] || (r[1] == s[1] && (r[0] < s[0])))))

			if bigger {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 446638543727063279, 0)
				s[1], carry = bits.Add64(s[1], 12444483595470147803, carry)
				s[2], _ = bits.Add64(s[2], 7771652414948134677, carry)

			}

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], _ = bits.Sub64(s[2], r[2], borrow)

		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], _ = bits.Sub64(u[2], v[2], borrow)

			// s >= r
			bigger = !(s[2] < r[2] || (s[2] == r[2] && (s[1] < r[1] || (s[1] == r[1] && (s[0] < r[0])))))

			if bigger {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 446638543727063279, 0)
				r[1], carry = bits.Add64(r[1], 12444483595470147803, carry)
				r[2], _ = bits.Add64(r[2], 7771652414948134677, carry)

			}

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], _ = bits.Sub64(r[2], s[2], borrow)

		}
		uIsOne = (u[0] == 1) && (u[2]|u[1]) == 0
		vIsOne = (v[0] == 1) && (v[2]|v[1]) == 0
	}

	if uIsOne {
		z.Set(&r)
	} else {
		z.Set(&s)
	}

	return z
}

// SetRandom sets z to a random element < q
func (z *Element03) SetRandom() *Element03 {
	bytes := make([]byte, 24)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[2] %= 7771652414948134677

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element03) Add(x, y *Element03) *Element03 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], _ = bits.Add64(x[2], y[2], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element03) AddAssign(x *Element03) *Element03 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], _ = bits.Add64(z[2], x[2], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element03) Double(x *Element03) *Element03 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], _ = bits.Add64(x[2], x[2], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element03) Sub(x, y *Element03) *Element03 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 446638543727063279, 0)
		z[1], c = bits.Add64(z[1], 12444483595470147803, c)
		z[2], _ = bits.Add64(z[2], 7771652414948134677, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element03) SubAssign(x *Element03) *Element03 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 446638543727063279, 0)
		z[1], c = bits.Add64(z[1], 12444483595470147803, c)
		z[2], _ = bits.Add64(z[2], 7771652414948134677, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element03) Exp(x Element03, exponent ...uint64) *Element03 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element03) FromMont() *Element03 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15258988927938216433
		C := madd0(m, 446638543727063279, z[0])
		C, z[0] = madd2(m, 12444483595470147803, z[1], C)
		C, z[1] = madd2(m, 7771652414948134677, z[2], C)
		z[2] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15258988927938216433
		C := madd0(m, 446638543727063279, z[0])
		C, z[0] = madd2(m, 12444483595470147803, z[1], C)
		C, z[1] = madd2(m, 7771652414948134677, z[2], C)
		z[2] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15258988927938216433
		C := madd0(m, 446638543727063279, z[0])
		C, z[0] = madd2(m, 12444483595470147803, z[1], C)
		C, z[1] = madd2(m, 7771652414948134677, z[2], C)
		z[2] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element03) ToMont() *Element03 {
	var rSquare = Element03{
		2941430792905201620,
		16030111523311789213,
		5799737111338384675,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element03) ToRegular() Element03 {
	return *z.FromMont()
}

// String returns the string form of an Element03 in Montgomery form
func (z *Element03) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element03) ToBigInt(res *big.Int) *big.Int {
	bits := (*[3]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element03) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[3]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element03) SetBigInt(v *big.Int) *Element03 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element03ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element03) SetString(s string) *Element03 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element03.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element03) Mul(x, y *Element03) *Element03 {

	var t [3]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 15258988927938216433
		c[2] = madd0(m, 446638543727063279, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 12444483595470147803, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		t[2], t[1] = madd3(m, 7771652414948134677, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 15258988927938216433
		c[2] = madd0(m, 446638543727063279, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12444483595470147803, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		t[2], t[1] = madd3(m, 7771652414948134677, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 15258988927938216433
		c[2] = madd0(m, 446638543727063279, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 12444483595470147803, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		z[2], z[1] = madd3(m, 7771652414948134677, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}
	return z
}

// MulAssign z = z * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element03) MulAssign(x *Element03) *Element03 {

	var t [3]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 15258988927938216433
		c[2] = madd0(m, 446638543727063279, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 12444483595470147803, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		t[2], t[1] = madd3(m, 7771652414948134677, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 15258988927938216433
		c[2] = madd0(m, 446638543727063279, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12444483595470147803, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		t[2], t[1] = madd3(m, 7771652414948134677, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 15258988927938216433
		c[2] = madd0(m, 446638543727063279, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 12444483595470147803, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		z[2], z[1] = madd3(m, 7771652414948134677, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[2] < 7771652414948134677 || (z[2] == 7771652414948134677 && (z[1] < 12444483595470147803 || (z[1] == 12444483595470147803 && (z[0] < 446638543727063279))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 446638543727063279, 0)
		z[1], b = bits.Sub64(z[1], 12444483595470147803, b)
		z[2], _ = bits.Sub64(z[2], 7771652414948134677, b)
	}
	return z
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element03) Legendre() int {
	var l Element03
	// z^((q-1)/2)
	l.Exp(*z,
		9446691308718307447,
		15445613834589849709,
		3885826207474067338,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[2] == 2903439243813282260) && (l[1] == 12004520956478807625) && (l[0] == 17553466986255425058) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element03) Sqrt(x *Element03) *Element03 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element03
	y.Exp(*x,
		13946717691213929532,
		7722806917294924854,
		1942913103737033669,
	)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// Square z = x * x mod q
func (z *Element03) Square(x *Element03) *Element03 {
	return z.Mul(x, x)
}
