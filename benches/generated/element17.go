// Copyright 2019 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package generated implements field arithmetics with field modulus q =
//
// 1290160556431806021262646877503082425561748413892452721244561474964541248040918618670723812873002782741235092576037463780033304151200683487588253412881242930222697560256519810832763280596413458408487614355944015104653304069745775655072244839071339096958417467747365526444227524244961298535274100848558873528124796308463035735919
//
// Code generated by goff DO NOT EDIT
// Element17 are assumed to be in Montgomery form in all methods
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element17 represents a field element stored on 17 words (uint64)
// Element17 are assumed to be in Montgomery form in all methods
type Element17 [17]uint64

// Element17Limbs number of 64 bits words needed to represent Element17
const Element17Limbs = 17

// Element17Bits number bits needed to represent Element17
const Element17Bits = 1087

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element17) SetUint64(v uint64) *Element17 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element17) Set(x *Element17) *Element17 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	return z
}

// SetZero z = 0
func (z *Element17) SetZero() *Element17 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element17) SetOne() *Element17 {
	z[0] = 8744853478575980834
	z[1] = 11240548876430537378
	z[2] = 14644615440567654587
	z[3] = 9709447704846721447
	z[4] = 6855908011084712412
	z[5] = 17421075100106204483
	z[6] = 8610612084485988841
	z[7] = 11779969236169318477
	z[8] = 14357036916001791991
	z[9] = 16347159846107505622
	z[10] = 879626842099209179
	z[11] = 11364720806564406905
	z[12] = 7876884878432164516
	z[13] = 12393372527952329829
	z[14] = 14950967826769056989
	z[15] = 12065649039293155179
	z[16] = 4093231436741968834
	return z
}

// Neg z = q - x
func (z *Element17) Neg(x *Element17) *Element17 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(14074317334421561199, x[0], 0)
	z[1], borrow = bits.Sub64(3603097598639507118, x[1], borrow)
	z[2], borrow = bits.Sub64(1901064316570948514, x[2], borrow)
	z[3], borrow = bits.Sub64(13592020221286190892, x[3], borrow)
	z[4], borrow = bits.Sub64(5795418031312419601, x[4], borrow)
	z[5], borrow = bits.Sub64(512834486801673566, x[5], borrow)
	z[6], borrow = bits.Sub64(4918065994611781387, x[6], borrow)
	z[7], borrow = bits.Sub64(3333387418770116569, x[7], borrow)
	z[8], borrow = bits.Sub64(11268225615708655620, x[8], borrow)
	z[9], borrow = bits.Sub64(1049792113801022996, x[9], borrow)
	z[10], borrow = bits.Sub64(8783558615805171218, x[10], borrow)
	z[11], borrow = bits.Sub64(12764383670427348163, x[11], borrow)
	z[12], borrow = bits.Sub64(5284929597638693549, x[12], borrow)
	z[13], borrow = bits.Sub64(3026685772878610893, x[13], borrow)
	z[14], borrow = bits.Sub64(1747888123470247313, x[14], borrow)
	z[15], borrow = bits.Sub64(12413919554062974026, x[15], borrow)
	z[16], _ = bits.Sub64(7176756318483791390, x[16], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element17) Div(x, y *Element17) *Element17 {
	var yInv Element17
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element17) Equal(x *Element17) bool {
	return (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element17) IsZero() bool {
	return (z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element17ModulusBigInt big.Int
var onceelement17Modulus sync.Once

func element17ModulusBigInt() *big.Int {
	onceelement17Modulus.Do(func() {
		_element17ModulusBigInt.SetString("1290160556431806021262646877503082425561748413892452721244561474964541248040918618670723812873002782741235092576037463780033304151200683487588253412881242930222697560256519810832763280596413458408487614355944015104653304069745775655072244839071339096958417467747365526444227524244961298535274100848558873528124796308463035735919", 10)
	})
	return &_element17ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element17) Inverse(x *Element17) *Element17 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element17ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element17) SetRandom() *Element17 {
	bytes := make([]byte, 1088)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:64])
	z[1] = binary.BigEndian.Uint64(bytes[64:128])
	z[2] = binary.BigEndian.Uint64(bytes[128:192])
	z[3] = binary.BigEndian.Uint64(bytes[192:256])
	z[4] = binary.BigEndian.Uint64(bytes[256:320])
	z[5] = binary.BigEndian.Uint64(bytes[320:384])
	z[6] = binary.BigEndian.Uint64(bytes[384:448])
	z[7] = binary.BigEndian.Uint64(bytes[448:512])
	z[8] = binary.BigEndian.Uint64(bytes[512:576])
	z[9] = binary.BigEndian.Uint64(bytes[576:640])
	z[10] = binary.BigEndian.Uint64(bytes[640:704])
	z[11] = binary.BigEndian.Uint64(bytes[704:768])
	z[12] = binary.BigEndian.Uint64(bytes[768:832])
	z[13] = binary.BigEndian.Uint64(bytes[832:896])
	z[14] = binary.BigEndian.Uint64(bytes[896:960])
	z[15] = binary.BigEndian.Uint64(bytes[960:1024])
	z[16] = binary.BigEndian.Uint64(bytes[1024:1088])
	z[16] %= 7176756318483791390

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element17) Add(x, y *Element17) *Element17 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], carry = bits.Sub64(z[1], 3603097598639507118, carry)
		z[2], carry = bits.Sub64(z[2], 1901064316570948514, carry)
		z[3], carry = bits.Sub64(z[3], 13592020221286190892, carry)
		z[4], carry = bits.Sub64(z[4], 5795418031312419601, carry)
		z[5], carry = bits.Sub64(z[5], 512834486801673566, carry)
		z[6], carry = bits.Sub64(z[6], 4918065994611781387, carry)
		z[7], carry = bits.Sub64(z[7], 3333387418770116569, carry)
		z[8], carry = bits.Sub64(z[8], 11268225615708655620, carry)
		z[9], carry = bits.Sub64(z[9], 1049792113801022996, carry)
		z[10], carry = bits.Sub64(z[10], 8783558615805171218, carry)
		z[11], carry = bits.Sub64(z[11], 12764383670427348163, carry)
		z[12], carry = bits.Sub64(z[12], 5284929597638693549, carry)
		z[13], carry = bits.Sub64(z[13], 3026685772878610893, carry)
		z[14], carry = bits.Sub64(z[14], 1747888123470247313, carry)
		z[15], carry = bits.Sub64(z[15], 12413919554062974026, carry)
		z[16], carry = bits.Sub64(z[16], 7176756318483791390, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element17) AddAssign(x *Element17) *Element17 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], carry = bits.Sub64(z[1], 3603097598639507118, carry)
		z[2], carry = bits.Sub64(z[2], 1901064316570948514, carry)
		z[3], carry = bits.Sub64(z[3], 13592020221286190892, carry)
		z[4], carry = bits.Sub64(z[4], 5795418031312419601, carry)
		z[5], carry = bits.Sub64(z[5], 512834486801673566, carry)
		z[6], carry = bits.Sub64(z[6], 4918065994611781387, carry)
		z[7], carry = bits.Sub64(z[7], 3333387418770116569, carry)
		z[8], carry = bits.Sub64(z[8], 11268225615708655620, carry)
		z[9], carry = bits.Sub64(z[9], 1049792113801022996, carry)
		z[10], carry = bits.Sub64(z[10], 8783558615805171218, carry)
		z[11], carry = bits.Sub64(z[11], 12764383670427348163, carry)
		z[12], carry = bits.Sub64(z[12], 5284929597638693549, carry)
		z[13], carry = bits.Sub64(z[13], 3026685772878610893, carry)
		z[14], carry = bits.Sub64(z[14], 1747888123470247313, carry)
		z[15], carry = bits.Sub64(z[15], 12413919554062974026, carry)
		z[16], carry = bits.Sub64(z[16], 7176756318483791390, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element17) Double(x *Element17) *Element17 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], carry = bits.Sub64(z[1], 3603097598639507118, carry)
		z[2], carry = bits.Sub64(z[2], 1901064316570948514, carry)
		z[3], carry = bits.Sub64(z[3], 13592020221286190892, carry)
		z[4], carry = bits.Sub64(z[4], 5795418031312419601, carry)
		z[5], carry = bits.Sub64(z[5], 512834486801673566, carry)
		z[6], carry = bits.Sub64(z[6], 4918065994611781387, carry)
		z[7], carry = bits.Sub64(z[7], 3333387418770116569, carry)
		z[8], carry = bits.Sub64(z[8], 11268225615708655620, carry)
		z[9], carry = bits.Sub64(z[9], 1049792113801022996, carry)
		z[10], carry = bits.Sub64(z[10], 8783558615805171218, carry)
		z[11], carry = bits.Sub64(z[11], 12764383670427348163, carry)
		z[12], carry = bits.Sub64(z[12], 5284929597638693549, carry)
		z[13], carry = bits.Sub64(z[13], 3026685772878610893, carry)
		z[14], carry = bits.Sub64(z[14], 1747888123470247313, carry)
		z[15], carry = bits.Sub64(z[15], 12413919554062974026, carry)
		z[16], carry = bits.Sub64(z[16], 7176756318483791390, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element17) Sub(x, y *Element17) *Element17 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 14074317334421561199, 0)
		z[1], c = bits.Add64(z[1], 3603097598639507118, c)
		z[2], c = bits.Add64(z[2], 1901064316570948514, c)
		z[3], c = bits.Add64(z[3], 13592020221286190892, c)
		z[4], c = bits.Add64(z[4], 5795418031312419601, c)
		z[5], c = bits.Add64(z[5], 512834486801673566, c)
		z[6], c = bits.Add64(z[6], 4918065994611781387, c)
		z[7], c = bits.Add64(z[7], 3333387418770116569, c)
		z[8], c = bits.Add64(z[8], 11268225615708655620, c)
		z[9], c = bits.Add64(z[9], 1049792113801022996, c)
		z[10], c = bits.Add64(z[10], 8783558615805171218, c)
		z[11], c = bits.Add64(z[11], 12764383670427348163, c)
		z[12], c = bits.Add64(z[12], 5284929597638693549, c)
		z[13], c = bits.Add64(z[13], 3026685772878610893, c)
		z[14], c = bits.Add64(z[14], 1747888123470247313, c)
		z[15], c = bits.Add64(z[15], 12413919554062974026, c)
		z[16], _ = bits.Add64(z[16], 7176756318483791390, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element17) SubAssign(x *Element17) *Element17 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 14074317334421561199, 0)
		z[1], c = bits.Add64(z[1], 3603097598639507118, c)
		z[2], c = bits.Add64(z[2], 1901064316570948514, c)
		z[3], c = bits.Add64(z[3], 13592020221286190892, c)
		z[4], c = bits.Add64(z[4], 5795418031312419601, c)
		z[5], c = bits.Add64(z[5], 512834486801673566, c)
		z[6], c = bits.Add64(z[6], 4918065994611781387, c)
		z[7], c = bits.Add64(z[7], 3333387418770116569, c)
		z[8], c = bits.Add64(z[8], 11268225615708655620, c)
		z[9], c = bits.Add64(z[9], 1049792113801022996, c)
		z[10], c = bits.Add64(z[10], 8783558615805171218, c)
		z[11], c = bits.Add64(z[11], 12764383670427348163, c)
		z[12], c = bits.Add64(z[12], 5284929597638693549, c)
		z[13], c = bits.Add64(z[13], 3026685772878610893, c)
		z[14], c = bits.Add64(z[14], 1747888123470247313, c)
		z[15], c = bits.Add64(z[15], 12413919554062974026, c)
		z[16], _ = bits.Add64(z[16], 7176756318483791390, c)
	}
	return z
}

// Exp z = x^e mod q
func (z *Element17) Exp(x Element17, e uint64) *Element17 {
	if e == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := bits.Len64(e) - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if e&(1<<uint(i)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element17) FromMont() *Element17 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 8334087986022555761
		C := madd0(m, 14074317334421561199, z[0])
		C, z[0] = madd2(m, 3603097598639507118, z[1], C)
		C, z[1] = madd2(m, 1901064316570948514, z[2], C)
		C, z[2] = madd2(m, 13592020221286190892, z[3], C)
		C, z[3] = madd2(m, 5795418031312419601, z[4], C)
		C, z[4] = madd2(m, 512834486801673566, z[5], C)
		C, z[5] = madd2(m, 4918065994611781387, z[6], C)
		C, z[6] = madd2(m, 3333387418770116569, z[7], C)
		C, z[7] = madd2(m, 11268225615708655620, z[8], C)
		C, z[8] = madd2(m, 1049792113801022996, z[9], C)
		C, z[9] = madd2(m, 8783558615805171218, z[10], C)
		C, z[10] = madd2(m, 12764383670427348163, z[11], C)
		C, z[11] = madd2(m, 5284929597638693549, z[12], C)
		C, z[12] = madd2(m, 3026685772878610893, z[13], C)
		C, z[13] = madd2(m, 1747888123470247313, z[14], C)
		C, z[14] = madd2(m, 12413919554062974026, z[15], C)
		C, z[15] = madd2(m, 7176756318483791390, z[16], C)
		z[16] = C
	}

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element17) ToMont() *Element17 {
	var rSquare = Element17{
		5702768844386953410,
		6901202894232672697,
		761732825152421795,
		1794640174131963444,
		12038415925942290010,
		16068897551610069930,
		7900289012210829742,
		6672327301282084446,
		3982556252845068427,
		1357717454794573821,
		5221786432393696969,
		10153591842947975412,
		3097086456234822522,
		7982958312047438147,
		15155034206473758924,
		16858914582440278675,
		6967400453798187336,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element17) ToRegular() Element17 {
	return *z.FromMont()
}

// String returns the string form of an Element17 in Montgomery form
func (z *Element17) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element17) ToBigInt(res *big.Int) *big.Int {
	bits := (*[17]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element17) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[17]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element17) SetBigInt(v *big.Int) *Element17 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element17ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element17) SetString(s string) *Element17 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element17.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element17) Mul(x, y *Element17) *Element17 {

	var t [18]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)

	if t[17] != 0 {
		// we need to reduce, we have a result on 18 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(t[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(t[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(t[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(t[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(t[5], 512834486801673566, b)
		z[6], b = bits.Sub64(t[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(t[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(t[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(t[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(t[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(t[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(t[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(t[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(t[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(t[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(t[16], 7176756318483791390, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element17) MulAssign(x *Element17) *Element17 {

	var t [18]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 8334087986022555761

	// -----------------------------------
	// Second loop
	C = madd0(m, 14074317334421561199, t[0])

	C, t[0] = madd2(m, 3603097598639507118, t[1], C)

	C, t[1] = madd2(m, 1901064316570948514, t[2], C)

	C, t[2] = madd2(m, 13592020221286190892, t[3], C)

	C, t[3] = madd2(m, 5795418031312419601, t[4], C)

	C, t[4] = madd2(m, 512834486801673566, t[5], C)

	C, t[5] = madd2(m, 4918065994611781387, t[6], C)

	C, t[6] = madd2(m, 3333387418770116569, t[7], C)

	C, t[7] = madd2(m, 11268225615708655620, t[8], C)

	C, t[8] = madd2(m, 1049792113801022996, t[9], C)

	C, t[9] = madd2(m, 8783558615805171218, t[10], C)

	C, t[10] = madd2(m, 12764383670427348163, t[11], C)

	C, t[11] = madd2(m, 5284929597638693549, t[12], C)

	C, t[12] = madd2(m, 3026685772878610893, t[13], C)

	C, t[13] = madd2(m, 1747888123470247313, t[14], C)

	C, t[14] = madd2(m, 12413919554062974026, t[15], C)

	C, t[15] = madd3(m, 7176756318483791390, t[16], C, t[17])

	t[16], t[17] = bits.Add64(D, C, 0)

	if t[17] != 0 {
		// we need to reduce, we have a result on 18 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(t[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(t[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(t[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(t[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(t[5], 512834486801673566, b)
		z[6], b = bits.Sub64(t[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(t[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(t[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(t[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(t[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(t[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(t[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(t[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(t[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(t[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(t[16], 7176756318483791390, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]

	// if z > q --> z -= q
	if !(z[16] < 7176756318483791390 || (z[16] == 7176756318483791390 && (z[15] < 12413919554062974026 || (z[15] == 12413919554062974026 && (z[14] < 1747888123470247313 || (z[14] == 1747888123470247313 && (z[13] < 3026685772878610893 || (z[13] == 3026685772878610893 && (z[12] < 5284929597638693549 || (z[12] == 5284929597638693549 && (z[11] < 12764383670427348163 || (z[11] == 12764383670427348163 && (z[10] < 8783558615805171218 || (z[10] == 8783558615805171218 && (z[9] < 1049792113801022996 || (z[9] == 1049792113801022996 && (z[8] < 11268225615708655620 || (z[8] == 11268225615708655620 && (z[7] < 3333387418770116569 || (z[7] == 3333387418770116569 && (z[6] < 4918065994611781387 || (z[6] == 4918065994611781387 && (z[5] < 512834486801673566 || (z[5] == 512834486801673566 && (z[4] < 5795418031312419601 || (z[4] == 5795418031312419601 && (z[3] < 13592020221286190892 || (z[3] == 13592020221286190892 && (z[2] < 1901064316570948514 || (z[2] == 1901064316570948514 && (z[1] < 3603097598639507118 || (z[1] == 3603097598639507118 && (z[0] < 14074317334421561199))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 14074317334421561199, 0)
		z[1], b = bits.Sub64(z[1], 3603097598639507118, b)
		z[2], b = bits.Sub64(z[2], 1901064316570948514, b)
		z[3], b = bits.Sub64(z[3], 13592020221286190892, b)
		z[4], b = bits.Sub64(z[4], 5795418031312419601, b)
		z[5], b = bits.Sub64(z[5], 512834486801673566, b)
		z[6], b = bits.Sub64(z[6], 4918065994611781387, b)
		z[7], b = bits.Sub64(z[7], 3333387418770116569, b)
		z[8], b = bits.Sub64(z[8], 11268225615708655620, b)
		z[9], b = bits.Sub64(z[9], 1049792113801022996, b)
		z[10], b = bits.Sub64(z[10], 8783558615805171218, b)
		z[11], b = bits.Sub64(z[11], 12764383670427348163, b)
		z[12], b = bits.Sub64(z[12], 5284929597638693549, b)
		z[13], b = bits.Sub64(z[13], 3026685772878610893, b)
		z[14], b = bits.Sub64(z[14], 1747888123470247313, b)
		z[15], b = bits.Sub64(z[15], 12413919554062974026, b)
		z[16], _ = bits.Sub64(z[16], 7176756318483791390, b)
	}
	return z
}

// Square z = x * x mod q
func (z *Element17) Square(x *Element17) *Element17 {
	return z.Mul(x, x)
}
