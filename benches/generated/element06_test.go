// Code generated by goff DO NOT EDIT
package generated

import (
	"crypto/rand"
	"math/big"
	"math/bits"
	mrand "math/rand"
	"testing"
)

func TestELEMENT06CorrectnessAgainstBigInt(t *testing.T) {
	modulus, _ := new(big.Int).SetString("16746390981969595709338412141005563201701854831926534172389692186873210396439177359801548073058525375957646286853859", 10)
	cmpEandB := func(e *Element06, b *big.Int, name string) {
		var _e big.Int
		if e.FromMont().ToBigInt(&_e).Cmp(b) != 0 {
			t.Fatal(name, "failed")
		}
	}
	var modulusMinusOne, one big.Int
	one.SetUint64(1)

	modulusMinusOne.Sub(modulus, &one)

	var n int
	if testing.Short() {
		n = 10
	} else {
		n = 500
	}

	for i := 0; i < n; i++ {

		// sample 2 random big int
		b1, _ := rand.Int(rand.Reader, modulus)
		b2, _ := rand.Int(rand.Reader, modulus)
		rExp := mrand.Uint64()

		// adding edge cases
		// TODO need more edge cases
		switch i {
		case 0:
			rExp = 0
			b1.SetUint64(0)
		case 1:
			b2.SetUint64(0)
		case 2:
			b1.SetUint64(0)
			b2.SetUint64(0)
		case 3:
			rExp = 0
		case 4:
			rExp = 1
		case 5:
			rExp = ^uint64(0) // max uint
		case 6:
			rExp = 2
			b1.Set(&modulusMinusOne)
		case 7:
			b2.Set(&modulusMinusOne)
		case 8:
			b1.Set(&modulusMinusOne)
			b2.Set(&modulusMinusOne)
		}

		rbExp := new(big.Int).SetUint64(rExp)

		var bMul, bAdd, bSub, bDiv, bNeg, bLsh, bInv, bExp, bExp2, bSquare big.Int

		// e1 = mont(b1), e2 = mont(b2)
		var e1, e2, eMul, eAdd, eSub, eDiv, eNeg, eLsh, eInv, eExp, eExp2, eSquare, eMulAssign, eSubAssign, eAddAssign Element06
		e1.SetBigInt(b1)
		e2.SetBigInt(b2)

		// (e1*e2).FromMont() === b1*b2 mod q ... etc
		eSquare.Square(&e1)
		eMul.Mul(&e1, &e2)
		eMulAssign.Set(&e1)
		eMulAssign.MulAssign(&e2)
		eAdd.Add(&e1, &e2)
		eAddAssign.Set(&e1)
		eAddAssign.AddAssign(&e2)
		eSub.Sub(&e1, &e2)
		eSubAssign.Set(&e1)
		eSubAssign.SubAssign(&e2)
		eDiv.Div(&e1, &e2)
		eNeg.Neg(&e1)
		eInv.Inverse(&e1)
		eExp.Exp(e1, rExp)
		bits := b2.Bits()
		exponent := make([]uint64, len(bits))
		for k := 0; k < len(bits); k++ {
			exponent[k] = uint64(bits[k])
		}
		eExp2.Exp(e1, exponent...)
		eLsh.Double(&e1)

		// same operations with big int
		bAdd.Add(b1, b2).Mod(&bAdd, modulus)
		bMul.Mul(b1, b2).Mod(&bMul, modulus)
		bSquare.Mul(b1, b1).Mod(&bSquare, modulus)
		bSub.Sub(b1, b2).Mod(&bSub, modulus)
		bDiv.ModInverse(b2, modulus)
		bDiv.Mul(&bDiv, b1).
			Mod(&bDiv, modulus)
		bNeg.Neg(b1).Mod(&bNeg, modulus)

		bInv.ModInverse(b1, modulus)
		bExp.Exp(b1, rbExp, modulus)
		bExp2.Exp(b1, b2, modulus)
		bLsh.Lsh(b1, 1).Mod(&bLsh, modulus)

		cmpEandB(&eSquare, &bSquare, "Square")
		cmpEandB(&eMul, &bMul, "Mul")
		cmpEandB(&eMulAssign, &bMul, "MulAssign")
		cmpEandB(&eAdd, &bAdd, "Add")
		cmpEandB(&eAddAssign, &bAdd, "AddAssign")
		cmpEandB(&eSub, &bSub, "Sub")
		cmpEandB(&eSubAssign, &bSub, "SubAssign")
		cmpEandB(&eDiv, &bDiv, "Div")
		cmpEandB(&eNeg, &bNeg, "Neg")
		cmpEandB(&eInv, &bInv, "Inv")
		cmpEandB(&eExp, &bExp, "Exp")
		cmpEandB(&eExp2, &bExp2, "Exp multi words")
		cmpEandB(&eLsh, &bLsh, "Lsh")

		// legendre symbol
		if e1.Legendre() != big.Jacobi(b1, modulus) {
			t.Fatal("legendre symbol computation failed")
		}
		if e2.Legendre() != big.Jacobi(b2, modulus) {
			t.Fatal("legendre symbol computation failed")
		}

		// sqrt
		var eSqrt Element06
		var bSqrt big.Int
		bSqrt.ModSqrt(b1, modulus)
		eSqrt.Sqrt(&e1)
		cmpEandB(&eSqrt, &bSqrt, "Sqrt")
	}
}

func TestELEMENT06IsRandom(t *testing.T) {
	for i := 0; i < 1000; i++ {
		var x, y Element06
		x.SetRandom()
		y.SetRandom()
		if x.Equal(&y) {
			t.Fatal("2 random numbers are unlikely to be equal")
		}
	}
}

// -------------------------------------------------------------------------------------------------
// benchmarks
// most benchmarks are rudimentary and should sample a large number of random inputs
// or be run multiple times to ensure it didn't measure the fastest path of the function
// TODO: clean up and push benchmarking branch

var benchResElement06 Element06

func BenchmarkInverseELEMENT06(b *testing.B) {
	var x Element06
	x.SetRandom()
	benchResElement06.SetRandom()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		benchResElement06.Inverse(&x)
	}

}
func BenchmarkExpELEMENT06(b *testing.B) {
	var x Element06
	x.SetRandom()
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Exp(x, mrand.Uint64())
	}
}

func BenchmarkDoubleELEMENT06(b *testing.B) {
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Double(&benchResElement06)
	}
}

func BenchmarkAddELEMENT06(b *testing.B) {
	var x Element06
	x.SetRandom()
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Add(&x, &benchResElement06)
	}
}

func BenchmarkSubELEMENT06(b *testing.B) {
	var x Element06
	x.SetRandom()
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Sub(&x, &benchResElement06)
	}
}

func BenchmarkNegELEMENT06(b *testing.B) {
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Neg(&benchResElement06)
	}
}

func BenchmarkDivELEMENT06(b *testing.B) {
	var x Element06
	x.SetRandom()
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Div(&x, &benchResElement06)
	}
}

func BenchmarkFromMontELEMENT06(b *testing.B) {
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.FromMont()
	}
}

func BenchmarkToMontELEMENT06(b *testing.B) {
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.ToMont()
	}
}
func BenchmarkSquareELEMENT06(b *testing.B) {
	benchResElement06.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.Square(&benchResElement06)
	}
}

func BenchmarkMulAssignELEMENT06(b *testing.B) {
	x := Element06{
		10025904687293137200,
		3931490131204699208,
		2830518026309266756,
		2274401858373092184,
		722160522906591844,
		314680518973831644,
	}
	benchResElement06.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.MulAssign(&x)
	}
}

// Montgomery multiplication benchmarks
func (z *Element06) mulCIOS(x *Element06) *Element06 {

	var t [7]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 12660293197720265013

	// -----------------------------------
	// Second loop
	C = madd0(m, 5317343146279507683, t[0])

	C, t[0] = madd2(m, 11764291221545983736, t[1], C)

	C, t[1] = madd2(m, 7932562304364642640, t[2], C)

	C, t[2] = madd2(m, 13924075413473832651, t[3], C)

	C, t[3] = madd2(m, 5472517420454695584, t[4], C)

	C, t[4] = madd3(m, 7840118268671772040, t[5], C, t[6])

	t[5], t[6] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 12660293197720265013

	// -----------------------------------
	// Second loop
	C = madd0(m, 5317343146279507683, t[0])

	C, t[0] = madd2(m, 11764291221545983736, t[1], C)

	C, t[1] = madd2(m, 7932562304364642640, t[2], C)

	C, t[2] = madd2(m, 13924075413473832651, t[3], C)

	C, t[3] = madd2(m, 5472517420454695584, t[4], C)

	C, t[4] = madd3(m, 7840118268671772040, t[5], C, t[6])

	t[5], t[6] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 12660293197720265013

	// -----------------------------------
	// Second loop
	C = madd0(m, 5317343146279507683, t[0])

	C, t[0] = madd2(m, 11764291221545983736, t[1], C)

	C, t[1] = madd2(m, 7932562304364642640, t[2], C)

	C, t[2] = madd2(m, 13924075413473832651, t[3], C)

	C, t[3] = madd2(m, 5472517420454695584, t[4], C)

	C, t[4] = madd3(m, 7840118268671772040, t[5], C, t[6])

	t[5], t[6] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 12660293197720265013

	// -----------------------------------
	// Second loop
	C = madd0(m, 5317343146279507683, t[0])

	C, t[0] = madd2(m, 11764291221545983736, t[1], C)

	C, t[1] = madd2(m, 7932562304364642640, t[2], C)

	C, t[2] = madd2(m, 13924075413473832651, t[3], C)

	C, t[3] = madd2(m, 5472517420454695584, t[4], C)

	C, t[4] = madd3(m, 7840118268671772040, t[5], C, t[6])

	t[5], t[6] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 12660293197720265013

	// -----------------------------------
	// Second loop
	C = madd0(m, 5317343146279507683, t[0])

	C, t[0] = madd2(m, 11764291221545983736, t[1], C)

	C, t[1] = madd2(m, 7932562304364642640, t[2], C)

	C, t[2] = madd2(m, 13924075413473832651, t[3], C)

	C, t[3] = madd2(m, 5472517420454695584, t[4], C)

	C, t[4] = madd3(m, 7840118268671772040, t[5], C, t[6])

	t[5], t[6] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 12660293197720265013

	// -----------------------------------
	// Second loop
	C = madd0(m, 5317343146279507683, t[0])

	C, t[0] = madd2(m, 11764291221545983736, t[1], C)

	C, t[1] = madd2(m, 7932562304364642640, t[2], C)

	C, t[2] = madd2(m, 13924075413473832651, t[3], C)

	C, t[3] = madd2(m, 5472517420454695584, t[4], C)

	C, t[4] = madd3(m, 7840118268671772040, t[5], C, t[6])

	t[5], t[6] = bits.Add64(D, C, 0)

	if t[6] != 0 {
		// we need to reduce, we have a result on 7 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 5317343146279507683, 0)
		z[1], b = bits.Sub64(t[1], 11764291221545983736, b)
		z[2], b = bits.Sub64(t[2], 7932562304364642640, b)
		z[3], b = bits.Sub64(t[3], 13924075413473832651, b)
		z[4], b = bits.Sub64(t[4], 5472517420454695584, b)
		z[5], _ = bits.Sub64(t[5], 7840118268671772040, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[5] < 7840118268671772040 || (z[5] == 7840118268671772040 && (z[4] < 5472517420454695584 || (z[4] == 5472517420454695584 && (z[3] < 13924075413473832651 || (z[3] == 13924075413473832651 && (z[2] < 7932562304364642640 || (z[2] == 7932562304364642640 && (z[1] < 11764291221545983736 || (z[1] == 11764291221545983736 && (z[0] < 5317343146279507683))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5317343146279507683, 0)
		z[1], b = bits.Sub64(z[1], 11764291221545983736, b)
		z[2], b = bits.Sub64(z[2], 7932562304364642640, b)
		z[3], b = bits.Sub64(z[3], 13924075413473832651, b)
		z[4], b = bits.Sub64(z[4], 5472517420454695584, b)
		z[5], _ = bits.Sub64(z[5], 7840118268671772040, b)
	}
	return z
}

func (z *Element06) mulNoCarry(x *Element06) *Element06 {

	var t [6]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 12660293197720265013
		c[2] = madd0(m, 5317343146279507683, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 11764291221545983736, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 7932562304364642640, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 13924075413473832651, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 5472517420454695584, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		t[5], t[4] = madd3(m, 7840118268671772040, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 12660293197720265013
		c[2] = madd0(m, 5317343146279507683, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 11764291221545983736, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7932562304364642640, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 13924075413473832651, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 5472517420454695584, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		t[5], t[4] = madd3(m, 7840118268671772040, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 12660293197720265013
		c[2] = madd0(m, 5317343146279507683, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 11764291221545983736, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7932562304364642640, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 13924075413473832651, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 5472517420454695584, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		t[5], t[4] = madd3(m, 7840118268671772040, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 12660293197720265013
		c[2] = madd0(m, 5317343146279507683, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 11764291221545983736, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7932562304364642640, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 13924075413473832651, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 5472517420454695584, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		t[5], t[4] = madd3(m, 7840118268671772040, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 12660293197720265013
		c[2] = madd0(m, 5317343146279507683, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 11764291221545983736, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7932562304364642640, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 13924075413473832651, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 5472517420454695584, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		t[5], t[4] = madd3(m, 7840118268671772040, c[0], c[2], c[1])
	}
	{
		// round 5
		v := z[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 12660293197720265013
		c[2] = madd0(m, 5317343146279507683, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 11764291221545983736, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 7932562304364642640, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 13924075413473832651, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 5472517420454695584, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		z[5], z[4] = madd3(m, 7840118268671772040, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[5] < 7840118268671772040 || (z[5] == 7840118268671772040 && (z[4] < 5472517420454695584 || (z[4] == 5472517420454695584 && (z[3] < 13924075413473832651 || (z[3] == 13924075413473832651 && (z[2] < 7932562304364642640 || (z[2] == 7932562304364642640 && (z[1] < 11764291221545983736 || (z[1] == 11764291221545983736 && (z[0] < 5317343146279507683))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5317343146279507683, 0)
		z[1], b = bits.Sub64(z[1], 11764291221545983736, b)
		z[2], b = bits.Sub64(z[2], 7932562304364642640, b)
		z[3], b = bits.Sub64(z[3], 13924075413473832651, b)
		z[4], b = bits.Sub64(z[4], 5472517420454695584, b)
		z[5], _ = bits.Sub64(z[5], 7840118268671772040, b)
	}
	return z
}

func (z *Element06) mulFIPS(x *Element06) *Element06 {

	var p [6]uint64
	var t, u, v uint64
	u, v = bits.Mul64(z[0], x[0])
	p[0] = v * 12660293197720265013
	u, v, _ = madd(p[0], 5317343146279507683, 0, u, v)
	t, u, v = madd(z[0], x[1], 0, u, v)
	t, u, v = madd(p[0], 11764291221545983736, t, u, v)
	t, u, v = madd(z[1], x[0], t, u, v)
	p[1] = v * 12660293197720265013
	u, v, _ = madd(p[1], 5317343146279507683, t, u, v)
	t, u, v = madd(z[0], x[2], 0, u, v)
	t, u, v = madd(p[0], 7932562304364642640, t, u, v)
	t, u, v = madd(z[1], x[1], t, u, v)
	t, u, v = madd(p[1], 11764291221545983736, t, u, v)
	t, u, v = madd(z[2], x[0], t, u, v)
	p[2] = v * 12660293197720265013
	u, v, _ = madd(p[2], 5317343146279507683, t, u, v)
	t, u, v = madd(z[0], x[3], 0, u, v)
	t, u, v = madd(p[0], 13924075413473832651, t, u, v)
	t, u, v = madd(z[1], x[2], t, u, v)
	t, u, v = madd(p[1], 7932562304364642640, t, u, v)
	t, u, v = madd(z[2], x[1], t, u, v)
	t, u, v = madd(p[2], 11764291221545983736, t, u, v)
	t, u, v = madd(z[3], x[0], t, u, v)
	p[3] = v * 12660293197720265013
	u, v, _ = madd(p[3], 5317343146279507683, t, u, v)
	t, u, v = madd(z[0], x[4], 0, u, v)
	t, u, v = madd(p[0], 5472517420454695584, t, u, v)
	t, u, v = madd(z[1], x[3], t, u, v)
	t, u, v = madd(p[1], 13924075413473832651, t, u, v)
	t, u, v = madd(z[2], x[2], t, u, v)
	t, u, v = madd(p[2], 7932562304364642640, t, u, v)
	t, u, v = madd(z[3], x[1], t, u, v)
	t, u, v = madd(p[3], 11764291221545983736, t, u, v)
	t, u, v = madd(z[4], x[0], t, u, v)
	p[4] = v * 12660293197720265013
	u, v, _ = madd(p[4], 5317343146279507683, t, u, v)
	t, u, v = madd(z[0], x[5], 0, u, v)
	t, u, v = madd(p[0], 7840118268671772040, t, u, v)
	t, u, v = madd(z[1], x[4], t, u, v)
	t, u, v = madd(p[1], 5472517420454695584, t, u, v)
	t, u, v = madd(z[2], x[3], t, u, v)
	t, u, v = madd(p[2], 13924075413473832651, t, u, v)
	t, u, v = madd(z[3], x[2], t, u, v)
	t, u, v = madd(p[3], 7932562304364642640, t, u, v)
	t, u, v = madd(z[4], x[1], t, u, v)
	t, u, v = madd(p[4], 11764291221545983736, t, u, v)
	t, u, v = madd(z[5], x[0], t, u, v)
	p[5] = v * 12660293197720265013
	u, v, _ = madd(p[5], 5317343146279507683, t, u, v)
	t, u, v = madd(z[1], x[5], 0, u, v)
	t, u, v = madd(p[1], 7840118268671772040, t, u, v)
	t, u, v = madd(z[2], x[4], t, u, v)
	t, u, v = madd(p[2], 5472517420454695584, t, u, v)
	t, u, v = madd(z[3], x[3], t, u, v)
	t, u, v = madd(p[3], 13924075413473832651, t, u, v)
	t, u, v = madd(z[4], x[2], t, u, v)
	t, u, v = madd(p[4], 7932562304364642640, t, u, v)
	t, u, v = madd(z[5], x[1], t, u, v)
	u, v, p[0] = madd(p[5], 11764291221545983736, t, u, v)
	t, u, v = madd(z[2], x[5], 0, u, v)
	t, u, v = madd(p[2], 7840118268671772040, t, u, v)
	t, u, v = madd(z[3], x[4], t, u, v)
	t, u, v = madd(p[3], 5472517420454695584, t, u, v)
	t, u, v = madd(z[4], x[3], t, u, v)
	t, u, v = madd(p[4], 13924075413473832651, t, u, v)
	t, u, v = madd(z[5], x[2], t, u, v)
	u, v, p[1] = madd(p[5], 7932562304364642640, t, u, v)
	t, u, v = madd(z[3], x[5], 0, u, v)
	t, u, v = madd(p[3], 7840118268671772040, t, u, v)
	t, u, v = madd(z[4], x[4], t, u, v)
	t, u, v = madd(p[4], 5472517420454695584, t, u, v)
	t, u, v = madd(z[5], x[3], t, u, v)
	u, v, p[2] = madd(p[5], 13924075413473832651, t, u, v)
	t, u, v = madd(z[4], x[5], 0, u, v)
	t, u, v = madd(p[4], 7840118268671772040, t, u, v)
	t, u, v = madd(z[5], x[4], t, u, v)
	u, v, p[3] = madd(p[5], 5472517420454695584, t, u, v)
	t, u, v = madd(z[5], x[5], t, u, v)
	u, v, p[4] = madd(p[5], 7840118268671772040, t, u, v)

	p[5] = v
	z[5] = p[5]
	z[4] = p[4]
	z[3] = p[3]
	z[2] = p[2]
	z[1] = p[1]
	z[0] = p[0]
	// copy(z[:], p[:])

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[5] < 7840118268671772040 || (z[5] == 7840118268671772040 && (z[4] < 5472517420454695584 || (z[4] == 5472517420454695584 && (z[3] < 13924075413473832651 || (z[3] == 13924075413473832651 && (z[2] < 7932562304364642640 || (z[2] == 7932562304364642640 && (z[1] < 11764291221545983736 || (z[1] == 11764291221545983736 && (z[0] < 5317343146279507683))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5317343146279507683, 0)
		z[1], b = bits.Sub64(z[1], 11764291221545983736, b)
		z[2], b = bits.Sub64(z[2], 7932562304364642640, b)
		z[3], b = bits.Sub64(z[3], 13924075413473832651, b)
		z[4], b = bits.Sub64(z[4], 5472517420454695584, b)
		z[5], _ = bits.Sub64(z[5], 7840118268671772040, b)
	}
	return z
}

func BenchmarkMulCIOSELEMENT06(b *testing.B) {
	x := Element06{
		10025904687293137200,
		3931490131204699208,
		2830518026309266756,
		2274401858373092184,
		722160522906591844,
		314680518973831644,
	}
	benchResElement06.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.mulCIOS(&x)
	}
}

func BenchmarkMulFIPSELEMENT06(b *testing.B) {
	x := Element06{
		10025904687293137200,
		3931490131204699208,
		2830518026309266756,
		2274401858373092184,
		722160522906591844,
		314680518973831644,
	}
	benchResElement06.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.mulFIPS(&x)
	}
}

func BenchmarkMulNoCarryELEMENT06(b *testing.B) {
	x := Element06{
		10025904687293137200,
		3931490131204699208,
		2830518026309266756,
		2274401858373092184,
		722160522906591844,
		314680518973831644,
	}
	benchResElement06.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement06.mulNoCarry(&x)
	}
}
