// Copyright 2019 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package generated implements field arithmetics with field modulus q =
//
// 24554982563710590325080599105608488612140570635023643494586700409229586797790958766413462734389099326283290977058980436579654225364657259498079300765899090448270678451132577123700239339378579124888215782620977132319455251051210469767041026857477379029394520589916902120674139230662704402616493164752714941928285746278559720469228268884803454915313
//
// Code generated by goff DO NOT EDIT
// Element18 are assumed to be in Montgomery form in all methods
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element18 represents a field element stored on 18 words (uint64)
// Element18 are assumed to be in Montgomery form in all methods
type Element18 [18]uint64

// Element18Limbs number of 64 bits words needed to represent Element18
const Element18Limbs = 18

// Element18Bits number bits needed to represent Element18
const Element18Bits = 1151

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element18) SetUint64(v uint64) *Element18 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element18) Set(x *Element18) *Element18 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	return z
}

// SetZero z = 0
func (z *Element18) SetZero() *Element18 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element18) SetOne() *Element18 {
	z[0] = 2806669518846515742
	z[1] = 13840362523865656313
	z[2] = 16282522771658466063
	z[3] = 7253140793883540267
	z[4] = 1138085879665168993
	z[5] = 8507289181981555108
	z[6] = 5854151986407574807
	z[7] = 11560896002257813032
	z[8] = 4637773780153867186
	z[9] = 6007901689315980876
	z[10] = 13420838691343786614
	z[11] = 10042038687050553578
	z[12] = 11608655393717579154
	z[13] = 6235007198827903582
	z[14] = 6260570895435536120
	z[15] = 8006528419695502411
	z[16] = 13845339065099537048
	z[17] = 3637450471463188546
	return z
}

// Neg z = q - x
func (z *Element18) Neg(x *Element18) *Element18 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(7820037277431517937, x[0], 0)
	z[1], borrow = bits.Sub64(2303190774921947651, x[1], borrow)
	z[2], borrow = bits.Sub64(1082110651025542776, x[2], borrow)
	z[3], borrow = bits.Sub64(5596801639913005674, x[3], borrow)
	z[4], borrow = bits.Sub64(17877701133876967119, x[4], borrow)
	z[5], borrow = bits.Sub64(4969727445863998253, x[5], borrow)
	z[6], borrow = bits.Sub64(15519668080505764212, x[6], borrow)
	z[7], borrow = bits.Sub64(12666296072580645099, x[7], borrow)
	z[8], borrow = bits.Sub64(16127857183632618022, x[8], borrow)
	z[9], borrow = bits.Sub64(15442793229051561177, x[9], borrow)
	z[10], borrow = bits.Sub64(11736324728037658308, x[10], borrow)
	z[11], borrow = bits.Sub64(13425724730184274826, x[11], borrow)
	z[12], borrow = bits.Sub64(12642416376850762038, x[12], borrow)
	z[13], borrow = bits.Sub64(15329240474295599824, x[13], borrow)
	z[14], borrow = bits.Sub64(6093086589137007747, x[14], borrow)
	z[15], borrow = bits.Sub64(14443479863861800410, x[15], borrow)
	z[16], borrow = bits.Sub64(11524074541159783091, x[16], borrow)
	z[17], _ = bits.Sub64(7404646801123181534, x[17], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element18) Div(x, y *Element18) *Element18 {
	var yInv Element18
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element18) Equal(x *Element18) bool {
	return (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element18) IsZero() bool {
	return (z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element18ModulusBigInt big.Int
var onceelement18Modulus sync.Once

func element18ModulusBigInt() *big.Int {
	onceelement18Modulus.Do(func() {
		_element18ModulusBigInt.SetString("24554982563710590325080599105608488612140570635023643494586700409229586797790958766413462734389099326283290977058980436579654225364657259498079300765899090448270678451132577123700239339378579124888215782620977132319455251051210469767041026857477379029394520589916902120674139230662704402616493164752714941928285746278559720469228268884803454915313", 10)
	})
	return &_element18ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element18) Inverse(x *Element18) *Element18 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element18ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element18) SetRandom() *Element18 {
	bytes := make([]byte, 1152)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:64])
	z[1] = binary.BigEndian.Uint64(bytes[64:128])
	z[2] = binary.BigEndian.Uint64(bytes[128:192])
	z[3] = binary.BigEndian.Uint64(bytes[192:256])
	z[4] = binary.BigEndian.Uint64(bytes[256:320])
	z[5] = binary.BigEndian.Uint64(bytes[320:384])
	z[6] = binary.BigEndian.Uint64(bytes[384:448])
	z[7] = binary.BigEndian.Uint64(bytes[448:512])
	z[8] = binary.BigEndian.Uint64(bytes[512:576])
	z[9] = binary.BigEndian.Uint64(bytes[576:640])
	z[10] = binary.BigEndian.Uint64(bytes[640:704])
	z[11] = binary.BigEndian.Uint64(bytes[704:768])
	z[12] = binary.BigEndian.Uint64(bytes[768:832])
	z[13] = binary.BigEndian.Uint64(bytes[832:896])
	z[14] = binary.BigEndian.Uint64(bytes[896:960])
	z[15] = binary.BigEndian.Uint64(bytes[960:1024])
	z[16] = binary.BigEndian.Uint64(bytes[1024:1088])
	z[17] = binary.BigEndian.Uint64(bytes[1088:1152])
	z[17] %= 7404646801123181534

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element18) Add(x, y *Element18) *Element18 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], carry = bits.Sub64(z[1], 2303190774921947651, carry)
		z[2], carry = bits.Sub64(z[2], 1082110651025542776, carry)
		z[3], carry = bits.Sub64(z[3], 5596801639913005674, carry)
		z[4], carry = bits.Sub64(z[4], 17877701133876967119, carry)
		z[5], carry = bits.Sub64(z[5], 4969727445863998253, carry)
		z[6], carry = bits.Sub64(z[6], 15519668080505764212, carry)
		z[7], carry = bits.Sub64(z[7], 12666296072580645099, carry)
		z[8], carry = bits.Sub64(z[8], 16127857183632618022, carry)
		z[9], carry = bits.Sub64(z[9], 15442793229051561177, carry)
		z[10], carry = bits.Sub64(z[10], 11736324728037658308, carry)
		z[11], carry = bits.Sub64(z[11], 13425724730184274826, carry)
		z[12], carry = bits.Sub64(z[12], 12642416376850762038, carry)
		z[13], carry = bits.Sub64(z[13], 15329240474295599824, carry)
		z[14], carry = bits.Sub64(z[14], 6093086589137007747, carry)
		z[15], carry = bits.Sub64(z[15], 14443479863861800410, carry)
		z[16], carry = bits.Sub64(z[16], 11524074541159783091, carry)
		z[17], carry = bits.Sub64(z[17], 7404646801123181534, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element18) AddAssign(x *Element18) *Element18 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], carry = bits.Sub64(z[1], 2303190774921947651, carry)
		z[2], carry = bits.Sub64(z[2], 1082110651025542776, carry)
		z[3], carry = bits.Sub64(z[3], 5596801639913005674, carry)
		z[4], carry = bits.Sub64(z[4], 17877701133876967119, carry)
		z[5], carry = bits.Sub64(z[5], 4969727445863998253, carry)
		z[6], carry = bits.Sub64(z[6], 15519668080505764212, carry)
		z[7], carry = bits.Sub64(z[7], 12666296072580645099, carry)
		z[8], carry = bits.Sub64(z[8], 16127857183632618022, carry)
		z[9], carry = bits.Sub64(z[9], 15442793229051561177, carry)
		z[10], carry = bits.Sub64(z[10], 11736324728037658308, carry)
		z[11], carry = bits.Sub64(z[11], 13425724730184274826, carry)
		z[12], carry = bits.Sub64(z[12], 12642416376850762038, carry)
		z[13], carry = bits.Sub64(z[13], 15329240474295599824, carry)
		z[14], carry = bits.Sub64(z[14], 6093086589137007747, carry)
		z[15], carry = bits.Sub64(z[15], 14443479863861800410, carry)
		z[16], carry = bits.Sub64(z[16], 11524074541159783091, carry)
		z[17], carry = bits.Sub64(z[17], 7404646801123181534, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element18) Double(x *Element18) *Element18 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], carry = bits.Sub64(z[1], 2303190774921947651, carry)
		z[2], carry = bits.Sub64(z[2], 1082110651025542776, carry)
		z[3], carry = bits.Sub64(z[3], 5596801639913005674, carry)
		z[4], carry = bits.Sub64(z[4], 17877701133876967119, carry)
		z[5], carry = bits.Sub64(z[5], 4969727445863998253, carry)
		z[6], carry = bits.Sub64(z[6], 15519668080505764212, carry)
		z[7], carry = bits.Sub64(z[7], 12666296072580645099, carry)
		z[8], carry = bits.Sub64(z[8], 16127857183632618022, carry)
		z[9], carry = bits.Sub64(z[9], 15442793229051561177, carry)
		z[10], carry = bits.Sub64(z[10], 11736324728037658308, carry)
		z[11], carry = bits.Sub64(z[11], 13425724730184274826, carry)
		z[12], carry = bits.Sub64(z[12], 12642416376850762038, carry)
		z[13], carry = bits.Sub64(z[13], 15329240474295599824, carry)
		z[14], carry = bits.Sub64(z[14], 6093086589137007747, carry)
		z[15], carry = bits.Sub64(z[15], 14443479863861800410, carry)
		z[16], carry = bits.Sub64(z[16], 11524074541159783091, carry)
		z[17], carry = bits.Sub64(z[17], 7404646801123181534, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element18) Sub(x, y *Element18) *Element18 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7820037277431517937, 0)
		z[1], c = bits.Add64(z[1], 2303190774921947651, c)
		z[2], c = bits.Add64(z[2], 1082110651025542776, c)
		z[3], c = bits.Add64(z[3], 5596801639913005674, c)
		z[4], c = bits.Add64(z[4], 17877701133876967119, c)
		z[5], c = bits.Add64(z[5], 4969727445863998253, c)
		z[6], c = bits.Add64(z[6], 15519668080505764212, c)
		z[7], c = bits.Add64(z[7], 12666296072580645099, c)
		z[8], c = bits.Add64(z[8], 16127857183632618022, c)
		z[9], c = bits.Add64(z[9], 15442793229051561177, c)
		z[10], c = bits.Add64(z[10], 11736324728037658308, c)
		z[11], c = bits.Add64(z[11], 13425724730184274826, c)
		z[12], c = bits.Add64(z[12], 12642416376850762038, c)
		z[13], c = bits.Add64(z[13], 15329240474295599824, c)
		z[14], c = bits.Add64(z[14], 6093086589137007747, c)
		z[15], c = bits.Add64(z[15], 14443479863861800410, c)
		z[16], c = bits.Add64(z[16], 11524074541159783091, c)
		z[17], _ = bits.Add64(z[17], 7404646801123181534, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element18) SubAssign(x *Element18) *Element18 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7820037277431517937, 0)
		z[1], c = bits.Add64(z[1], 2303190774921947651, c)
		z[2], c = bits.Add64(z[2], 1082110651025542776, c)
		z[3], c = bits.Add64(z[3], 5596801639913005674, c)
		z[4], c = bits.Add64(z[4], 17877701133876967119, c)
		z[5], c = bits.Add64(z[5], 4969727445863998253, c)
		z[6], c = bits.Add64(z[6], 15519668080505764212, c)
		z[7], c = bits.Add64(z[7], 12666296072580645099, c)
		z[8], c = bits.Add64(z[8], 16127857183632618022, c)
		z[9], c = bits.Add64(z[9], 15442793229051561177, c)
		z[10], c = bits.Add64(z[10], 11736324728037658308, c)
		z[11], c = bits.Add64(z[11], 13425724730184274826, c)
		z[12], c = bits.Add64(z[12], 12642416376850762038, c)
		z[13], c = bits.Add64(z[13], 15329240474295599824, c)
		z[14], c = bits.Add64(z[14], 6093086589137007747, c)
		z[15], c = bits.Add64(z[15], 14443479863861800410, c)
		z[16], c = bits.Add64(z[16], 11524074541159783091, c)
		z[17], _ = bits.Add64(z[17], 7404646801123181534, c)
	}
	return z
}

// Exp z = x^e mod q
func (z *Element18) Exp(x Element18, e uint64) *Element18 {
	if e == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := bits.Len64(e) - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if e&(1<<uint(i)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element18) FromMont() *Element18 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16553021207347700207
		C := madd0(m, 7820037277431517937, z[0])
		C, z[0] = madd2(m, 2303190774921947651, z[1], C)
		C, z[1] = madd2(m, 1082110651025542776, z[2], C)
		C, z[2] = madd2(m, 5596801639913005674, z[3], C)
		C, z[3] = madd2(m, 17877701133876967119, z[4], C)
		C, z[4] = madd2(m, 4969727445863998253, z[5], C)
		C, z[5] = madd2(m, 15519668080505764212, z[6], C)
		C, z[6] = madd2(m, 12666296072580645099, z[7], C)
		C, z[7] = madd2(m, 16127857183632618022, z[8], C)
		C, z[8] = madd2(m, 15442793229051561177, z[9], C)
		C, z[9] = madd2(m, 11736324728037658308, z[10], C)
		C, z[10] = madd2(m, 13425724730184274826, z[11], C)
		C, z[11] = madd2(m, 12642416376850762038, z[12], C)
		C, z[12] = madd2(m, 15329240474295599824, z[13], C)
		C, z[13] = madd2(m, 6093086589137007747, z[14], C)
		C, z[14] = madd2(m, 14443479863861800410, z[15], C)
		C, z[15] = madd2(m, 11524074541159783091, z[16], C)
		C, z[16] = madd2(m, 7404646801123181534, z[17], C)
		z[17] = C
	}

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element18) ToMont() *Element18 {
	var rSquare = Element18{
		3781323629173182231,
		14831425322514607322,
		6592234643583962056,
		1001284812005750518,
		4050564176520026793,
		14443918756537966592,
		8010738768790375843,
		16515437820723748420,
		13616842358631528911,
		7866457290125043428,
		18258294397089986358,
		16721399130074843837,
		15162735458788024991,
		15174433862158705473,
		309146403755799423,
		7748504655360792008,
		90967783867605055,
		1527120031896741192,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element18) ToRegular() Element18 {
	return *z.FromMont()
}

// String returns the string form of an Element18 in Montgomery form
func (z *Element18) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element18) ToBigInt(res *big.Int) *big.Int {
	bits := (*[18]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element18) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[18]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element18) SetBigInt(v *big.Int) *Element18 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element18ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element18) SetString(s string) *Element18 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element18.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element18) Mul(x, y *Element18) *Element18 {

	var t [19]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)

	if t[18] != 0 {
		// we need to reduce, we have a result on 19 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(t[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(t[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(t[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(t[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(t[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(t[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(t[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(t[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(t[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(t[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(t[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(t[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(t[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(t[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(t[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(t[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(t[17], 7404646801123181534, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element18) MulAssign(x *Element18) *Element18 {

	var t [19]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16553021207347700207

	// -----------------------------------
	// Second loop
	C = madd0(m, 7820037277431517937, t[0])

	C, t[0] = madd2(m, 2303190774921947651, t[1], C)

	C, t[1] = madd2(m, 1082110651025542776, t[2], C)

	C, t[2] = madd2(m, 5596801639913005674, t[3], C)

	C, t[3] = madd2(m, 17877701133876967119, t[4], C)

	C, t[4] = madd2(m, 4969727445863998253, t[5], C)

	C, t[5] = madd2(m, 15519668080505764212, t[6], C)

	C, t[6] = madd2(m, 12666296072580645099, t[7], C)

	C, t[7] = madd2(m, 16127857183632618022, t[8], C)

	C, t[8] = madd2(m, 15442793229051561177, t[9], C)

	C, t[9] = madd2(m, 11736324728037658308, t[10], C)

	C, t[10] = madd2(m, 13425724730184274826, t[11], C)

	C, t[11] = madd2(m, 12642416376850762038, t[12], C)

	C, t[12] = madd2(m, 15329240474295599824, t[13], C)

	C, t[13] = madd2(m, 6093086589137007747, t[14], C)

	C, t[14] = madd2(m, 14443479863861800410, t[15], C)

	C, t[15] = madd2(m, 11524074541159783091, t[16], C)

	C, t[16] = madd3(m, 7404646801123181534, t[17], C, t[18])

	t[17], t[18] = bits.Add64(D, C, 0)

	if t[18] != 0 {
		// we need to reduce, we have a result on 19 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(t[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(t[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(t[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(t[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(t[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(t[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(t[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(t[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(t[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(t[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(t[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(t[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(t[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(t[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(t[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(t[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(t[17], 7404646801123181534, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]

	// if z > q --> z -= q
	if !(z[17] < 7404646801123181534 || (z[17] == 7404646801123181534 && (z[16] < 11524074541159783091 || (z[16] == 11524074541159783091 && (z[15] < 14443479863861800410 || (z[15] == 14443479863861800410 && (z[14] < 6093086589137007747 || (z[14] == 6093086589137007747 && (z[13] < 15329240474295599824 || (z[13] == 15329240474295599824 && (z[12] < 12642416376850762038 || (z[12] == 12642416376850762038 && (z[11] < 13425724730184274826 || (z[11] == 13425724730184274826 && (z[10] < 11736324728037658308 || (z[10] == 11736324728037658308 && (z[9] < 15442793229051561177 || (z[9] == 15442793229051561177 && (z[8] < 16127857183632618022 || (z[8] == 16127857183632618022 && (z[7] < 12666296072580645099 || (z[7] == 12666296072580645099 && (z[6] < 15519668080505764212 || (z[6] == 15519668080505764212 && (z[5] < 4969727445863998253 || (z[5] == 4969727445863998253 && (z[4] < 17877701133876967119 || (z[4] == 17877701133876967119 && (z[3] < 5596801639913005674 || (z[3] == 5596801639913005674 && (z[2] < 1082110651025542776 || (z[2] == 1082110651025542776 && (z[1] < 2303190774921947651 || (z[1] == 2303190774921947651 && (z[0] < 7820037277431517937))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7820037277431517937, 0)
		z[1], b = bits.Sub64(z[1], 2303190774921947651, b)
		z[2], b = bits.Sub64(z[2], 1082110651025542776, b)
		z[3], b = bits.Sub64(z[3], 5596801639913005674, b)
		z[4], b = bits.Sub64(z[4], 17877701133876967119, b)
		z[5], b = bits.Sub64(z[5], 4969727445863998253, b)
		z[6], b = bits.Sub64(z[6], 15519668080505764212, b)
		z[7], b = bits.Sub64(z[7], 12666296072580645099, b)
		z[8], b = bits.Sub64(z[8], 16127857183632618022, b)
		z[9], b = bits.Sub64(z[9], 15442793229051561177, b)
		z[10], b = bits.Sub64(z[10], 11736324728037658308, b)
		z[11], b = bits.Sub64(z[11], 13425724730184274826, b)
		z[12], b = bits.Sub64(z[12], 12642416376850762038, b)
		z[13], b = bits.Sub64(z[13], 15329240474295599824, b)
		z[14], b = bits.Sub64(z[14], 6093086589137007747, b)
		z[15], b = bits.Sub64(z[15], 14443479863861800410, b)
		z[16], b = bits.Sub64(z[16], 11524074541159783091, b)
		z[17], _ = bits.Sub64(z[17], 7404646801123181534, b)
	}
	return z
}

// Square z = x * x mod q
func (z *Element18) Square(x *Element18) *Element18 {
	return z.Mul(x, x)
}
