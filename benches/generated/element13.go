// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 13630247874323716522387752874146310172014404958256962801260380328550693281434910983157459218449166211122393984045211808880469312337369688163264433132184679005347363350261098815173637781401487647327960506868161019406539354060948850169869529567711945061
// Code generated by goff DO NOT EDIT
// Element13 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element13 represents a field element stored on 13 words (uint64)
// Element13 are assumed to be in Montgomery form in all methods
type Element13 [13]uint64

// Element13Limbs number of 64 bits words needed to represent Element13
const Element13Limbs = 13

// Element13Bits number bits needed to represent Element13
const Element13Bits = 831

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element13) SetUint64(v uint64) *Element13 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element13) Set(x *Element13) *Element13 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	return z
}

// SetZero z = 0
func (z *Element13) SetZero() *Element13 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element13) SetOne() *Element13 {
	z[0] = 5961663708997434678
	z[1] = 13446067875797398996
	z[2] = 5483066774898074090
	z[3] = 1348520090393048547
	z[4] = 9013301262373317753
	z[5] = 11927390398621546482
	z[6] = 14809338546289985477
	z[7] = 4865421462639467303
	z[8] = 17418298723500364556
	z[9] = 17280595772572109031
	z[10] = 18332827017139775443
	z[11] = 15376142245341821371
	z[12] = 887853208708721937
	return z
}

// Neg z = q - x
func (z *Element13) Neg(x *Element13) *Element13 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(15465912219210834277, x[0], 0)
	z[1], borrow = bits.Sub64(11723710135810852117, x[1], borrow)
	z[2], borrow = bits.Sub64(6481838649405738762, x[2], borrow)
	z[3], borrow = bits.Sub64(8549111991658251534, x[3], borrow)
	z[4], borrow = bits.Sub64(13940093442522892739, x[4], borrow)
	z[5], borrow = bits.Sub64(3259676837544002566, x[5], borrow)
	z[6], borrow = bits.Sub64(1818702763709783069, x[6], borrow)
	z[7], borrow = bits.Sub64(16014033342389817964, x[7], borrow)
	z[8], borrow = bits.Sub64(514222675104593529, x[8], borrow)
	z[9], borrow = bits.Sub64(583074150568721292, x[9], borrow)
	z[10], borrow = bits.Sub64(56958528284888086, x[10], borrow)
	z[11], borrow = bits.Sub64(1535300914183865122, x[11], borrow)
	z[12], _ = bits.Sub64(8779445432500414839, x[12], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element13) Div(x, y *Element13) *Element13 {
	var yInv Element13
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element13) Equal(x *Element13) bool {
	return (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element13) IsZero() bool {
	return (z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element13ModulusBigInt big.Int
var onceelement13Modulus sync.Once

func element13ModulusBigInt() *big.Int {
	onceelement13Modulus.Do(func() {
		_element13ModulusBigInt.SetString("13630247874323716522387752874146310172014404958256962801260380328550693281434910983157459218449166211122393984045211808880469312337369688163264433132184679005347363350261098815173637781401487647327960506868161019406539354060948850169869529567711945061", 10)
	})
	return &_element13ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element13) Inverse(x *Element13) *Element13 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element13ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element13) SetRandom() *Element13 {
	bytes := make([]byte, 104)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[12] %= 8779445432500414839

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element13) Add(x, y *Element13) *Element13 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], carry = bits.Sub64(z[1], 11723710135810852117, carry)
		z[2], carry = bits.Sub64(z[2], 6481838649405738762, carry)
		z[3], carry = bits.Sub64(z[3], 8549111991658251534, carry)
		z[4], carry = bits.Sub64(z[4], 13940093442522892739, carry)
		z[5], carry = bits.Sub64(z[5], 3259676837544002566, carry)
		z[6], carry = bits.Sub64(z[6], 1818702763709783069, carry)
		z[7], carry = bits.Sub64(z[7], 16014033342389817964, carry)
		z[8], carry = bits.Sub64(z[8], 514222675104593529, carry)
		z[9], carry = bits.Sub64(z[9], 583074150568721292, carry)
		z[10], carry = bits.Sub64(z[10], 56958528284888086, carry)
		z[11], carry = bits.Sub64(z[11], 1535300914183865122, carry)
		z[12], carry = bits.Sub64(z[12], 8779445432500414839, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element13) AddAssign(x *Element13) *Element13 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], carry = bits.Sub64(z[1], 11723710135810852117, carry)
		z[2], carry = bits.Sub64(z[2], 6481838649405738762, carry)
		z[3], carry = bits.Sub64(z[3], 8549111991658251534, carry)
		z[4], carry = bits.Sub64(z[4], 13940093442522892739, carry)
		z[5], carry = bits.Sub64(z[5], 3259676837544002566, carry)
		z[6], carry = bits.Sub64(z[6], 1818702763709783069, carry)
		z[7], carry = bits.Sub64(z[7], 16014033342389817964, carry)
		z[8], carry = bits.Sub64(z[8], 514222675104593529, carry)
		z[9], carry = bits.Sub64(z[9], 583074150568721292, carry)
		z[10], carry = bits.Sub64(z[10], 56958528284888086, carry)
		z[11], carry = bits.Sub64(z[11], 1535300914183865122, carry)
		z[12], carry = bits.Sub64(z[12], 8779445432500414839, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element13) Double(x *Element13) *Element13 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], carry = bits.Sub64(z[1], 11723710135810852117, carry)
		z[2], carry = bits.Sub64(z[2], 6481838649405738762, carry)
		z[3], carry = bits.Sub64(z[3], 8549111991658251534, carry)
		z[4], carry = bits.Sub64(z[4], 13940093442522892739, carry)
		z[5], carry = bits.Sub64(z[5], 3259676837544002566, carry)
		z[6], carry = bits.Sub64(z[6], 1818702763709783069, carry)
		z[7], carry = bits.Sub64(z[7], 16014033342389817964, carry)
		z[8], carry = bits.Sub64(z[8], 514222675104593529, carry)
		z[9], carry = bits.Sub64(z[9], 583074150568721292, carry)
		z[10], carry = bits.Sub64(z[10], 56958528284888086, carry)
		z[11], carry = bits.Sub64(z[11], 1535300914183865122, carry)
		z[12], carry = bits.Sub64(z[12], 8779445432500414839, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element13) Sub(x, y *Element13) *Element13 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 15465912219210834277, 0)
		z[1], c = bits.Add64(z[1], 11723710135810852117, c)
		z[2], c = bits.Add64(z[2], 6481838649405738762, c)
		z[3], c = bits.Add64(z[3], 8549111991658251534, c)
		z[4], c = bits.Add64(z[4], 13940093442522892739, c)
		z[5], c = bits.Add64(z[5], 3259676837544002566, c)
		z[6], c = bits.Add64(z[6], 1818702763709783069, c)
		z[7], c = bits.Add64(z[7], 16014033342389817964, c)
		z[8], c = bits.Add64(z[8], 514222675104593529, c)
		z[9], c = bits.Add64(z[9], 583074150568721292, c)
		z[10], c = bits.Add64(z[10], 56958528284888086, c)
		z[11], c = bits.Add64(z[11], 1535300914183865122, c)
		z[12], _ = bits.Add64(z[12], 8779445432500414839, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element13) SubAssign(x *Element13) *Element13 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 15465912219210834277, 0)
		z[1], c = bits.Add64(z[1], 11723710135810852117, c)
		z[2], c = bits.Add64(z[2], 6481838649405738762, c)
		z[3], c = bits.Add64(z[3], 8549111991658251534, c)
		z[4], c = bits.Add64(z[4], 13940093442522892739, c)
		z[5], c = bits.Add64(z[5], 3259676837544002566, c)
		z[6], c = bits.Add64(z[6], 1818702763709783069, c)
		z[7], c = bits.Add64(z[7], 16014033342389817964, c)
		z[8], c = bits.Add64(z[8], 514222675104593529, c)
		z[9], c = bits.Add64(z[9], 583074150568721292, c)
		z[10], c = bits.Add64(z[10], 56958528284888086, c)
		z[11], c = bits.Add64(z[11], 1535300914183865122, c)
		z[12], _ = bits.Add64(z[12], 8779445432500414839, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element13) Exp(x Element13, exponent ...uint64) *Element13 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element13) FromMont() *Element13 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 109185235202021267
		C := madd0(m, 15465912219210834277, z[0])
		C, z[0] = madd2(m, 11723710135810852117, z[1], C)
		C, z[1] = madd2(m, 6481838649405738762, z[2], C)
		C, z[2] = madd2(m, 8549111991658251534, z[3], C)
		C, z[3] = madd2(m, 13940093442522892739, z[4], C)
		C, z[4] = madd2(m, 3259676837544002566, z[5], C)
		C, z[5] = madd2(m, 1818702763709783069, z[6], C)
		C, z[6] = madd2(m, 16014033342389817964, z[7], C)
		C, z[7] = madd2(m, 514222675104593529, z[8], C)
		C, z[8] = madd2(m, 583074150568721292, z[9], C)
		C, z[9] = madd2(m, 56958528284888086, z[10], C)
		C, z[10] = madd2(m, 1535300914183865122, z[11], C)
		C, z[11] = madd2(m, 8779445432500414839, z[12], C)
		z[12] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element13) ToMont() *Element13 {
	var rSquare = Element13{
		13631147377772269821,
		10281252807088877192,
		13487437111715465741,
		17564082128357803002,
		1873879787448729195,
		7326512606800469988,
		6440463210514331730,
		6166886674498902384,
		3786292429813897215,
		11903872003861432859,
		5559372606132161867,
		16929810586248675615,
		6623074160464856542,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element13) ToRegular() Element13 {
	return *z.FromMont()
}

// String returns the string form of an Element13 in Montgomery form
func (z *Element13) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element13) ToBigInt(res *big.Int) *big.Int {
	bits := (*[13]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element13) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[13]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element13) SetBigInt(v *big.Int) *Element13 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element13ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element13) SetString(s string) *Element13 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element13.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element13) Mul(x, y *Element13) *Element13 {

	var t [14]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)

	if t[13] != 0 {
		// we need to reduce, we have a result on 14 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(t[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(t[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(t[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(t[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(t[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(t[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(t[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(t[8], 514222675104593529, b)
		z[9], b = bits.Sub64(t[9], 583074150568721292, b)
		z[10], b = bits.Sub64(t[10], 56958528284888086, b)
		z[11], b = bits.Sub64(t[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(t[12], 8779445432500414839, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element13) MulAssign(x *Element13) *Element13 {

	var t [14]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 109185235202021267

	// -----------------------------------
	// Second loop
	C = madd0(m, 15465912219210834277, t[0])

	C, t[0] = madd2(m, 11723710135810852117, t[1], C)

	C, t[1] = madd2(m, 6481838649405738762, t[2], C)

	C, t[2] = madd2(m, 8549111991658251534, t[3], C)

	C, t[3] = madd2(m, 13940093442522892739, t[4], C)

	C, t[4] = madd2(m, 3259676837544002566, t[5], C)

	C, t[5] = madd2(m, 1818702763709783069, t[6], C)

	C, t[6] = madd2(m, 16014033342389817964, t[7], C)

	C, t[7] = madd2(m, 514222675104593529, t[8], C)

	C, t[8] = madd2(m, 583074150568721292, t[9], C)

	C, t[9] = madd2(m, 56958528284888086, t[10], C)

	C, t[10] = madd2(m, 1535300914183865122, t[11], C)

	C, t[11] = madd3(m, 8779445432500414839, t[12], C, t[13])

	t[12], t[13] = bits.Add64(D, C, 0)

	if t[13] != 0 {
		// we need to reduce, we have a result on 14 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(t[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(t[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(t[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(t[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(t[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(t[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(t[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(t[8], 514222675104593529, b)
		z[9], b = bits.Sub64(t[9], 583074150568721292, b)
		z[10], b = bits.Sub64(t[10], 56958528284888086, b)
		z[11], b = bits.Sub64(t[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(t[12], 8779445432500414839, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[12] < 8779445432500414839 || (z[12] == 8779445432500414839 && (z[11] < 1535300914183865122 || (z[11] == 1535300914183865122 && (z[10] < 56958528284888086 || (z[10] == 56958528284888086 && (z[9] < 583074150568721292 || (z[9] == 583074150568721292 && (z[8] < 514222675104593529 || (z[8] == 514222675104593529 && (z[7] < 16014033342389817964 || (z[7] == 16014033342389817964 && (z[6] < 1818702763709783069 || (z[6] == 1818702763709783069 && (z[5] < 3259676837544002566 || (z[5] == 3259676837544002566 && (z[4] < 13940093442522892739 || (z[4] == 13940093442522892739 && (z[3] < 8549111991658251534 || (z[3] == 8549111991658251534 && (z[2] < 6481838649405738762 || (z[2] == 6481838649405738762 && (z[1] < 11723710135810852117 || (z[1] == 11723710135810852117 && (z[0] < 15465912219210834277))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15465912219210834277, 0)
		z[1], b = bits.Sub64(z[1], 11723710135810852117, b)
		z[2], b = bits.Sub64(z[2], 6481838649405738762, b)
		z[3], b = bits.Sub64(z[3], 8549111991658251534, b)
		z[4], b = bits.Sub64(z[4], 13940093442522892739, b)
		z[5], b = bits.Sub64(z[5], 3259676837544002566, b)
		z[6], b = bits.Sub64(z[6], 1818702763709783069, b)
		z[7], b = bits.Sub64(z[7], 16014033342389817964, b)
		z[8], b = bits.Sub64(z[8], 514222675104593529, b)
		z[9], b = bits.Sub64(z[9], 583074150568721292, b)
		z[10], b = bits.Sub64(z[10], 56958528284888086, b)
		z[11], b = bits.Sub64(z[11], 1535300914183865122, b)
		z[12], _ = bits.Sub64(z[12], 8779445432500414839, b)
	}
	return z
}

func (z *Element13) Legendre() int {
	var l Element13
	// z^((p-1)/2)
	l.Exp(*z,
		16956328146460192946,
		5861855067905426058,
		3240919324702869381,
		13497928032683901575,
		6970046721261446369,
		10853210455626777091,
		909351381854891534,
		17230388708049684790,
		257111337552296764,
		291537075284360646,
		28479264142444043,
		9991022493946708369,
		4389722716250207419,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[12] == 887853208708721937) && (l[11] == 15376142245341821371) && (l[10] == 18332827017139775443) && (l[9] == 17280595772572109031) && (l[8] == 17418298723500364556) && (l[7] == 4865421462639467303) && (l[6] == 14809338546289985477) && (l[5] == 11927390398621546482) && (l[4] == 9013301262373317753) && (l[3] == 1348520090393048547) && (l[2] == 5483066774898074090) && (l[1] == 13446067875797398996) && (l[0] == 5961663708997434678) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element13) Sqrt(x *Element13) *Element13 {
	switch x.Legendre() {
	case -1:
		return nil
	case 0:
		return z.SetZero()
	case 1:
		break
	}
	panic("not implemented")
}

// Square z = x * x mod q
func (z *Element13) Square(x *Element13) *Element13 {
	return z.Mul(x, x)
}
