// Copyright 2019 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package generated implements field arithmetics with field modulus q =
//
// 187376193133827301548874114538223450196739324331982888165630023108634693268881260881167274211870407190958979534209479639322816786015308458996186477577538266218414778867691635848394968773065151084655148801123473560281608963358773687828675364475089216969824778067182057315460108090168537864443505547257961697209063938990965478140013440618210731926981790207701395130445974820668853048153239387319718979337933
//
// Code generated by goff DO NOT EDIT
// Element21 are assumed to be in Montgomery form in all methods
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element21 represents a field element stored on 21 words (uint64)
// Element21 are assumed to be in Montgomery form in all methods
type Element21 [21]uint64

// Element21Limbs number of 64 bits words needed to represent Element21
const Element21Limbs = 21

// Element21Bits number bits needed to represent Element21
const Element21Bits = 1343

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element21) SetUint64(v uint64) *Element21 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	z[20] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element21) Set(x *Element21) *Element21 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	z[19] = x[19]
	z[20] = x[20]
	return z
}

// SetZero z = 0
func (z *Element21) SetZero() *Element21 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	z[20] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element21) SetOne() *Element21 {
	z[0] = 7539139326420910694
	z[1] = 15669358765386851311
	z[2] = 12497351644693622432
	z[3] = 1705668316496168431
	z[4] = 7347338758592995796
	z[5] = 9052670229049360704
	z[6] = 708733088250733785
	z[7] = 902497964577650932
	z[8] = 475215865985378894
	z[9] = 15740358632764503024
	z[10] = 17198862818924823787
	z[11] = 5415186345400011754
	z[12] = 14638027787568352236
	z[13] = 11835367600721157605
	z[14] = 2885938714977699900
	z[15] = 8196257485807803160
	z[16] = 9635351614588620829
	z[17] = 5797429705501569251
	z[18] = 16927890364211603735
	z[19] = 4678746734694758568
	z[20] = 443533673291565852
	return z
}

// Neg z = q - x
func (z *Element21) Neg(x *Element21) *Element21 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(5453802373644320461, x[0], 0)
	z[1], borrow = bits.Sub64(10612064691016125960, x[1], borrow)
	z[2], borrow = bits.Sub64(2974696214507964591, x[2], borrow)
	z[3], borrow = bits.Sub64(17593909915461467400, x[3], borrow)
	z[4], borrow = bits.Sub64(14773074694413053717, x[4], borrow)
	z[5], borrow = bits.Sub64(4697036922330095455, x[5], borrow)
	z[6], borrow = bits.Sub64(18092377529584184723, x[6], borrow)
	z[7], borrow = bits.Sub64(17995495091420726149, x[7], borrow)
	z[8], borrow = bits.Sub64(18209136140716862168, x[8], borrow)
	z[9], borrow = bits.Sub64(1353192720472524295, x[9], borrow)
	z[10], borrow = bits.Sub64(9847312664247139722, x[10], borrow)
	z[11], borrow = bits.Sub64(15739150901009545738, x[11], borrow)
	z[12], borrow = bits.Sub64(1904358143070599689, x[12], borrow)
	z[13], borrow = bits.Sub64(12529060273348972813, x[13], borrow)
	z[14], borrow = bits.Sub64(17003774716220701665, x[14], borrow)
	z[15], borrow = bits.Sub64(5125243293950874227, x[15], borrow)
	z[16], borrow = bits.Sub64(4405696229560465393, x[16], borrow)
	z[17], borrow = bits.Sub64(6324657184103991182, x[17], borrow)
	z[18], borrow = bits.Sub64(9982798891603749748, x[18], borrow)
	z[19], borrow = bits.Sub64(16107370706362172331, x[19], borrow)
	z[20], _ = bits.Sub64(9001605200208992881, x[20], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element21) Div(x, y *Element21) *Element21 {
	var yInv Element21
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element21) Equal(x *Element21) bool {
	return (z[20] == x[20]) && (z[19] == x[19]) && (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element21) IsZero() bool {
	return (z[20] | z[19] | z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element21ModulusBigInt big.Int
var onceelement21Modulus sync.Once

func element21ModulusBigInt() *big.Int {
	onceelement21Modulus.Do(func() {
		_element21ModulusBigInt.SetString("187376193133827301548874114538223450196739324331982888165630023108634693268881260881167274211870407190958979534209479639322816786015308458996186477577538266218414778867691635848394968773065151084655148801123473560281608963358773687828675364475089216969824778067182057315460108090168537864443505547257961697209063938990965478140013440618210731926981790207701395130445974820668853048153239387319718979337933", 10)
	})
	return &_element21ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element21) Inverse(x *Element21) *Element21 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element21ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element21) SetRandom() *Element21 {
	bytes := make([]byte, 1344)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:64])
	z[1] = binary.BigEndian.Uint64(bytes[64:128])
	z[2] = binary.BigEndian.Uint64(bytes[128:192])
	z[3] = binary.BigEndian.Uint64(bytes[192:256])
	z[4] = binary.BigEndian.Uint64(bytes[256:320])
	z[5] = binary.BigEndian.Uint64(bytes[320:384])
	z[6] = binary.BigEndian.Uint64(bytes[384:448])
	z[7] = binary.BigEndian.Uint64(bytes[448:512])
	z[8] = binary.BigEndian.Uint64(bytes[512:576])
	z[9] = binary.BigEndian.Uint64(bytes[576:640])
	z[10] = binary.BigEndian.Uint64(bytes[640:704])
	z[11] = binary.BigEndian.Uint64(bytes[704:768])
	z[12] = binary.BigEndian.Uint64(bytes[768:832])
	z[13] = binary.BigEndian.Uint64(bytes[832:896])
	z[14] = binary.BigEndian.Uint64(bytes[896:960])
	z[15] = binary.BigEndian.Uint64(bytes[960:1024])
	z[16] = binary.BigEndian.Uint64(bytes[1024:1088])
	z[17] = binary.BigEndian.Uint64(bytes[1088:1152])
	z[18] = binary.BigEndian.Uint64(bytes[1152:1216])
	z[19] = binary.BigEndian.Uint64(bytes[1216:1280])
	z[20] = binary.BigEndian.Uint64(bytes[1280:1344])
	z[20] %= 9001605200208992881

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element21) Add(x, y *Element21) *Element21 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	z[19], carry = bits.Add64(x[19], y[19], carry)
	z[20], carry = bits.Add64(x[20], y[20], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], carry = bits.Sub64(z[1], 10612064691016125960, carry)
		z[2], carry = bits.Sub64(z[2], 2974696214507964591, carry)
		z[3], carry = bits.Sub64(z[3], 17593909915461467400, carry)
		z[4], carry = bits.Sub64(z[4], 14773074694413053717, carry)
		z[5], carry = bits.Sub64(z[5], 4697036922330095455, carry)
		z[6], carry = bits.Sub64(z[6], 18092377529584184723, carry)
		z[7], carry = bits.Sub64(z[7], 17995495091420726149, carry)
		z[8], carry = bits.Sub64(z[8], 18209136140716862168, carry)
		z[9], carry = bits.Sub64(z[9], 1353192720472524295, carry)
		z[10], carry = bits.Sub64(z[10], 9847312664247139722, carry)
		z[11], carry = bits.Sub64(z[11], 15739150901009545738, carry)
		z[12], carry = bits.Sub64(z[12], 1904358143070599689, carry)
		z[13], carry = bits.Sub64(z[13], 12529060273348972813, carry)
		z[14], carry = bits.Sub64(z[14], 17003774716220701665, carry)
		z[15], carry = bits.Sub64(z[15], 5125243293950874227, carry)
		z[16], carry = bits.Sub64(z[16], 4405696229560465393, carry)
		z[17], carry = bits.Sub64(z[17], 6324657184103991182, carry)
		z[18], carry = bits.Sub64(z[18], 9982798891603749748, carry)
		z[19], carry = bits.Sub64(z[19], 16107370706362172331, carry)
		z[20], carry = bits.Sub64(z[20], 9001605200208992881, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element21) AddAssign(x *Element21) *Element21 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	z[19], carry = bits.Add64(z[19], x[19], carry)
	z[20], carry = bits.Add64(z[20], x[20], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], carry = bits.Sub64(z[1], 10612064691016125960, carry)
		z[2], carry = bits.Sub64(z[2], 2974696214507964591, carry)
		z[3], carry = bits.Sub64(z[3], 17593909915461467400, carry)
		z[4], carry = bits.Sub64(z[4], 14773074694413053717, carry)
		z[5], carry = bits.Sub64(z[5], 4697036922330095455, carry)
		z[6], carry = bits.Sub64(z[6], 18092377529584184723, carry)
		z[7], carry = bits.Sub64(z[7], 17995495091420726149, carry)
		z[8], carry = bits.Sub64(z[8], 18209136140716862168, carry)
		z[9], carry = bits.Sub64(z[9], 1353192720472524295, carry)
		z[10], carry = bits.Sub64(z[10], 9847312664247139722, carry)
		z[11], carry = bits.Sub64(z[11], 15739150901009545738, carry)
		z[12], carry = bits.Sub64(z[12], 1904358143070599689, carry)
		z[13], carry = bits.Sub64(z[13], 12529060273348972813, carry)
		z[14], carry = bits.Sub64(z[14], 17003774716220701665, carry)
		z[15], carry = bits.Sub64(z[15], 5125243293950874227, carry)
		z[16], carry = bits.Sub64(z[16], 4405696229560465393, carry)
		z[17], carry = bits.Sub64(z[17], 6324657184103991182, carry)
		z[18], carry = bits.Sub64(z[18], 9982798891603749748, carry)
		z[19], carry = bits.Sub64(z[19], 16107370706362172331, carry)
		z[20], carry = bits.Sub64(z[20], 9001605200208992881, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element21) Double(x *Element21) *Element21 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	z[19], carry = bits.Add64(x[19], x[19], carry)
	z[20], carry = bits.Add64(x[20], x[20], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], carry = bits.Sub64(z[1], 10612064691016125960, carry)
		z[2], carry = bits.Sub64(z[2], 2974696214507964591, carry)
		z[3], carry = bits.Sub64(z[3], 17593909915461467400, carry)
		z[4], carry = bits.Sub64(z[4], 14773074694413053717, carry)
		z[5], carry = bits.Sub64(z[5], 4697036922330095455, carry)
		z[6], carry = bits.Sub64(z[6], 18092377529584184723, carry)
		z[7], carry = bits.Sub64(z[7], 17995495091420726149, carry)
		z[8], carry = bits.Sub64(z[8], 18209136140716862168, carry)
		z[9], carry = bits.Sub64(z[9], 1353192720472524295, carry)
		z[10], carry = bits.Sub64(z[10], 9847312664247139722, carry)
		z[11], carry = bits.Sub64(z[11], 15739150901009545738, carry)
		z[12], carry = bits.Sub64(z[12], 1904358143070599689, carry)
		z[13], carry = bits.Sub64(z[13], 12529060273348972813, carry)
		z[14], carry = bits.Sub64(z[14], 17003774716220701665, carry)
		z[15], carry = bits.Sub64(z[15], 5125243293950874227, carry)
		z[16], carry = bits.Sub64(z[16], 4405696229560465393, carry)
		z[17], carry = bits.Sub64(z[17], 6324657184103991182, carry)
		z[18], carry = bits.Sub64(z[18], 9982798891603749748, carry)
		z[19], carry = bits.Sub64(z[19], 16107370706362172331, carry)
		z[20], carry = bits.Sub64(z[20], 9001605200208992881, carry)
		return z
	}

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element21) Sub(x, y *Element21) *Element21 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	z[19], b = bits.Sub64(x[19], y[19], b)
	z[20], b = bits.Sub64(x[20], y[20], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 5453802373644320461, 0)
		z[1], c = bits.Add64(z[1], 10612064691016125960, c)
		z[2], c = bits.Add64(z[2], 2974696214507964591, c)
		z[3], c = bits.Add64(z[3], 17593909915461467400, c)
		z[4], c = bits.Add64(z[4], 14773074694413053717, c)
		z[5], c = bits.Add64(z[5], 4697036922330095455, c)
		z[6], c = bits.Add64(z[6], 18092377529584184723, c)
		z[7], c = bits.Add64(z[7], 17995495091420726149, c)
		z[8], c = bits.Add64(z[8], 18209136140716862168, c)
		z[9], c = bits.Add64(z[9], 1353192720472524295, c)
		z[10], c = bits.Add64(z[10], 9847312664247139722, c)
		z[11], c = bits.Add64(z[11], 15739150901009545738, c)
		z[12], c = bits.Add64(z[12], 1904358143070599689, c)
		z[13], c = bits.Add64(z[13], 12529060273348972813, c)
		z[14], c = bits.Add64(z[14], 17003774716220701665, c)
		z[15], c = bits.Add64(z[15], 5125243293950874227, c)
		z[16], c = bits.Add64(z[16], 4405696229560465393, c)
		z[17], c = bits.Add64(z[17], 6324657184103991182, c)
		z[18], c = bits.Add64(z[18], 9982798891603749748, c)
		z[19], c = bits.Add64(z[19], 16107370706362172331, c)
		z[20], _ = bits.Add64(z[20], 9001605200208992881, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element21) SubAssign(x *Element21) *Element21 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	z[19], b = bits.Sub64(z[19], x[19], b)
	z[20], b = bits.Sub64(z[20], x[20], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 5453802373644320461, 0)
		z[1], c = bits.Add64(z[1], 10612064691016125960, c)
		z[2], c = bits.Add64(z[2], 2974696214507964591, c)
		z[3], c = bits.Add64(z[3], 17593909915461467400, c)
		z[4], c = bits.Add64(z[4], 14773074694413053717, c)
		z[5], c = bits.Add64(z[5], 4697036922330095455, c)
		z[6], c = bits.Add64(z[6], 18092377529584184723, c)
		z[7], c = bits.Add64(z[7], 17995495091420726149, c)
		z[8], c = bits.Add64(z[8], 18209136140716862168, c)
		z[9], c = bits.Add64(z[9], 1353192720472524295, c)
		z[10], c = bits.Add64(z[10], 9847312664247139722, c)
		z[11], c = bits.Add64(z[11], 15739150901009545738, c)
		z[12], c = bits.Add64(z[12], 1904358143070599689, c)
		z[13], c = bits.Add64(z[13], 12529060273348972813, c)
		z[14], c = bits.Add64(z[14], 17003774716220701665, c)
		z[15], c = bits.Add64(z[15], 5125243293950874227, c)
		z[16], c = bits.Add64(z[16], 4405696229560465393, c)
		z[17], c = bits.Add64(z[17], 6324657184103991182, c)
		z[18], c = bits.Add64(z[18], 9982798891603749748, c)
		z[19], c = bits.Add64(z[19], 16107370706362172331, c)
		z[20], _ = bits.Add64(z[20], 9001605200208992881, c)
	}
	return z
}

// Exp z = x^e mod q
func (z *Element21) Exp(x Element21, e uint64) *Element21 {
	if e == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := bits.Len64(e) - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if e&(1<<uint(i)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element21) FromMont() *Element21 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 15882382943660302843
		C := madd0(m, 5453802373644320461, z[0])
		C, z[0] = madd2(m, 10612064691016125960, z[1], C)
		C, z[1] = madd2(m, 2974696214507964591, z[2], C)
		C, z[2] = madd2(m, 17593909915461467400, z[3], C)
		C, z[3] = madd2(m, 14773074694413053717, z[4], C)
		C, z[4] = madd2(m, 4697036922330095455, z[5], C)
		C, z[5] = madd2(m, 18092377529584184723, z[6], C)
		C, z[6] = madd2(m, 17995495091420726149, z[7], C)
		C, z[7] = madd2(m, 18209136140716862168, z[8], C)
		C, z[8] = madd2(m, 1353192720472524295, z[9], C)
		C, z[9] = madd2(m, 9847312664247139722, z[10], C)
		C, z[10] = madd2(m, 15739150901009545738, z[11], C)
		C, z[11] = madd2(m, 1904358143070599689, z[12], C)
		C, z[12] = madd2(m, 12529060273348972813, z[13], C)
		C, z[13] = madd2(m, 17003774716220701665, z[14], C)
		C, z[14] = madd2(m, 5125243293950874227, z[15], C)
		C, z[15] = madd2(m, 4405696229560465393, z[16], C)
		C, z[16] = madd2(m, 6324657184103991182, z[17], C)
		C, z[17] = madd2(m, 9982798891603749748, z[18], C)
		C, z[18] = madd2(m, 16107370706362172331, z[19], C)
		C, z[19] = madd2(m, 9001605200208992881, z[20], C)
		z[20] = C
	}

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element21) ToMont() *Element21 {
	var rSquare = Element21{
		10131510598891420197,
		1179149343733346901,
		6513541681837672425,
		17179890729966141776,
		4306039220376116399,
		13944970712251698021,
		2832386330163407924,
		557361360586307018,
		11569599064664984666,
		11250631078507459398,
		5314170583695120825,
		12876961035409654615,
		5836958569786226484,
		15923212416161470309,
		6687147985050396927,
		7991340379505254914,
		17820803801691916152,
		9901173333249062305,
		4674115088584501993,
		12691458433873771892,
		3254648976074695380,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element21) ToRegular() Element21 {
	return *z.FromMont()
}

// String returns the string form of an Element21 in Montgomery form
func (z *Element21) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element21) ToBigInt(res *big.Int) *big.Int {
	bits := (*[21]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element21) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[21]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element21) SetBigInt(v *big.Int) *Element21 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element21ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element21) SetString(s string) *Element21 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element21.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element21) Mul(x, y *Element21) *Element21 {

	var t [22]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)
	C, t[19] = madd1(y[0], x[19], C)
	C, t[20] = madd1(y[0], x[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)
	C, t[19] = madd2(y[1], x[19], t[19], C)
	C, t[20] = madd2(y[1], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)
	C, t[19] = madd2(y[2], x[19], t[19], C)
	C, t[20] = madd2(y[2], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)
	C, t[19] = madd2(y[3], x[19], t[19], C)
	C, t[20] = madd2(y[3], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)
	C, t[19] = madd2(y[4], x[19], t[19], C)
	C, t[20] = madd2(y[4], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)
	C, t[19] = madd2(y[5], x[19], t[19], C)
	C, t[20] = madd2(y[5], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)
	C, t[19] = madd2(y[6], x[19], t[19], C)
	C, t[20] = madd2(y[6], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)
	C, t[19] = madd2(y[7], x[19], t[19], C)
	C, t[20] = madd2(y[7], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)
	C, t[19] = madd2(y[8], x[19], t[19], C)
	C, t[20] = madd2(y[8], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)
	C, t[19] = madd2(y[9], x[19], t[19], C)
	C, t[20] = madd2(y[9], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)
	C, t[19] = madd2(y[10], x[19], t[19], C)
	C, t[20] = madd2(y[10], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)
	C, t[19] = madd2(y[11], x[19], t[19], C)
	C, t[20] = madd2(y[11], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)
	C, t[19] = madd2(y[12], x[19], t[19], C)
	C, t[20] = madd2(y[12], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)
	C, t[19] = madd2(y[13], x[19], t[19], C)
	C, t[20] = madd2(y[13], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)
	C, t[19] = madd2(y[14], x[19], t[19], C)
	C, t[20] = madd2(y[14], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)
	C, t[19] = madd2(y[15], x[19], t[19], C)
	C, t[20] = madd2(y[15], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)
	C, t[19] = madd2(y[16], x[19], t[19], C)
	C, t[20] = madd2(y[16], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)
	C, t[19] = madd2(y[17], x[19], t[19], C)
	C, t[20] = madd2(y[17], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)
	C, t[19] = madd2(y[18], x[19], t[19], C)
	C, t[20] = madd2(y[18], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[19], x[0], t[0])
	C, t[1] = madd2(y[19], x[1], t[1], C)
	C, t[2] = madd2(y[19], x[2], t[2], C)
	C, t[3] = madd2(y[19], x[3], t[3], C)
	C, t[4] = madd2(y[19], x[4], t[4], C)
	C, t[5] = madd2(y[19], x[5], t[5], C)
	C, t[6] = madd2(y[19], x[6], t[6], C)
	C, t[7] = madd2(y[19], x[7], t[7], C)
	C, t[8] = madd2(y[19], x[8], t[8], C)
	C, t[9] = madd2(y[19], x[9], t[9], C)
	C, t[10] = madd2(y[19], x[10], t[10], C)
	C, t[11] = madd2(y[19], x[11], t[11], C)
	C, t[12] = madd2(y[19], x[12], t[12], C)
	C, t[13] = madd2(y[19], x[13], t[13], C)
	C, t[14] = madd2(y[19], x[14], t[14], C)
	C, t[15] = madd2(y[19], x[15], t[15], C)
	C, t[16] = madd2(y[19], x[16], t[16], C)
	C, t[17] = madd2(y[19], x[17], t[17], C)
	C, t[18] = madd2(y[19], x[18], t[18], C)
	C, t[19] = madd2(y[19], x[19], t[19], C)
	C, t[20] = madd2(y[19], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[20], x[0], t[0])
	C, t[1] = madd2(y[20], x[1], t[1], C)
	C, t[2] = madd2(y[20], x[2], t[2], C)
	C, t[3] = madd2(y[20], x[3], t[3], C)
	C, t[4] = madd2(y[20], x[4], t[4], C)
	C, t[5] = madd2(y[20], x[5], t[5], C)
	C, t[6] = madd2(y[20], x[6], t[6], C)
	C, t[7] = madd2(y[20], x[7], t[7], C)
	C, t[8] = madd2(y[20], x[8], t[8], C)
	C, t[9] = madd2(y[20], x[9], t[9], C)
	C, t[10] = madd2(y[20], x[10], t[10], C)
	C, t[11] = madd2(y[20], x[11], t[11], C)
	C, t[12] = madd2(y[20], x[12], t[12], C)
	C, t[13] = madd2(y[20], x[13], t[13], C)
	C, t[14] = madd2(y[20], x[14], t[14], C)
	C, t[15] = madd2(y[20], x[15], t[15], C)
	C, t[16] = madd2(y[20], x[16], t[16], C)
	C, t[17] = madd2(y[20], x[17], t[17], C)
	C, t[18] = madd2(y[20], x[18], t[18], C)
	C, t[19] = madd2(y[20], x[19], t[19], C)
	C, t[20] = madd2(y[20], x[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)

	if t[21] != 0 {
		// we need to reduce, we have a result on 22 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(t[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(t[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(t[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(t[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(t[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(t[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(t[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(t[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(t[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(t[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(t[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(t[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(t[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(t[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(t[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(t[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(t[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(t[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(t[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(t[20], 9001605200208992881, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]
	z[20] = t[20]

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element21) MulAssign(x *Element21) *Element21 {

	var t [22]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)
	C, t[19] = madd1(x[0], z[19], C)
	C, t[20] = madd1(x[0], z[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)
	C, t[19] = madd2(x[1], z[19], t[19], C)
	C, t[20] = madd2(x[1], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)
	C, t[19] = madd2(x[2], z[19], t[19], C)
	C, t[20] = madd2(x[2], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)
	C, t[19] = madd2(x[3], z[19], t[19], C)
	C, t[20] = madd2(x[3], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)
	C, t[19] = madd2(x[4], z[19], t[19], C)
	C, t[20] = madd2(x[4], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)
	C, t[19] = madd2(x[5], z[19], t[19], C)
	C, t[20] = madd2(x[5], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)
	C, t[19] = madd2(x[6], z[19], t[19], C)
	C, t[20] = madd2(x[6], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)
	C, t[19] = madd2(x[7], z[19], t[19], C)
	C, t[20] = madd2(x[7], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)
	C, t[19] = madd2(x[8], z[19], t[19], C)
	C, t[20] = madd2(x[8], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)
	C, t[19] = madd2(x[9], z[19], t[19], C)
	C, t[20] = madd2(x[9], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)
	C, t[19] = madd2(x[10], z[19], t[19], C)
	C, t[20] = madd2(x[10], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)
	C, t[19] = madd2(x[11], z[19], t[19], C)
	C, t[20] = madd2(x[11], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)
	C, t[19] = madd2(x[12], z[19], t[19], C)
	C, t[20] = madd2(x[12], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)
	C, t[19] = madd2(x[13], z[19], t[19], C)
	C, t[20] = madd2(x[13], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)
	C, t[19] = madd2(x[14], z[19], t[19], C)
	C, t[20] = madd2(x[14], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)
	C, t[19] = madd2(x[15], z[19], t[19], C)
	C, t[20] = madd2(x[15], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)
	C, t[19] = madd2(x[16], z[19], t[19], C)
	C, t[20] = madd2(x[16], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)
	C, t[19] = madd2(x[17], z[19], t[19], C)
	C, t[20] = madd2(x[17], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)
	C, t[19] = madd2(x[18], z[19], t[19], C)
	C, t[20] = madd2(x[18], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[19], z[0], t[0])
	C, t[1] = madd2(x[19], z[1], t[1], C)
	C, t[2] = madd2(x[19], z[2], t[2], C)
	C, t[3] = madd2(x[19], z[3], t[3], C)
	C, t[4] = madd2(x[19], z[4], t[4], C)
	C, t[5] = madd2(x[19], z[5], t[5], C)
	C, t[6] = madd2(x[19], z[6], t[6], C)
	C, t[7] = madd2(x[19], z[7], t[7], C)
	C, t[8] = madd2(x[19], z[8], t[8], C)
	C, t[9] = madd2(x[19], z[9], t[9], C)
	C, t[10] = madd2(x[19], z[10], t[10], C)
	C, t[11] = madd2(x[19], z[11], t[11], C)
	C, t[12] = madd2(x[19], z[12], t[12], C)
	C, t[13] = madd2(x[19], z[13], t[13], C)
	C, t[14] = madd2(x[19], z[14], t[14], C)
	C, t[15] = madd2(x[19], z[15], t[15], C)
	C, t[16] = madd2(x[19], z[16], t[16], C)
	C, t[17] = madd2(x[19], z[17], t[17], C)
	C, t[18] = madd2(x[19], z[18], t[18], C)
	C, t[19] = madd2(x[19], z[19], t[19], C)
	C, t[20] = madd2(x[19], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[20], z[0], t[0])
	C, t[1] = madd2(x[20], z[1], t[1], C)
	C, t[2] = madd2(x[20], z[2], t[2], C)
	C, t[3] = madd2(x[20], z[3], t[3], C)
	C, t[4] = madd2(x[20], z[4], t[4], C)
	C, t[5] = madd2(x[20], z[5], t[5], C)
	C, t[6] = madd2(x[20], z[6], t[6], C)
	C, t[7] = madd2(x[20], z[7], t[7], C)
	C, t[8] = madd2(x[20], z[8], t[8], C)
	C, t[9] = madd2(x[20], z[9], t[9], C)
	C, t[10] = madd2(x[20], z[10], t[10], C)
	C, t[11] = madd2(x[20], z[11], t[11], C)
	C, t[12] = madd2(x[20], z[12], t[12], C)
	C, t[13] = madd2(x[20], z[13], t[13], C)
	C, t[14] = madd2(x[20], z[14], t[14], C)
	C, t[15] = madd2(x[20], z[15], t[15], C)
	C, t[16] = madd2(x[20], z[16], t[16], C)
	C, t[17] = madd2(x[20], z[17], t[17], C)
	C, t[18] = madd2(x[20], z[18], t[18], C)
	C, t[19] = madd2(x[20], z[19], t[19], C)
	C, t[20] = madd2(x[20], z[20], t[20], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 15882382943660302843

	// -----------------------------------
	// Second loop
	C = madd0(m, 5453802373644320461, t[0])

	C, t[0] = madd2(m, 10612064691016125960, t[1], C)

	C, t[1] = madd2(m, 2974696214507964591, t[2], C)

	C, t[2] = madd2(m, 17593909915461467400, t[3], C)

	C, t[3] = madd2(m, 14773074694413053717, t[4], C)

	C, t[4] = madd2(m, 4697036922330095455, t[5], C)

	C, t[5] = madd2(m, 18092377529584184723, t[6], C)

	C, t[6] = madd2(m, 17995495091420726149, t[7], C)

	C, t[7] = madd2(m, 18209136140716862168, t[8], C)

	C, t[8] = madd2(m, 1353192720472524295, t[9], C)

	C, t[9] = madd2(m, 9847312664247139722, t[10], C)

	C, t[10] = madd2(m, 15739150901009545738, t[11], C)

	C, t[11] = madd2(m, 1904358143070599689, t[12], C)

	C, t[12] = madd2(m, 12529060273348972813, t[13], C)

	C, t[13] = madd2(m, 17003774716220701665, t[14], C)

	C, t[14] = madd2(m, 5125243293950874227, t[15], C)

	C, t[15] = madd2(m, 4405696229560465393, t[16], C)

	C, t[16] = madd2(m, 6324657184103991182, t[17], C)

	C, t[17] = madd2(m, 9982798891603749748, t[18], C)

	C, t[18] = madd2(m, 16107370706362172331, t[19], C)

	C, t[19] = madd3(m, 9001605200208992881, t[20], C, t[21])

	t[20], t[21] = bits.Add64(D, C, 0)

	if t[21] != 0 {
		// we need to reduce, we have a result on 22 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(t[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(t[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(t[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(t[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(t[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(t[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(t[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(t[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(t[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(t[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(t[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(t[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(t[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(t[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(t[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(t[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(t[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(t[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(t[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(t[20], 9001605200208992881, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]
	z[20] = t[20]

	// if z > q --> z -= q
	if !(z[20] < 9001605200208992881 || (z[20] == 9001605200208992881 && (z[19] < 16107370706362172331 || (z[19] == 16107370706362172331 && (z[18] < 9982798891603749748 || (z[18] == 9982798891603749748 && (z[17] < 6324657184103991182 || (z[17] == 6324657184103991182 && (z[16] < 4405696229560465393 || (z[16] == 4405696229560465393 && (z[15] < 5125243293950874227 || (z[15] == 5125243293950874227 && (z[14] < 17003774716220701665 || (z[14] == 17003774716220701665 && (z[13] < 12529060273348972813 || (z[13] == 12529060273348972813 && (z[12] < 1904358143070599689 || (z[12] == 1904358143070599689 && (z[11] < 15739150901009545738 || (z[11] == 15739150901009545738 && (z[10] < 9847312664247139722 || (z[10] == 9847312664247139722 && (z[9] < 1353192720472524295 || (z[9] == 1353192720472524295 && (z[8] < 18209136140716862168 || (z[8] == 18209136140716862168 && (z[7] < 17995495091420726149 || (z[7] == 17995495091420726149 && (z[6] < 18092377529584184723 || (z[6] == 18092377529584184723 && (z[5] < 4697036922330095455 || (z[5] == 4697036922330095455 && (z[4] < 14773074694413053717 || (z[4] == 14773074694413053717 && (z[3] < 17593909915461467400 || (z[3] == 17593909915461467400 && (z[2] < 2974696214507964591 || (z[2] == 2974696214507964591 && (z[1] < 10612064691016125960 || (z[1] == 10612064691016125960 && (z[0] < 5453802373644320461))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5453802373644320461, 0)
		z[1], b = bits.Sub64(z[1], 10612064691016125960, b)
		z[2], b = bits.Sub64(z[2], 2974696214507964591, b)
		z[3], b = bits.Sub64(z[3], 17593909915461467400, b)
		z[4], b = bits.Sub64(z[4], 14773074694413053717, b)
		z[5], b = bits.Sub64(z[5], 4697036922330095455, b)
		z[6], b = bits.Sub64(z[6], 18092377529584184723, b)
		z[7], b = bits.Sub64(z[7], 17995495091420726149, b)
		z[8], b = bits.Sub64(z[8], 18209136140716862168, b)
		z[9], b = bits.Sub64(z[9], 1353192720472524295, b)
		z[10], b = bits.Sub64(z[10], 9847312664247139722, b)
		z[11], b = bits.Sub64(z[11], 15739150901009545738, b)
		z[12], b = bits.Sub64(z[12], 1904358143070599689, b)
		z[13], b = bits.Sub64(z[13], 12529060273348972813, b)
		z[14], b = bits.Sub64(z[14], 17003774716220701665, b)
		z[15], b = bits.Sub64(z[15], 5125243293950874227, b)
		z[16], b = bits.Sub64(z[16], 4405696229560465393, b)
		z[17], b = bits.Sub64(z[17], 6324657184103991182, b)
		z[18], b = bits.Sub64(z[18], 9982798891603749748, b)
		z[19], b = bits.Sub64(z[19], 16107370706362172331, b)
		z[20], _ = bits.Sub64(z[20], 9001605200208992881, b)
	}
	return z
}

// Square z = x * x mod q
func (z *Element21) Square(x *Element21) *Element21 {
	return z.Mul(x, x)
}
