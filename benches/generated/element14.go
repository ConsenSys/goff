// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 199758576110625218858939722507489558613747238751434739447040290286392292364309626241033933866337212641510456300452096736717677051377106110712473042026850057169333896663194895784426236931704108445963164698257858205967437740381323855352654988717155643284696078067028165693
// Code generated by goff DO NOT EDIT
// Element14 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element14 represents a field element stored on 14 words (uint64)
// Element14 are assumed to be in Montgomery form in all methods
type Element14 [14]uint64

// Element14Limbs number of 64 bits words needed to represent Element14
const Element14Limbs = 14

// Element14Bits number bits needed to represent Element14
const Element14Bits = 895

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element14) SetUint64(v uint64) *Element14 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element14) Set(x *Element14) *Element14 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	return z
}

// SetZero z = 0
func (z *Element14) SetZero() *Element14 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element14) SetOne() *Element14 {
	z[0] = 4110352305685067654
	z[1] = 10446512388218181879
	z[2] = 10105118549575782960
	z[3] = 6519962061152244145
	z[4] = 8339963557405988797
	z[5] = 10540491145541040311
	z[6] = 11984783232565350462
	z[7] = 11120697439115833989
	z[8] = 12077667886407218868
	z[9] = 10695171528202594807
	z[10] = 17522324057116363532
	z[11] = 12232116015086076158
	z[12] = 6648050227849542142
	z[13] = 4496588950505906136
	return z
}

// Neg z = q - x
func (z *Element14) Neg(x *Element14) *Element14 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(7168195884012241981, x[0], 0)
	z[1], borrow = bits.Sub64(13223487879600460676, x[1], borrow)
	z[2], borrow = bits.Sub64(4170812762066884327, x[2], borrow)
	z[3], borrow = bits.Sub64(5963391006278653735, x[3], borrow)
	z[4], borrow = bits.Sub64(5053390258151781409, x[4], borrow)
	z[5], borrow = bits.Sub64(13176498500939031460, x[5], borrow)
	z[6], borrow = bits.Sub64(3230980420572100576, x[6], borrow)
	z[7], borrow = bits.Sub64(12886395354151634621, x[7], borrow)
	z[8], borrow = bits.Sub64(3184538093651166373, x[8], borrow)
	z[9], borrow = bits.Sub64(13099158309608254212, x[9], borrow)
	z[10], borrow = bits.Sub64(9685582045151369849, x[10], borrow)
	z[11], borrow = bits.Sub64(12330686066166513536, x[11], borrow)
	z[12], borrow = bits.Sub64(15122718959784780544, x[12], borrow)
	z[13], _ = bits.Sub64(6975077561601822739, x[13], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element14) Div(x, y *Element14) *Element14 {
	var yInv Element14
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element14) Equal(x *Element14) bool {
	return (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element14) IsZero() bool {
	return (z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element14ModulusBigInt big.Int
var onceelement14Modulus sync.Once

func element14ModulusBigInt() *big.Int {
	onceelement14Modulus.Do(func() {
		_element14ModulusBigInt.SetString("199758576110625218858939722507489558613747238751434739447040290286392292364309626241033933866337212641510456300452096736717677051377106110712473042026850057169333896663194895784426236931704108445963164698257858205967437740381323855352654988717155643284696078067028165693", 10)
	})
	return &_element14ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element14) Inverse(x *Element14) *Element14 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element14ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element14) SetRandom() *Element14 {
	bytes := make([]byte, 112)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[13] %= 6975077561601822739

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element14) Add(x, y *Element14) *Element14 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], carry = bits.Sub64(z[1], 13223487879600460676, carry)
		z[2], carry = bits.Sub64(z[2], 4170812762066884327, carry)
		z[3], carry = bits.Sub64(z[3], 5963391006278653735, carry)
		z[4], carry = bits.Sub64(z[4], 5053390258151781409, carry)
		z[5], carry = bits.Sub64(z[5], 13176498500939031460, carry)
		z[6], carry = bits.Sub64(z[6], 3230980420572100576, carry)
		z[7], carry = bits.Sub64(z[7], 12886395354151634621, carry)
		z[8], carry = bits.Sub64(z[8], 3184538093651166373, carry)
		z[9], carry = bits.Sub64(z[9], 13099158309608254212, carry)
		z[10], carry = bits.Sub64(z[10], 9685582045151369849, carry)
		z[11], carry = bits.Sub64(z[11], 12330686066166513536, carry)
		z[12], carry = bits.Sub64(z[12], 15122718959784780544, carry)
		z[13], carry = bits.Sub64(z[13], 6975077561601822739, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element14) AddAssign(x *Element14) *Element14 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], carry = bits.Sub64(z[1], 13223487879600460676, carry)
		z[2], carry = bits.Sub64(z[2], 4170812762066884327, carry)
		z[3], carry = bits.Sub64(z[3], 5963391006278653735, carry)
		z[4], carry = bits.Sub64(z[4], 5053390258151781409, carry)
		z[5], carry = bits.Sub64(z[5], 13176498500939031460, carry)
		z[6], carry = bits.Sub64(z[6], 3230980420572100576, carry)
		z[7], carry = bits.Sub64(z[7], 12886395354151634621, carry)
		z[8], carry = bits.Sub64(z[8], 3184538093651166373, carry)
		z[9], carry = bits.Sub64(z[9], 13099158309608254212, carry)
		z[10], carry = bits.Sub64(z[10], 9685582045151369849, carry)
		z[11], carry = bits.Sub64(z[11], 12330686066166513536, carry)
		z[12], carry = bits.Sub64(z[12], 15122718959784780544, carry)
		z[13], carry = bits.Sub64(z[13], 6975077561601822739, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element14) Double(x *Element14) *Element14 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], carry = bits.Sub64(z[1], 13223487879600460676, carry)
		z[2], carry = bits.Sub64(z[2], 4170812762066884327, carry)
		z[3], carry = bits.Sub64(z[3], 5963391006278653735, carry)
		z[4], carry = bits.Sub64(z[4], 5053390258151781409, carry)
		z[5], carry = bits.Sub64(z[5], 13176498500939031460, carry)
		z[6], carry = bits.Sub64(z[6], 3230980420572100576, carry)
		z[7], carry = bits.Sub64(z[7], 12886395354151634621, carry)
		z[8], carry = bits.Sub64(z[8], 3184538093651166373, carry)
		z[9], carry = bits.Sub64(z[9], 13099158309608254212, carry)
		z[10], carry = bits.Sub64(z[10], 9685582045151369849, carry)
		z[11], carry = bits.Sub64(z[11], 12330686066166513536, carry)
		z[12], carry = bits.Sub64(z[12], 15122718959784780544, carry)
		z[13], carry = bits.Sub64(z[13], 6975077561601822739, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element14) Sub(x, y *Element14) *Element14 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7168195884012241981, 0)
		z[1], c = bits.Add64(z[1], 13223487879600460676, c)
		z[2], c = bits.Add64(z[2], 4170812762066884327, c)
		z[3], c = bits.Add64(z[3], 5963391006278653735, c)
		z[4], c = bits.Add64(z[4], 5053390258151781409, c)
		z[5], c = bits.Add64(z[5], 13176498500939031460, c)
		z[6], c = bits.Add64(z[6], 3230980420572100576, c)
		z[7], c = bits.Add64(z[7], 12886395354151634621, c)
		z[8], c = bits.Add64(z[8], 3184538093651166373, c)
		z[9], c = bits.Add64(z[9], 13099158309608254212, c)
		z[10], c = bits.Add64(z[10], 9685582045151369849, c)
		z[11], c = bits.Add64(z[11], 12330686066166513536, c)
		z[12], c = bits.Add64(z[12], 15122718959784780544, c)
		z[13], _ = bits.Add64(z[13], 6975077561601822739, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element14) SubAssign(x *Element14) *Element14 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7168195884012241981, 0)
		z[1], c = bits.Add64(z[1], 13223487879600460676, c)
		z[2], c = bits.Add64(z[2], 4170812762066884327, c)
		z[3], c = bits.Add64(z[3], 5963391006278653735, c)
		z[4], c = bits.Add64(z[4], 5053390258151781409, c)
		z[5], c = bits.Add64(z[5], 13176498500939031460, c)
		z[6], c = bits.Add64(z[6], 3230980420572100576, c)
		z[7], c = bits.Add64(z[7], 12886395354151634621, c)
		z[8], c = bits.Add64(z[8], 3184538093651166373, c)
		z[9], c = bits.Add64(z[9], 13099158309608254212, c)
		z[10], c = bits.Add64(z[10], 9685582045151369849, c)
		z[11], c = bits.Add64(z[11], 12330686066166513536, c)
		z[12], c = bits.Add64(z[12], 15122718959784780544, c)
		z[13], _ = bits.Add64(z[13], 6975077561601822739, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element14) Exp(x Element14, exponent ...uint64) *Element14 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element14) FromMont() *Element14 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16185480300403215595
		C := madd0(m, 7168195884012241981, z[0])
		C, z[0] = madd2(m, 13223487879600460676, z[1], C)
		C, z[1] = madd2(m, 4170812762066884327, z[2], C)
		C, z[2] = madd2(m, 5963391006278653735, z[3], C)
		C, z[3] = madd2(m, 5053390258151781409, z[4], C)
		C, z[4] = madd2(m, 13176498500939031460, z[5], C)
		C, z[5] = madd2(m, 3230980420572100576, z[6], C)
		C, z[6] = madd2(m, 12886395354151634621, z[7], C)
		C, z[7] = madd2(m, 3184538093651166373, z[8], C)
		C, z[8] = madd2(m, 13099158309608254212, z[9], C)
		C, z[9] = madd2(m, 9685582045151369849, z[10], C)
		C, z[10] = madd2(m, 12330686066166513536, z[11], C)
		C, z[11] = madd2(m, 15122718959784780544, z[12], C)
		C, z[12] = madd2(m, 6975077561601822739, z[13], C)
		z[13] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element14) ToMont() *Element14 {
	var rSquare = Element14{
		7944945750574972235,
		14745660157797765263,
		4086979236264351862,
		17108955122381851247,
		4921465849880581356,
		10329910521342756654,
		490023203271492606,
		11813322850746337798,
		5157871387695174016,
		10446753661101788435,
		1294183044534832152,
		18276469624394705875,
		11020262387338903845,
		4153539842338478484,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element14) ToRegular() Element14 {
	return *z.FromMont()
}

// String returns the string form of an Element14 in Montgomery form
func (z *Element14) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element14) ToBigInt(res *big.Int) *big.Int {
	bits := (*[14]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element14) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[14]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element14) SetBigInt(v *big.Int) *Element14 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element14ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element14) SetString(s string) *Element14 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element14.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element14) Mul(x, y *Element14) *Element14 {

	var t [15]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)

	if t[14] != 0 {
		// we need to reduce, we have a result on 15 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(t[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(t[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(t[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(t[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(t[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(t[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(t[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(t[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(t[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(t[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(t[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(t[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(t[13], 6975077561601822739, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element14) MulAssign(x *Element14) *Element14 {

	var t [15]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16185480300403215595

	// -----------------------------------
	// Second loop
	C = madd0(m, 7168195884012241981, t[0])

	C, t[0] = madd2(m, 13223487879600460676, t[1], C)

	C, t[1] = madd2(m, 4170812762066884327, t[2], C)

	C, t[2] = madd2(m, 5963391006278653735, t[3], C)

	C, t[3] = madd2(m, 5053390258151781409, t[4], C)

	C, t[4] = madd2(m, 13176498500939031460, t[5], C)

	C, t[5] = madd2(m, 3230980420572100576, t[6], C)

	C, t[6] = madd2(m, 12886395354151634621, t[7], C)

	C, t[7] = madd2(m, 3184538093651166373, t[8], C)

	C, t[8] = madd2(m, 13099158309608254212, t[9], C)

	C, t[9] = madd2(m, 9685582045151369849, t[10], C)

	C, t[10] = madd2(m, 12330686066166513536, t[11], C)

	C, t[11] = madd2(m, 15122718959784780544, t[12], C)

	C, t[12] = madd3(m, 6975077561601822739, t[13], C, t[14])

	t[13], t[14] = bits.Add64(D, C, 0)

	if t[14] != 0 {
		// we need to reduce, we have a result on 15 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(t[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(t[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(t[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(t[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(t[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(t[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(t[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(t[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(t[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(t[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(t[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(t[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(t[13], 6975077561601822739, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[13] < 6975077561601822739 || (z[13] == 6975077561601822739 && (z[12] < 15122718959784780544 || (z[12] == 15122718959784780544 && (z[11] < 12330686066166513536 || (z[11] == 12330686066166513536 && (z[10] < 9685582045151369849 || (z[10] == 9685582045151369849 && (z[9] < 13099158309608254212 || (z[9] == 13099158309608254212 && (z[8] < 3184538093651166373 || (z[8] == 3184538093651166373 && (z[7] < 12886395354151634621 || (z[7] == 12886395354151634621 && (z[6] < 3230980420572100576 || (z[6] == 3230980420572100576 && (z[5] < 13176498500939031460 || (z[5] == 13176498500939031460 && (z[4] < 5053390258151781409 || (z[4] == 5053390258151781409 && (z[3] < 5963391006278653735 || (z[3] == 5963391006278653735 && (z[2] < 4170812762066884327 || (z[2] == 4170812762066884327 && (z[1] < 13223487879600460676 || (z[1] == 13223487879600460676 && (z[0] < 7168195884012241981))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7168195884012241981, 0)
		z[1], b = bits.Sub64(z[1], 13223487879600460676, b)
		z[2], b = bits.Sub64(z[2], 4170812762066884327, b)
		z[3], b = bits.Sub64(z[3], 5963391006278653735, b)
		z[4], b = bits.Sub64(z[4], 5053390258151781409, b)
		z[5], b = bits.Sub64(z[5], 13176498500939031460, b)
		z[6], b = bits.Sub64(z[6], 3230980420572100576, b)
		z[7], b = bits.Sub64(z[7], 12886395354151634621, b)
		z[8], b = bits.Sub64(z[8], 3184538093651166373, b)
		z[9], b = bits.Sub64(z[9], 13099158309608254212, b)
		z[10], b = bits.Sub64(z[10], 9685582045151369849, b)
		z[11], b = bits.Sub64(z[11], 12330686066166513536, b)
		z[12], b = bits.Sub64(z[12], 15122718959784780544, b)
		z[13], _ = bits.Sub64(z[13], 6975077561601822739, b)
	}
	return z
}

func (z *Element14) Legendre() int {
	var l Element14
	// z^((p-1)/2)
	l.Exp(*z,
		3584097942006120990,
		15835115976655006146,
		11308778417888217971,
		12205067539994102675,
		2526695129075890704,
		6588249250469515730,
		10838862247140826096,
		15666569713930593118,
		1592269046825583186,
		15772951191658902914,
		4842791022575684924,
		6165343033083256768,
		16784731516747166080,
		3487538780800911369,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[13] == 4496588950505906136) && (l[12] == 6648050227849542142) && (l[11] == 12232116015086076158) && (l[10] == 17522324057116363532) && (l[9] == 10695171528202594807) && (l[8] == 12077667886407218868) && (l[7] == 11120697439115833989) && (l[6] == 11984783232565350462) && (l[5] == 10540491145541040311) && (l[4] == 8339963557405988797) && (l[3] == 6519962061152244145) && (l[2] == 10105118549575782960) && (l[1] == 10446512388218181879) && (l[0] == 4110352305685067654) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element14) Sqrt(x *Element14) *Element14 {
	switch x.Legendre() {
	case -1:
		return nil
	case 0:
		return z.SetZero()
	case 1:
		break
	}
	panic("not implemented")
}

// Square z = x * x mod q
func (z *Element14) Square(x *Element14) *Element14 {
	return z.Mul(x, x)
}
