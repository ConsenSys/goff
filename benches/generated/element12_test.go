// Code generated by goff DO NOT EDIT
package generated

import (
	"crypto/rand"
	"math/big"
	"math/bits"
	mrand "math/rand"
	"testing"
)

func TestELEMENT12CorrectnessAgainstBigInt(t *testing.T) {
	modulus, _ := new(big.Int).SetString("751895730747394626674812254458843865462430971652870816210304867549296394781435472441322526634619849441650007973177977276611468653841353315296208364129204290764235424864012847714610482461203136090255782725876698651312309563710466401", 10)
	cmpEandB := func(e *Element12, b *big.Int, name string) {
		var _e big.Int
		if e.FromMont().ToBigInt(&_e).Cmp(b) != 0 {
			t.Fatal(name, "failed")
		}
	}
	var modulusMinusOne, one big.Int
	one.SetUint64(1)

	modulusMinusOne.Sub(modulus, &one)

	var n int
	if testing.Short() {
		n = 10
	} else {
		n = 500
	}

	for i := 0; i < n; i++ {

		// sample 2 random big int
		b1, _ := rand.Int(rand.Reader, modulus)
		b2, _ := rand.Int(rand.Reader, modulus)
		rExp := mrand.Uint64()

		// adding edge cases
		// TODO need more edge cases
		switch i {
		case 0:
			rExp = 0
			b1.SetUint64(0)
		case 1:
			b2.SetUint64(0)
		case 2:
			b1.SetUint64(0)
			b2.SetUint64(0)
		case 3:
			rExp = 0
		case 4:
			rExp = 1
		case 5:
			rExp = ^uint64(0) // max uint
		case 6:
			rExp = 2
			b1.Set(&modulusMinusOne)
		case 7:
			b2.Set(&modulusMinusOne)
		case 8:
			b1.Set(&modulusMinusOne)
			b2.Set(&modulusMinusOne)
		}

		rbExp := new(big.Int).SetUint64(rExp)

		var bMul, bAdd, bSub, bDiv, bNeg, bLsh, bInv, bExp, bExp2, bSquare big.Int

		// e1 = mont(b1), e2 = mont(b2)
		var e1, e2, eMul, eAdd, eSub, eDiv, eNeg, eLsh, eInv, eExp, eExp2, eSquare, eMulAssign, eSubAssign, eAddAssign Element12
		e1.SetBigInt(b1)
		e2.SetBigInt(b2)

		// (e1*e2).FromMont() === b1*b2 mod q ... etc
		eSquare.Square(&e1)
		eMul.Mul(&e1, &e2)
		eMulAssign.Set(&e1)
		eMulAssign.MulAssign(&e2)
		eAdd.Add(&e1, &e2)
		eAddAssign.Set(&e1)
		eAddAssign.AddAssign(&e2)
		eSub.Sub(&e1, &e2)
		eSubAssign.Set(&e1)
		eSubAssign.SubAssign(&e2)
		eDiv.Div(&e1, &e2)
		eNeg.Neg(&e1)
		eInv.Inverse(&e1)
		eExp.Exp(e1, rExp)
		bits := b2.Bits()
		exponent := make([]uint64, len(bits))
		for k := 0; k < len(bits); k++ {
			exponent[k] = uint64(bits[k])
		}
		eExp2.Exp(e1, exponent...)
		eLsh.Double(&e1)

		// same operations with big int
		bAdd.Add(b1, b2).Mod(&bAdd, modulus)
		bMul.Mul(b1, b2).Mod(&bMul, modulus)
		bSquare.Mul(b1, b1).Mod(&bSquare, modulus)
		bSub.Sub(b1, b2).Mod(&bSub, modulus)
		bDiv.ModInverse(b2, modulus)
		bDiv.Mul(&bDiv, b1).
			Mod(&bDiv, modulus)
		bNeg.Neg(b1).Mod(&bNeg, modulus)

		bInv.ModInverse(b1, modulus)
		bExp.Exp(b1, rbExp, modulus)
		bExp2.Exp(b1, b2, modulus)
		bLsh.Lsh(b1, 1).Mod(&bLsh, modulus)

		cmpEandB(&eSquare, &bSquare, "Square")
		cmpEandB(&eMul, &bMul, "Mul")
		cmpEandB(&eMulAssign, &bMul, "MulAssign")
		cmpEandB(&eAdd, &bAdd, "Add")
		cmpEandB(&eAddAssign, &bAdd, "AddAssign")
		cmpEandB(&eSub, &bSub, "Sub")
		cmpEandB(&eSubAssign, &bSub, "SubAssign")
		cmpEandB(&eDiv, &bDiv, "Div")
		cmpEandB(&eNeg, &bNeg, "Neg")
		cmpEandB(&eInv, &bInv, "Inv")
		cmpEandB(&eExp, &bExp, "Exp")
		cmpEandB(&eExp2, &bExp2, "Exp multi words")
		cmpEandB(&eLsh, &bLsh, "Lsh")

		// legendre symbol
		if e1.Legendre() != big.Jacobi(b1, modulus) {
			t.Fatal("legendre symbol computation failed")
		}
		if e2.Legendre() != big.Jacobi(b2, modulus) {
			t.Fatal("legendre symbol computation failed")
		}

		// sqrt
		var eSqrt Element12
		var bSqrt big.Int
		bSqrt.ModSqrt(b1, modulus)
		eSqrt.Sqrt(&e1)
		cmpEandB(&eSqrt, &bSqrt, "Sqrt")
	}
}

func TestELEMENT12IsRandom(t *testing.T) {
	for i := 0; i < 1000; i++ {
		var x, y Element12
		x.SetRandom()
		y.SetRandom()
		if x.Equal(&y) {
			t.Fatal("2 random numbers are unlikely to be equal")
		}
	}
}

// -------------------------------------------------------------------------------------------------
// benchmarks
// most benchmarks are rudimentary and should sample a large number of random inputs
// or be run multiple times to ensure it didn't measure the fastest path of the function
// TODO: clean up and push benchmarking branch

var benchResElement12 Element12

func BenchmarkInverseELEMENT12(b *testing.B) {
	var x Element12
	x.SetRandom()
	benchResElement12.SetRandom()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		benchResElement12.Inverse(&x)
	}

}
func BenchmarkExpELEMENT12(b *testing.B) {
	var x Element12
	x.SetRandom()
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Exp(x, mrand.Uint64())
	}
}

func BenchmarkDoubleELEMENT12(b *testing.B) {
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Double(&benchResElement12)
	}
}

func BenchmarkAddELEMENT12(b *testing.B) {
	var x Element12
	x.SetRandom()
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Add(&x, &benchResElement12)
	}
}

func BenchmarkSubELEMENT12(b *testing.B) {
	var x Element12
	x.SetRandom()
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Sub(&x, &benchResElement12)
	}
}

func BenchmarkNegELEMENT12(b *testing.B) {
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Neg(&benchResElement12)
	}
}

func BenchmarkDivELEMENT12(b *testing.B) {
	var x Element12
	x.SetRandom()
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Div(&x, &benchResElement12)
	}
}

func BenchmarkFromMontELEMENT12(b *testing.B) {
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.FromMont()
	}
}

func BenchmarkToMontELEMENT12(b *testing.B) {
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.ToMont()
	}
}
func BenchmarkSquareELEMENT12(b *testing.B) {
	benchResElement12.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Square(&benchResElement12)
	}
}

func BenchmarkSqrtELEMENT12(b *testing.B) {
	var a Element12
	a.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.Sqrt(&a)
	}
}

func BenchmarkMulAssignELEMENT12(b *testing.B) {
	x := Element12{
		13819282429549430712,
		11945821257170307988,
		18364194473548453395,
		159965930876665593,
		15822911771152384576,
		10041210601779588868,
		12316334160257597868,
		8620447076019426173,
		15531630841755893066,
		13596835729947908395,
		10023107229061009484,
		3220318520580597111,
	}
	benchResElement12.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.MulAssign(&x)
	}
}

// Montgomery multiplication benchmarks
func (z *Element12) mulCIOS(x *Element12) *Element12 {

	var t [13]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14044005451381671263

	// -----------------------------------
	// Second loop
	C = madd0(m, 8273844815397349729, t[0])

	C, t[0] = madd2(m, 3789911166067994048, t[1], C)

	C, t[1] = madd2(m, 1980999977254975288, t[2], C)

	C, t[2] = madd2(m, 5260279548431090385, t[3], C)

	C, t[3] = madd2(m, 6639023665314907408, t[4], C)

	C, t[4] = madd2(m, 16093120097030411677, t[5], C)

	C, t[5] = madd2(m, 16685492296214570802, t[6], C)

	C, t[6] = madd2(m, 11391122778545924177, t[7], C)

	C, t[7] = madd2(m, 8538385890213994354, t[8], C)

	C, t[8] = madd2(m, 9854641597561695986, t[9], C)

	C, t[9] = madd2(m, 13182688983264190870, t[10], C)

	C, t[10] = madd3(m, 8933891452857551327, t[11], C, t[12])

	t[11], t[12] = bits.Add64(D, C, 0)

	if t[12] != 0 {
		// we need to reduce, we have a result on 13 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(t[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(t[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(t[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(t[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(t[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(t[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(t[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(t[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(t[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(t[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(t[11], 8933891452857551327, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

func (z *Element12) mulNoCarry(x *Element12) *Element12 {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd1(v, x[6], c[1])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd1(v, x[7], c[1])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd1(v, x[8], c[1])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd1(v, x[9], c[1])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd1(v, x[10], c[1])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd1(v, x[11], c[1])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 5
		v := z[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 6
		v := z[6]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 7
		v := z[7]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 8
		v := z[8]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 9
		v := z[9]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 10
		v := z[10]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 11
		v := z[11]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], z[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], z[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], z[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], z[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], z[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], z[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		z[11], z[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

func (z *Element12) mulFIPS(x *Element12) *Element12 {

	var p [12]uint64
	var t, u, v uint64
	u, v = bits.Mul64(z[0], x[0])
	p[0] = v * 14044005451381671263
	u, v, _ = madd(p[0], 8273844815397349729, 0, u, v)
	t, u, v = madd(z[0], x[1], 0, u, v)
	t, u, v = madd(p[0], 3789911166067994048, t, u, v)
	t, u, v = madd(z[1], x[0], t, u, v)
	p[1] = v * 14044005451381671263
	u, v, _ = madd(p[1], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[2], 0, u, v)
	t, u, v = madd(p[0], 1980999977254975288, t, u, v)
	t, u, v = madd(z[1], x[1], t, u, v)
	t, u, v = madd(p[1], 3789911166067994048, t, u, v)
	t, u, v = madd(z[2], x[0], t, u, v)
	p[2] = v * 14044005451381671263
	u, v, _ = madd(p[2], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[3], 0, u, v)
	t, u, v = madd(p[0], 5260279548431090385, t, u, v)
	t, u, v = madd(z[1], x[2], t, u, v)
	t, u, v = madd(p[1], 1980999977254975288, t, u, v)
	t, u, v = madd(z[2], x[1], t, u, v)
	t, u, v = madd(p[2], 3789911166067994048, t, u, v)
	t, u, v = madd(z[3], x[0], t, u, v)
	p[3] = v * 14044005451381671263
	u, v, _ = madd(p[3], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[4], 0, u, v)
	t, u, v = madd(p[0], 6639023665314907408, t, u, v)
	t, u, v = madd(z[1], x[3], t, u, v)
	t, u, v = madd(p[1], 5260279548431090385, t, u, v)
	t, u, v = madd(z[2], x[2], t, u, v)
	t, u, v = madd(p[2], 1980999977254975288, t, u, v)
	t, u, v = madd(z[3], x[1], t, u, v)
	t, u, v = madd(p[3], 3789911166067994048, t, u, v)
	t, u, v = madd(z[4], x[0], t, u, v)
	p[4] = v * 14044005451381671263
	u, v, _ = madd(p[4], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[5], 0, u, v)
	t, u, v = madd(p[0], 16093120097030411677, t, u, v)
	t, u, v = madd(z[1], x[4], t, u, v)
	t, u, v = madd(p[1], 6639023665314907408, t, u, v)
	t, u, v = madd(z[2], x[3], t, u, v)
	t, u, v = madd(p[2], 5260279548431090385, t, u, v)
	t, u, v = madd(z[3], x[2], t, u, v)
	t, u, v = madd(p[3], 1980999977254975288, t, u, v)
	t, u, v = madd(z[4], x[1], t, u, v)
	t, u, v = madd(p[4], 3789911166067994048, t, u, v)
	t, u, v = madd(z[5], x[0], t, u, v)
	p[5] = v * 14044005451381671263
	u, v, _ = madd(p[5], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[6], 0, u, v)
	t, u, v = madd(p[0], 16685492296214570802, t, u, v)
	t, u, v = madd(z[1], x[5], t, u, v)
	t, u, v = madd(p[1], 16093120097030411677, t, u, v)
	t, u, v = madd(z[2], x[4], t, u, v)
	t, u, v = madd(p[2], 6639023665314907408, t, u, v)
	t, u, v = madd(z[3], x[3], t, u, v)
	t, u, v = madd(p[3], 5260279548431090385, t, u, v)
	t, u, v = madd(z[4], x[2], t, u, v)
	t, u, v = madd(p[4], 1980999977254975288, t, u, v)
	t, u, v = madd(z[5], x[1], t, u, v)
	t, u, v = madd(p[5], 3789911166067994048, t, u, v)
	t, u, v = madd(z[6], x[0], t, u, v)
	p[6] = v * 14044005451381671263
	u, v, _ = madd(p[6], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[7], 0, u, v)
	t, u, v = madd(p[0], 11391122778545924177, t, u, v)
	t, u, v = madd(z[1], x[6], t, u, v)
	t, u, v = madd(p[1], 16685492296214570802, t, u, v)
	t, u, v = madd(z[2], x[5], t, u, v)
	t, u, v = madd(p[2], 16093120097030411677, t, u, v)
	t, u, v = madd(z[3], x[4], t, u, v)
	t, u, v = madd(p[3], 6639023665314907408, t, u, v)
	t, u, v = madd(z[4], x[3], t, u, v)
	t, u, v = madd(p[4], 5260279548431090385, t, u, v)
	t, u, v = madd(z[5], x[2], t, u, v)
	t, u, v = madd(p[5], 1980999977254975288, t, u, v)
	t, u, v = madd(z[6], x[1], t, u, v)
	t, u, v = madd(p[6], 3789911166067994048, t, u, v)
	t, u, v = madd(z[7], x[0], t, u, v)
	p[7] = v * 14044005451381671263
	u, v, _ = madd(p[7], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[8], 0, u, v)
	t, u, v = madd(p[0], 8538385890213994354, t, u, v)
	t, u, v = madd(z[1], x[7], t, u, v)
	t, u, v = madd(p[1], 11391122778545924177, t, u, v)
	t, u, v = madd(z[2], x[6], t, u, v)
	t, u, v = madd(p[2], 16685492296214570802, t, u, v)
	t, u, v = madd(z[3], x[5], t, u, v)
	t, u, v = madd(p[3], 16093120097030411677, t, u, v)
	t, u, v = madd(z[4], x[4], t, u, v)
	t, u, v = madd(p[4], 6639023665314907408, t, u, v)
	t, u, v = madd(z[5], x[3], t, u, v)
	t, u, v = madd(p[5], 5260279548431090385, t, u, v)
	t, u, v = madd(z[6], x[2], t, u, v)
	t, u, v = madd(p[6], 1980999977254975288, t, u, v)
	t, u, v = madd(z[7], x[1], t, u, v)
	t, u, v = madd(p[7], 3789911166067994048, t, u, v)
	t, u, v = madd(z[8], x[0], t, u, v)
	p[8] = v * 14044005451381671263
	u, v, _ = madd(p[8], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[9], 0, u, v)
	t, u, v = madd(p[0], 9854641597561695986, t, u, v)
	t, u, v = madd(z[1], x[8], t, u, v)
	t, u, v = madd(p[1], 8538385890213994354, t, u, v)
	t, u, v = madd(z[2], x[7], t, u, v)
	t, u, v = madd(p[2], 11391122778545924177, t, u, v)
	t, u, v = madd(z[3], x[6], t, u, v)
	t, u, v = madd(p[3], 16685492296214570802, t, u, v)
	t, u, v = madd(z[4], x[5], t, u, v)
	t, u, v = madd(p[4], 16093120097030411677, t, u, v)
	t, u, v = madd(z[5], x[4], t, u, v)
	t, u, v = madd(p[5], 6639023665314907408, t, u, v)
	t, u, v = madd(z[6], x[3], t, u, v)
	t, u, v = madd(p[6], 5260279548431090385, t, u, v)
	t, u, v = madd(z[7], x[2], t, u, v)
	t, u, v = madd(p[7], 1980999977254975288, t, u, v)
	t, u, v = madd(z[8], x[1], t, u, v)
	t, u, v = madd(p[8], 3789911166067994048, t, u, v)
	t, u, v = madd(z[9], x[0], t, u, v)
	p[9] = v * 14044005451381671263
	u, v, _ = madd(p[9], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[10], 0, u, v)
	t, u, v = madd(p[0], 13182688983264190870, t, u, v)
	t, u, v = madd(z[1], x[9], t, u, v)
	t, u, v = madd(p[1], 9854641597561695986, t, u, v)
	t, u, v = madd(z[2], x[8], t, u, v)
	t, u, v = madd(p[2], 8538385890213994354, t, u, v)
	t, u, v = madd(z[3], x[7], t, u, v)
	t, u, v = madd(p[3], 11391122778545924177, t, u, v)
	t, u, v = madd(z[4], x[6], t, u, v)
	t, u, v = madd(p[4], 16685492296214570802, t, u, v)
	t, u, v = madd(z[5], x[5], t, u, v)
	t, u, v = madd(p[5], 16093120097030411677, t, u, v)
	t, u, v = madd(z[6], x[4], t, u, v)
	t, u, v = madd(p[6], 6639023665314907408, t, u, v)
	t, u, v = madd(z[7], x[3], t, u, v)
	t, u, v = madd(p[7], 5260279548431090385, t, u, v)
	t, u, v = madd(z[8], x[2], t, u, v)
	t, u, v = madd(p[8], 1980999977254975288, t, u, v)
	t, u, v = madd(z[9], x[1], t, u, v)
	t, u, v = madd(p[9], 3789911166067994048, t, u, v)
	t, u, v = madd(z[10], x[0], t, u, v)
	p[10] = v * 14044005451381671263
	u, v, _ = madd(p[10], 8273844815397349729, t, u, v)
	t, u, v = madd(z[0], x[11], 0, u, v)
	t, u, v = madd(p[0], 8933891452857551327, t, u, v)
	t, u, v = madd(z[1], x[10], t, u, v)
	t, u, v = madd(p[1], 13182688983264190870, t, u, v)
	t, u, v = madd(z[2], x[9], t, u, v)
	t, u, v = madd(p[2], 9854641597561695986, t, u, v)
	t, u, v = madd(z[3], x[8], t, u, v)
	t, u, v = madd(p[3], 8538385890213994354, t, u, v)
	t, u, v = madd(z[4], x[7], t, u, v)
	t, u, v = madd(p[4], 11391122778545924177, t, u, v)
	t, u, v = madd(z[5], x[6], t, u, v)
	t, u, v = madd(p[5], 16685492296214570802, t, u, v)
	t, u, v = madd(z[6], x[5], t, u, v)
	t, u, v = madd(p[6], 16093120097030411677, t, u, v)
	t, u, v = madd(z[7], x[4], t, u, v)
	t, u, v = madd(p[7], 6639023665314907408, t, u, v)
	t, u, v = madd(z[8], x[3], t, u, v)
	t, u, v = madd(p[8], 5260279548431090385, t, u, v)
	t, u, v = madd(z[9], x[2], t, u, v)
	t, u, v = madd(p[9], 1980999977254975288, t, u, v)
	t, u, v = madd(z[10], x[1], t, u, v)
	t, u, v = madd(p[10], 3789911166067994048, t, u, v)
	t, u, v = madd(z[11], x[0], t, u, v)
	p[11] = v * 14044005451381671263
	u, v, _ = madd(p[11], 8273844815397349729, t, u, v)
	t, u, v = madd(z[1], x[11], 0, u, v)
	t, u, v = madd(p[1], 8933891452857551327, t, u, v)
	t, u, v = madd(z[2], x[10], t, u, v)
	t, u, v = madd(p[2], 13182688983264190870, t, u, v)
	t, u, v = madd(z[3], x[9], t, u, v)
	t, u, v = madd(p[3], 9854641597561695986, t, u, v)
	t, u, v = madd(z[4], x[8], t, u, v)
	t, u, v = madd(p[4], 8538385890213994354, t, u, v)
	t, u, v = madd(z[5], x[7], t, u, v)
	t, u, v = madd(p[5], 11391122778545924177, t, u, v)
	t, u, v = madd(z[6], x[6], t, u, v)
	t, u, v = madd(p[6], 16685492296214570802, t, u, v)
	t, u, v = madd(z[7], x[5], t, u, v)
	t, u, v = madd(p[7], 16093120097030411677, t, u, v)
	t, u, v = madd(z[8], x[4], t, u, v)
	t, u, v = madd(p[8], 6639023665314907408, t, u, v)
	t, u, v = madd(z[9], x[3], t, u, v)
	t, u, v = madd(p[9], 5260279548431090385, t, u, v)
	t, u, v = madd(z[10], x[2], t, u, v)
	t, u, v = madd(p[10], 1980999977254975288, t, u, v)
	t, u, v = madd(z[11], x[1], t, u, v)
	u, v, p[0] = madd(p[11], 3789911166067994048, t, u, v)
	t, u, v = madd(z[2], x[11], 0, u, v)
	t, u, v = madd(p[2], 8933891452857551327, t, u, v)
	t, u, v = madd(z[3], x[10], t, u, v)
	t, u, v = madd(p[3], 13182688983264190870, t, u, v)
	t, u, v = madd(z[4], x[9], t, u, v)
	t, u, v = madd(p[4], 9854641597561695986, t, u, v)
	t, u, v = madd(z[5], x[8], t, u, v)
	t, u, v = madd(p[5], 8538385890213994354, t, u, v)
	t, u, v = madd(z[6], x[7], t, u, v)
	t, u, v = madd(p[6], 11391122778545924177, t, u, v)
	t, u, v = madd(z[7], x[6], t, u, v)
	t, u, v = madd(p[7], 16685492296214570802, t, u, v)
	t, u, v = madd(z[8], x[5], t, u, v)
	t, u, v = madd(p[8], 16093120097030411677, t, u, v)
	t, u, v = madd(z[9], x[4], t, u, v)
	t, u, v = madd(p[9], 6639023665314907408, t, u, v)
	t, u, v = madd(z[10], x[3], t, u, v)
	t, u, v = madd(p[10], 5260279548431090385, t, u, v)
	t, u, v = madd(z[11], x[2], t, u, v)
	u, v, p[1] = madd(p[11], 1980999977254975288, t, u, v)
	t, u, v = madd(z[3], x[11], 0, u, v)
	t, u, v = madd(p[3], 8933891452857551327, t, u, v)
	t, u, v = madd(z[4], x[10], t, u, v)
	t, u, v = madd(p[4], 13182688983264190870, t, u, v)
	t, u, v = madd(z[5], x[9], t, u, v)
	t, u, v = madd(p[5], 9854641597561695986, t, u, v)
	t, u, v = madd(z[6], x[8], t, u, v)
	t, u, v = madd(p[6], 8538385890213994354, t, u, v)
	t, u, v = madd(z[7], x[7], t, u, v)
	t, u, v = madd(p[7], 11391122778545924177, t, u, v)
	t, u, v = madd(z[8], x[6], t, u, v)
	t, u, v = madd(p[8], 16685492296214570802, t, u, v)
	t, u, v = madd(z[9], x[5], t, u, v)
	t, u, v = madd(p[9], 16093120097030411677, t, u, v)
	t, u, v = madd(z[10], x[4], t, u, v)
	t, u, v = madd(p[10], 6639023665314907408, t, u, v)
	t, u, v = madd(z[11], x[3], t, u, v)
	u, v, p[2] = madd(p[11], 5260279548431090385, t, u, v)
	t, u, v = madd(z[4], x[11], 0, u, v)
	t, u, v = madd(p[4], 8933891452857551327, t, u, v)
	t, u, v = madd(z[5], x[10], t, u, v)
	t, u, v = madd(p[5], 13182688983264190870, t, u, v)
	t, u, v = madd(z[6], x[9], t, u, v)
	t, u, v = madd(p[6], 9854641597561695986, t, u, v)
	t, u, v = madd(z[7], x[8], t, u, v)
	t, u, v = madd(p[7], 8538385890213994354, t, u, v)
	t, u, v = madd(z[8], x[7], t, u, v)
	t, u, v = madd(p[8], 11391122778545924177, t, u, v)
	t, u, v = madd(z[9], x[6], t, u, v)
	t, u, v = madd(p[9], 16685492296214570802, t, u, v)
	t, u, v = madd(z[10], x[5], t, u, v)
	t, u, v = madd(p[10], 16093120097030411677, t, u, v)
	t, u, v = madd(z[11], x[4], t, u, v)
	u, v, p[3] = madd(p[11], 6639023665314907408, t, u, v)
	t, u, v = madd(z[5], x[11], 0, u, v)
	t, u, v = madd(p[5], 8933891452857551327, t, u, v)
	t, u, v = madd(z[6], x[10], t, u, v)
	t, u, v = madd(p[6], 13182688983264190870, t, u, v)
	t, u, v = madd(z[7], x[9], t, u, v)
	t, u, v = madd(p[7], 9854641597561695986, t, u, v)
	t, u, v = madd(z[8], x[8], t, u, v)
	t, u, v = madd(p[8], 8538385890213994354, t, u, v)
	t, u, v = madd(z[9], x[7], t, u, v)
	t, u, v = madd(p[9], 11391122778545924177, t, u, v)
	t, u, v = madd(z[10], x[6], t, u, v)
	t, u, v = madd(p[10], 16685492296214570802, t, u, v)
	t, u, v = madd(z[11], x[5], t, u, v)
	u, v, p[4] = madd(p[11], 16093120097030411677, t, u, v)
	t, u, v = madd(z[6], x[11], 0, u, v)
	t, u, v = madd(p[6], 8933891452857551327, t, u, v)
	t, u, v = madd(z[7], x[10], t, u, v)
	t, u, v = madd(p[7], 13182688983264190870, t, u, v)
	t, u, v = madd(z[8], x[9], t, u, v)
	t, u, v = madd(p[8], 9854641597561695986, t, u, v)
	t, u, v = madd(z[9], x[8], t, u, v)
	t, u, v = madd(p[9], 8538385890213994354, t, u, v)
	t, u, v = madd(z[10], x[7], t, u, v)
	t, u, v = madd(p[10], 11391122778545924177, t, u, v)
	t, u, v = madd(z[11], x[6], t, u, v)
	u, v, p[5] = madd(p[11], 16685492296214570802, t, u, v)
	t, u, v = madd(z[7], x[11], 0, u, v)
	t, u, v = madd(p[7], 8933891452857551327, t, u, v)
	t, u, v = madd(z[8], x[10], t, u, v)
	t, u, v = madd(p[8], 13182688983264190870, t, u, v)
	t, u, v = madd(z[9], x[9], t, u, v)
	t, u, v = madd(p[9], 9854641597561695986, t, u, v)
	t, u, v = madd(z[10], x[8], t, u, v)
	t, u, v = madd(p[10], 8538385890213994354, t, u, v)
	t, u, v = madd(z[11], x[7], t, u, v)
	u, v, p[6] = madd(p[11], 11391122778545924177, t, u, v)
	t, u, v = madd(z[8], x[11], 0, u, v)
	t, u, v = madd(p[8], 8933891452857551327, t, u, v)
	t, u, v = madd(z[9], x[10], t, u, v)
	t, u, v = madd(p[9], 13182688983264190870, t, u, v)
	t, u, v = madd(z[10], x[9], t, u, v)
	t, u, v = madd(p[10], 9854641597561695986, t, u, v)
	t, u, v = madd(z[11], x[8], t, u, v)
	u, v, p[7] = madd(p[11], 8538385890213994354, t, u, v)
	t, u, v = madd(z[9], x[11], 0, u, v)
	t, u, v = madd(p[9], 8933891452857551327, t, u, v)
	t, u, v = madd(z[10], x[10], t, u, v)
	t, u, v = madd(p[10], 13182688983264190870, t, u, v)
	t, u, v = madd(z[11], x[9], t, u, v)
	u, v, p[8] = madd(p[11], 9854641597561695986, t, u, v)
	t, u, v = madd(z[10], x[11], 0, u, v)
	t, u, v = madd(p[10], 8933891452857551327, t, u, v)
	t, u, v = madd(z[11], x[10], t, u, v)
	u, v, p[9] = madd(p[11], 13182688983264190870, t, u, v)
	t, u, v = madd(z[11], x[11], t, u, v)
	u, v, p[10] = madd(p[11], 8933891452857551327, t, u, v)

	p[11] = v
	z[11] = p[11]
	z[10] = p[10]
	z[9] = p[9]
	z[8] = p[8]
	z[7] = p[7]
	z[6] = p[6]
	z[5] = p[5]
	z[4] = p[4]
	z[3] = p[3]
	z[2] = p[2]
	z[1] = p[1]
	z[0] = p[0]
	// copy(z[:], p[:])

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

func BenchmarkMulCIOSELEMENT12(b *testing.B) {
	x := Element12{
		13819282429549430712,
		11945821257170307988,
		18364194473548453395,
		159965930876665593,
		15822911771152384576,
		10041210601779588868,
		12316334160257597868,
		8620447076019426173,
		15531630841755893066,
		13596835729947908395,
		10023107229061009484,
		3220318520580597111,
	}
	benchResElement12.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.mulCIOS(&x)
	}
}

func BenchmarkMulFIPSELEMENT12(b *testing.B) {
	x := Element12{
		13819282429549430712,
		11945821257170307988,
		18364194473548453395,
		159965930876665593,
		15822911771152384576,
		10041210601779588868,
		12316334160257597868,
		8620447076019426173,
		15531630841755893066,
		13596835729947908395,
		10023107229061009484,
		3220318520580597111,
	}
	benchResElement12.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.mulFIPS(&x)
	}
}

func BenchmarkMulNoCarryELEMENT12(b *testing.B) {
	x := Element12{
		13819282429549430712,
		11945821257170307988,
		18364194473548453395,
		159965930876665593,
		15822911771152384576,
		10041210601779588868,
		12316334160257597868,
		8620447076019426173,
		15531630841755893066,
		13596835729947908395,
		10023107229061009484,
		3220318520580597111,
	}
	benchResElement12.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement12.mulNoCarry(&x)
	}
}
