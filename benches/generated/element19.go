// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 504951401754387889334408949005578446969223452952698775957220006427131859737089405304288931834165283466455358152923331859461941505566877328226523389343612715331004912249407991546525129428538410893873223578917853903901329599555344126455131612796031689524830578577912950757523111066397002708208384352902911795114457334338227202650352161707537665796779251756659381273803
// Code generated by goff DO NOT EDIT
// Element19 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element19 represents a field element stored on 19 words (uint64)
// Element19 are assumed to be in Montgomery form in all methods
type Element19 [19]uint64

// Element19Limbs number of 64 bits words needed to represent Element19
const Element19Limbs = 19

// Element19Bits number bits needed to represent Element19
const Element19Bits = 1215

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element19) SetUint64(v uint64) *Element19 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element19) Set(x *Element19) *Element19 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	return z
}

// SetZero z = 0
func (z *Element19) SetZero() *Element19 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element19) SetOne() *Element19 {
	z[0] = 1420062060043236970
	z[1] = 7016542013867628344
	z[2] = 8803829370058033008
	z[3] = 18321701602594760775
	z[4] = 14811145229706214380
	z[5] = 4467877603666833486
	z[6] = 8122176734951936305
	z[7] = 14193314804072065631
	z[8] = 12106656031890925736
	z[9] = 11212266689386748396
	z[10] = 2916980915461267680
	z[11] = 15405679249389206405
	z[12] = 2106389389767651066
	z[13] = 6351466809483749176
	z[14] = 7925663234066494523
	z[15] = 9341333790398459188
	z[16] = 3486300011899741451
	z[17] = 6934581992916768995
	z[18] = 1937599417952182510
	return z
}

// Neg z = q - x
func (z *Element19) Neg(x *Element19) *Element19 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(17736713043687933131, x[0], 0)
	z[1], borrow = bits.Sub64(14938473066775737443, x[1], borrow)
	z[2], borrow = bits.Sub64(4821457351825759303, x[2], borrow)
	z[3], borrow = bits.Sub64(9285893272412171228, x[3], borrow)
	z[4], borrow = bits.Sub64(11041171458856444425, x[4], borrow)
	z[5], borrow = bits.Sub64(6989433235021359064, x[5], borrow)
	z[6], borrow = bits.Sub64(5162283669378807655, x[6], borrow)
	z[7], borrow = bits.Sub64(11350086671673518800, x[7], borrow)
	z[8], borrow = bits.Sub64(12393416057764088747, x[8], borrow)
	z[9], borrow = bits.Sub64(12840610729016177417, x[9], borrow)
	z[10], borrow = bits.Sub64(7764881579124141967, x[10], borrow)
	z[11], borrow = bits.Sub64(10743904449014948413, x[11], borrow)
	z[12], borrow = bits.Sub64(17393549378825726082, x[12], borrow)
	z[13], borrow = bits.Sub64(6047638632112901219, x[13], borrow)
	z[14], borrow = bits.Sub64(14483912456676304354, x[14], borrow)
	z[15], borrow = bits.Sub64(4552705141655546213, x[15], borrow)
	z[16], borrow = bits.Sub64(7480222030904905082, x[16], borrow)
	z[17], borrow = bits.Sub64(14979453077251167118, x[17], borrow)
	z[18], _ = bits.Sub64(8254572327878684552, x[18], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element19) Div(x, y *Element19) *Element19 {
	var yInv Element19
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element19) Equal(x *Element19) bool {
	return (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element19) IsZero() bool {
	return (z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element19ModulusBigInt big.Int
var onceelement19Modulus sync.Once

func element19ModulusBigInt() *big.Int {
	onceelement19Modulus.Do(func() {
		_element19ModulusBigInt.SetString("504951401754387889334408949005578446969223452952698775957220006427131859737089405304288931834165283466455358152923331859461941505566877328226523389343612715331004912249407991546525129428538410893873223578917853903901329599555344126455131612796031689524830578577912950757523111066397002708208384352902911795114457334338227202650352161707537665796779251756659381273803", 10)
	})
	return &_element19ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element19) Inverse(x *Element19) *Element19 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element19ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element19) SetRandom() *Element19 {
	bytes := make([]byte, 152)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[16] = binary.BigEndian.Uint64(bytes[128:136])
	z[17] = binary.BigEndian.Uint64(bytes[136:144])
	z[18] = binary.BigEndian.Uint64(bytes[144:152])
	z[18] %= 8254572327878684552

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element19) Add(x, y *Element19) *Element19 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], carry = bits.Sub64(z[1], 14938473066775737443, carry)
		z[2], carry = bits.Sub64(z[2], 4821457351825759303, carry)
		z[3], carry = bits.Sub64(z[3], 9285893272412171228, carry)
		z[4], carry = bits.Sub64(z[4], 11041171458856444425, carry)
		z[5], carry = bits.Sub64(z[5], 6989433235021359064, carry)
		z[6], carry = bits.Sub64(z[6], 5162283669378807655, carry)
		z[7], carry = bits.Sub64(z[7], 11350086671673518800, carry)
		z[8], carry = bits.Sub64(z[8], 12393416057764088747, carry)
		z[9], carry = bits.Sub64(z[9], 12840610729016177417, carry)
		z[10], carry = bits.Sub64(z[10], 7764881579124141967, carry)
		z[11], carry = bits.Sub64(z[11], 10743904449014948413, carry)
		z[12], carry = bits.Sub64(z[12], 17393549378825726082, carry)
		z[13], carry = bits.Sub64(z[13], 6047638632112901219, carry)
		z[14], carry = bits.Sub64(z[14], 14483912456676304354, carry)
		z[15], carry = bits.Sub64(z[15], 4552705141655546213, carry)
		z[16], carry = bits.Sub64(z[16], 7480222030904905082, carry)
		z[17], carry = bits.Sub64(z[17], 14979453077251167118, carry)
		z[18], carry = bits.Sub64(z[18], 8254572327878684552, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element19) AddAssign(x *Element19) *Element19 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], carry = bits.Sub64(z[1], 14938473066775737443, carry)
		z[2], carry = bits.Sub64(z[2], 4821457351825759303, carry)
		z[3], carry = bits.Sub64(z[3], 9285893272412171228, carry)
		z[4], carry = bits.Sub64(z[4], 11041171458856444425, carry)
		z[5], carry = bits.Sub64(z[5], 6989433235021359064, carry)
		z[6], carry = bits.Sub64(z[6], 5162283669378807655, carry)
		z[7], carry = bits.Sub64(z[7], 11350086671673518800, carry)
		z[8], carry = bits.Sub64(z[8], 12393416057764088747, carry)
		z[9], carry = bits.Sub64(z[9], 12840610729016177417, carry)
		z[10], carry = bits.Sub64(z[10], 7764881579124141967, carry)
		z[11], carry = bits.Sub64(z[11], 10743904449014948413, carry)
		z[12], carry = bits.Sub64(z[12], 17393549378825726082, carry)
		z[13], carry = bits.Sub64(z[13], 6047638632112901219, carry)
		z[14], carry = bits.Sub64(z[14], 14483912456676304354, carry)
		z[15], carry = bits.Sub64(z[15], 4552705141655546213, carry)
		z[16], carry = bits.Sub64(z[16], 7480222030904905082, carry)
		z[17], carry = bits.Sub64(z[17], 14979453077251167118, carry)
		z[18], carry = bits.Sub64(z[18], 8254572327878684552, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element19) Double(x *Element19) *Element19 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], carry = bits.Sub64(z[1], 14938473066775737443, carry)
		z[2], carry = bits.Sub64(z[2], 4821457351825759303, carry)
		z[3], carry = bits.Sub64(z[3], 9285893272412171228, carry)
		z[4], carry = bits.Sub64(z[4], 11041171458856444425, carry)
		z[5], carry = bits.Sub64(z[5], 6989433235021359064, carry)
		z[6], carry = bits.Sub64(z[6], 5162283669378807655, carry)
		z[7], carry = bits.Sub64(z[7], 11350086671673518800, carry)
		z[8], carry = bits.Sub64(z[8], 12393416057764088747, carry)
		z[9], carry = bits.Sub64(z[9], 12840610729016177417, carry)
		z[10], carry = bits.Sub64(z[10], 7764881579124141967, carry)
		z[11], carry = bits.Sub64(z[11], 10743904449014948413, carry)
		z[12], carry = bits.Sub64(z[12], 17393549378825726082, carry)
		z[13], carry = bits.Sub64(z[13], 6047638632112901219, carry)
		z[14], carry = bits.Sub64(z[14], 14483912456676304354, carry)
		z[15], carry = bits.Sub64(z[15], 4552705141655546213, carry)
		z[16], carry = bits.Sub64(z[16], 7480222030904905082, carry)
		z[17], carry = bits.Sub64(z[17], 14979453077251167118, carry)
		z[18], carry = bits.Sub64(z[18], 8254572327878684552, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element19) Sub(x, y *Element19) *Element19 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17736713043687933131, 0)
		z[1], c = bits.Add64(z[1], 14938473066775737443, c)
		z[2], c = bits.Add64(z[2], 4821457351825759303, c)
		z[3], c = bits.Add64(z[3], 9285893272412171228, c)
		z[4], c = bits.Add64(z[4], 11041171458856444425, c)
		z[5], c = bits.Add64(z[5], 6989433235021359064, c)
		z[6], c = bits.Add64(z[6], 5162283669378807655, c)
		z[7], c = bits.Add64(z[7], 11350086671673518800, c)
		z[8], c = bits.Add64(z[8], 12393416057764088747, c)
		z[9], c = bits.Add64(z[9], 12840610729016177417, c)
		z[10], c = bits.Add64(z[10], 7764881579124141967, c)
		z[11], c = bits.Add64(z[11], 10743904449014948413, c)
		z[12], c = bits.Add64(z[12], 17393549378825726082, c)
		z[13], c = bits.Add64(z[13], 6047638632112901219, c)
		z[14], c = bits.Add64(z[14], 14483912456676304354, c)
		z[15], c = bits.Add64(z[15], 4552705141655546213, c)
		z[16], c = bits.Add64(z[16], 7480222030904905082, c)
		z[17], c = bits.Add64(z[17], 14979453077251167118, c)
		z[18], _ = bits.Add64(z[18], 8254572327878684552, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element19) SubAssign(x *Element19) *Element19 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17736713043687933131, 0)
		z[1], c = bits.Add64(z[1], 14938473066775737443, c)
		z[2], c = bits.Add64(z[2], 4821457351825759303, c)
		z[3], c = bits.Add64(z[3], 9285893272412171228, c)
		z[4], c = bits.Add64(z[4], 11041171458856444425, c)
		z[5], c = bits.Add64(z[5], 6989433235021359064, c)
		z[6], c = bits.Add64(z[6], 5162283669378807655, c)
		z[7], c = bits.Add64(z[7], 11350086671673518800, c)
		z[8], c = bits.Add64(z[8], 12393416057764088747, c)
		z[9], c = bits.Add64(z[9], 12840610729016177417, c)
		z[10], c = bits.Add64(z[10], 7764881579124141967, c)
		z[11], c = bits.Add64(z[11], 10743904449014948413, c)
		z[12], c = bits.Add64(z[12], 17393549378825726082, c)
		z[13], c = bits.Add64(z[13], 6047638632112901219, c)
		z[14], c = bits.Add64(z[14], 14483912456676304354, c)
		z[15], c = bits.Add64(z[15], 4552705141655546213, c)
		z[16], c = bits.Add64(z[16], 7480222030904905082, c)
		z[17], c = bits.Add64(z[17], 14979453077251167118, c)
		z[18], _ = bits.Add64(z[18], 8254572327878684552, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element19) Exp(x Element19, exponent ...uint64) *Element19 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element19) FromMont() *Element19 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9182395569017405213
		C := madd0(m, 17736713043687933131, z[0])
		C, z[0] = madd2(m, 14938473066775737443, z[1], C)
		C, z[1] = madd2(m, 4821457351825759303, z[2], C)
		C, z[2] = madd2(m, 9285893272412171228, z[3], C)
		C, z[3] = madd2(m, 11041171458856444425, z[4], C)
		C, z[4] = madd2(m, 6989433235021359064, z[5], C)
		C, z[5] = madd2(m, 5162283669378807655, z[6], C)
		C, z[6] = madd2(m, 11350086671673518800, z[7], C)
		C, z[7] = madd2(m, 12393416057764088747, z[8], C)
		C, z[8] = madd2(m, 12840610729016177417, z[9], C)
		C, z[9] = madd2(m, 7764881579124141967, z[10], C)
		C, z[10] = madd2(m, 10743904449014948413, z[11], C)
		C, z[11] = madd2(m, 17393549378825726082, z[12], C)
		C, z[12] = madd2(m, 6047638632112901219, z[13], C)
		C, z[13] = madd2(m, 14483912456676304354, z[14], C)
		C, z[14] = madd2(m, 4552705141655546213, z[15], C)
		C, z[15] = madd2(m, 7480222030904905082, z[16], C)
		C, z[16] = madd2(m, 14979453077251167118, z[17], C)
		C, z[17] = madd2(m, 8254572327878684552, z[18], C)
		z[18] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element19) ToMont() *Element19 {
	var rSquare = Element19{
		4176426580070942500,
		5905402742398549213,
		2445945865582017462,
		7645049580950497431,
		5829241925994584888,
		4635339629273043771,
		15280171640543516,
		9459781970260176901,
		8331251283992864726,
		4032879815322938834,
		55683398817118933,
		2447720312490998263,
		6301236801721937060,
		10573517185258600090,
		10062915165671851795,
		2905089618744230783,
		2001068806072681158,
		2641363644560609854,
		1297125278488584410,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element19) ToRegular() Element19 {
	return *z.FromMont()
}

// String returns the string form of an Element19 in Montgomery form
func (z *Element19) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element19) ToBigInt(res *big.Int) *big.Int {
	bits := (*[19]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element19) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[19]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element19) SetBigInt(v *big.Int) *Element19 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element19ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element19) SetString(s string) *Element19 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element19.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element19) Mul(x, y *Element19) *Element19 {

	var t [20]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)

	if t[19] != 0 {
		// we need to reduce, we have a result on 20 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(t[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(t[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(t[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(t[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(t[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(t[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(t[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(t[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(t[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(t[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(t[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(t[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(t[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(t[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(t[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(t[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(t[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(t[18], 8254572327878684552, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element19) MulAssign(x *Element19) *Element19 {

	var t [20]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9182395569017405213

	// -----------------------------------
	// Second loop
	C = madd0(m, 17736713043687933131, t[0])

	C, t[0] = madd2(m, 14938473066775737443, t[1], C)

	C, t[1] = madd2(m, 4821457351825759303, t[2], C)

	C, t[2] = madd2(m, 9285893272412171228, t[3], C)

	C, t[3] = madd2(m, 11041171458856444425, t[4], C)

	C, t[4] = madd2(m, 6989433235021359064, t[5], C)

	C, t[5] = madd2(m, 5162283669378807655, t[6], C)

	C, t[6] = madd2(m, 11350086671673518800, t[7], C)

	C, t[7] = madd2(m, 12393416057764088747, t[8], C)

	C, t[8] = madd2(m, 12840610729016177417, t[9], C)

	C, t[9] = madd2(m, 7764881579124141967, t[10], C)

	C, t[10] = madd2(m, 10743904449014948413, t[11], C)

	C, t[11] = madd2(m, 17393549378825726082, t[12], C)

	C, t[12] = madd2(m, 6047638632112901219, t[13], C)

	C, t[13] = madd2(m, 14483912456676304354, t[14], C)

	C, t[14] = madd2(m, 4552705141655546213, t[15], C)

	C, t[15] = madd2(m, 7480222030904905082, t[16], C)

	C, t[16] = madd2(m, 14979453077251167118, t[17], C)

	C, t[17] = madd3(m, 8254572327878684552, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)

	if t[19] != 0 {
		// we need to reduce, we have a result on 20 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(t[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(t[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(t[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(t[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(t[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(t[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(t[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(t[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(t[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(t[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(t[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(t[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(t[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(t[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(t[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(t[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(t[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(t[18], 8254572327878684552, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 8254572327878684552 || (z[18] == 8254572327878684552 && (z[17] < 14979453077251167118 || (z[17] == 14979453077251167118 && (z[16] < 7480222030904905082 || (z[16] == 7480222030904905082 && (z[15] < 4552705141655546213 || (z[15] == 4552705141655546213 && (z[14] < 14483912456676304354 || (z[14] == 14483912456676304354 && (z[13] < 6047638632112901219 || (z[13] == 6047638632112901219 && (z[12] < 17393549378825726082 || (z[12] == 17393549378825726082 && (z[11] < 10743904449014948413 || (z[11] == 10743904449014948413 && (z[10] < 7764881579124141967 || (z[10] == 7764881579124141967 && (z[9] < 12840610729016177417 || (z[9] == 12840610729016177417 && (z[8] < 12393416057764088747 || (z[8] == 12393416057764088747 && (z[7] < 11350086671673518800 || (z[7] == 11350086671673518800 && (z[6] < 5162283669378807655 || (z[6] == 5162283669378807655 && (z[5] < 6989433235021359064 || (z[5] == 6989433235021359064 && (z[4] < 11041171458856444425 || (z[4] == 11041171458856444425 && (z[3] < 9285893272412171228 || (z[3] == 9285893272412171228 && (z[2] < 4821457351825759303 || (z[2] == 4821457351825759303 && (z[1] < 14938473066775737443 || (z[1] == 14938473066775737443 && (z[0] < 17736713043687933131))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17736713043687933131, 0)
		z[1], b = bits.Sub64(z[1], 14938473066775737443, b)
		z[2], b = bits.Sub64(z[2], 4821457351825759303, b)
		z[3], b = bits.Sub64(z[3], 9285893272412171228, b)
		z[4], b = bits.Sub64(z[4], 11041171458856444425, b)
		z[5], b = bits.Sub64(z[5], 6989433235021359064, b)
		z[6], b = bits.Sub64(z[6], 5162283669378807655, b)
		z[7], b = bits.Sub64(z[7], 11350086671673518800, b)
		z[8], b = bits.Sub64(z[8], 12393416057764088747, b)
		z[9], b = bits.Sub64(z[9], 12840610729016177417, b)
		z[10], b = bits.Sub64(z[10], 7764881579124141967, b)
		z[11], b = bits.Sub64(z[11], 10743904449014948413, b)
		z[12], b = bits.Sub64(z[12], 17393549378825726082, b)
		z[13], b = bits.Sub64(z[13], 6047638632112901219, b)
		z[14], b = bits.Sub64(z[14], 14483912456676304354, b)
		z[15], b = bits.Sub64(z[15], 4552705141655546213, b)
		z[16], b = bits.Sub64(z[16], 7480222030904905082, b)
		z[17], b = bits.Sub64(z[17], 14979453077251167118, b)
		z[18], _ = bits.Sub64(z[18], 8254572327878684552, b)
	}
	return z
}

func (z *Element19) Legendre() int {
	var l Element19
	// z^((q-1)/2)
	l.Exp(*z,
		18091728558698742373,
		16692608570242644529,
		2410728675912879651,
		13866318673060861422,
		5520585729428222212,
		12718088654365455340,
		2581141834689403827,
		14898415372691535208,
		15420080065736820181,
		15643677401362864516,
		13105812826416846791,
		5371952224507474206,
		17920146726267638849,
		3023819316056450609,
		16465328265192927985,
		2276352570827773106,
		3740111015452452541,
		7489726538625583559,
		4127286163939342276,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[18] == 1937599417952182510) && (l[17] == 6934581992916768995) && (l[16] == 3486300011899741451) && (l[15] == 9341333790398459188) && (l[14] == 7925663234066494523) && (l[13] == 6351466809483749176) && (l[12] == 2106389389767651066) && (l[11] == 15405679249389206405) && (l[10] == 2916980915461267680) && (l[9] == 11212266689386748396) && (l[8] == 12106656031890925736) && (l[7] == 14193314804072065631) && (l[6] == 8122176734951936305) && (l[5] == 4467877603666833486) && (l[4] == 14811145229706214380) && (l[3] == 18321701602594760775) && (l[2] == 8803829370058033008) && (l[1] == 7016542013867628344) && (l[0] == 1420062060043236970) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element19) Sqrt(x *Element19) *Element19 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element19
	y.Exp(*x,
		18269236316204146995,
		17569676321976098072,
		1205364337956439825,
		6933159336530430711,
		2760292864714111106,
		15582416364037503478,
		1290570917344701913,
		16672579723200543412,
		7710040032868410090,
		17045210737536208066,
		6552906413208423395,
		11909348149108512911,
		18183445399988595232,
		10735281694883001112,
		8232664132596463992,
		10361548322268662361,
		11093427544581002078,
		3744863269312791779,
		2063643081969671138,
	)
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	} else {
		return nil
	}
}

// Square z = x * x mod q
func (z *Element19) Square(x *Element19) *Element19 {
	return z.Mul(x, x)
}
