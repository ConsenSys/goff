// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 483256176200215396554089030375932299253977711941633010022708942087939946307545445757830246974616155039196621470780520709297984945956389891334352689934809967517328596755511347002075013440111339248264733142272033633440333348968686325361926859558070476358516145381730028396940194308907944790191876903714884744196604886698284166875736645433167984833216590053009153658807
// Code generated by goff DO NOT EDIT
// Element19 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element19 represents a field element stored on 19 words (uint64)
// Element19 are assumed to be in Montgomery form in all methods
type Element19 [19]uint64

// Element19Limbs number of 64 bits words needed to represent Element19
const Element19Limbs = 19

// Element19Bits number bits needed to represent Element19
const Element19Bits = 1215

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element19) SetUint64(v uint64) *Element19 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element19) Set(x *Element19) *Element19 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	return z
}

// SetZero z = 0
func (z *Element19) SetZero() *Element19 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element19) SetOne() *Element19 {
	z[0] = 11021252674300272786
	z[1] = 915083139523239443
	z[2] = 2714845231112083566
	z[3] = 1778565732912978277
	z[4] = 2691285930949369151
	z[5] = 4373311636665393038
	z[6] = 12238708372228546093
	z[7] = 3532615220896560616
	z[8] = 8481042829679667904
	z[9] = 11529913749360332174
	z[10] = 8601461194725358083
	z[11] = 13137994961423901934
	z[12] = 8742570060590753209
	z[13] = 10576515396237602660
	z[14] = 14388247802859375374
	z[15] = 16922160585958751581
	z[16] = 16460432969048174138
	z[17] = 12036419777177602681
	z[18] = 2646914444643273619
	return z
}

// Neg z = q - x
func (z *Element19) Neg(x *Element19) *Element19 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(3712745699704639415, x[0], 0)
	z[1], borrow = bits.Sub64(17989202503947931894, x[1], borrow)
	z[2], borrow = bits.Sub64(7865949421298734024, x[2], borrow)
	z[3], borrow = bits.Sub64(8334089170398286669, x[3], borrow)
	z[4], borrow = bits.Sub64(17101101108234867040, x[4], borrow)
	z[5], borrow = bits.Sub64(7036716218522079288, x[5], borrow)
	z[6], borrow = bits.Sub64(12327389887595278569, x[6], borrow)
	z[7], borrow = bits.Sub64(16680436463261271307, x[7], borrow)
	z[8], borrow = bits.Sub64(14206222658869717663, x[8], borrow)
	z[9], borrow = bits.Sub64(3458415162174609720, x[9], borrow)
	z[10], borrow = bits.Sub64(14146013476346872574, x[10], borrow)
	z[11], borrow = bits.Sub64(2654374556142824840, x[11], borrow)
	z[12], borrow = bits.Sub64(14075459043414175011, x[12], borrow)
	z[13], borrow = bits.Sub64(13158486375590750285, x[13], borrow)
	z[14], borrow = bits.Sub64(2029248135425088120, x[14], borrow)
	z[15], borrow = bits.Sub64(9985663780730175825, x[15], borrow)
	z[16], borrow = bits.Sub64(993155552330688738, x[16], borrow)
	z[17], borrow = bits.Sub64(3205162148265974467, x[17], borrow)
	z[18], _ = bits.Sub64(7899914814533138998, x[18], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element19) Div(x, y *Element19) *Element19 {
	var yInv Element19
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element19) Equal(x *Element19) bool {
	return (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element19) IsZero() bool {
	return (z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element19ModulusBigInt big.Int
var onceelement19Modulus sync.Once

func element19ModulusBigInt() *big.Int {
	onceelement19Modulus.Do(func() {
		_element19ModulusBigInt.SetString("483256176200215396554089030375932299253977711941633010022708942087939946307545445757830246974616155039196621470780520709297984945956389891334352689934809967517328596755511347002075013440111339248264733142272033633440333348968686325361926859558070476358516145381730028396940194308907944790191876903714884744196604886698284166875736645433167984833216590053009153658807", 10)
	})
	return &_element19ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element19) Inverse(x *Element19) *Element19 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element19ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element19) SetRandom() *Element19 {
	bytes := make([]byte, 152)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[16] = binary.BigEndian.Uint64(bytes[128:136])
	z[17] = binary.BigEndian.Uint64(bytes[136:144])
	z[18] = binary.BigEndian.Uint64(bytes[144:152])
	z[18] %= 7899914814533138998

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element19) Add(x, y *Element19) *Element19 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], carry = bits.Sub64(z[1], 17989202503947931894, carry)
		z[2], carry = bits.Sub64(z[2], 7865949421298734024, carry)
		z[3], carry = bits.Sub64(z[3], 8334089170398286669, carry)
		z[4], carry = bits.Sub64(z[4], 17101101108234867040, carry)
		z[5], carry = bits.Sub64(z[5], 7036716218522079288, carry)
		z[6], carry = bits.Sub64(z[6], 12327389887595278569, carry)
		z[7], carry = bits.Sub64(z[7], 16680436463261271307, carry)
		z[8], carry = bits.Sub64(z[8], 14206222658869717663, carry)
		z[9], carry = bits.Sub64(z[9], 3458415162174609720, carry)
		z[10], carry = bits.Sub64(z[10], 14146013476346872574, carry)
		z[11], carry = bits.Sub64(z[11], 2654374556142824840, carry)
		z[12], carry = bits.Sub64(z[12], 14075459043414175011, carry)
		z[13], carry = bits.Sub64(z[13], 13158486375590750285, carry)
		z[14], carry = bits.Sub64(z[14], 2029248135425088120, carry)
		z[15], carry = bits.Sub64(z[15], 9985663780730175825, carry)
		z[16], carry = bits.Sub64(z[16], 993155552330688738, carry)
		z[17], carry = bits.Sub64(z[17], 3205162148265974467, carry)
		z[18], carry = bits.Sub64(z[18], 7899914814533138998, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element19) AddAssign(x *Element19) *Element19 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], carry = bits.Sub64(z[1], 17989202503947931894, carry)
		z[2], carry = bits.Sub64(z[2], 7865949421298734024, carry)
		z[3], carry = bits.Sub64(z[3], 8334089170398286669, carry)
		z[4], carry = bits.Sub64(z[4], 17101101108234867040, carry)
		z[5], carry = bits.Sub64(z[5], 7036716218522079288, carry)
		z[6], carry = bits.Sub64(z[6], 12327389887595278569, carry)
		z[7], carry = bits.Sub64(z[7], 16680436463261271307, carry)
		z[8], carry = bits.Sub64(z[8], 14206222658869717663, carry)
		z[9], carry = bits.Sub64(z[9], 3458415162174609720, carry)
		z[10], carry = bits.Sub64(z[10], 14146013476346872574, carry)
		z[11], carry = bits.Sub64(z[11], 2654374556142824840, carry)
		z[12], carry = bits.Sub64(z[12], 14075459043414175011, carry)
		z[13], carry = bits.Sub64(z[13], 13158486375590750285, carry)
		z[14], carry = bits.Sub64(z[14], 2029248135425088120, carry)
		z[15], carry = bits.Sub64(z[15], 9985663780730175825, carry)
		z[16], carry = bits.Sub64(z[16], 993155552330688738, carry)
		z[17], carry = bits.Sub64(z[17], 3205162148265974467, carry)
		z[18], carry = bits.Sub64(z[18], 7899914814533138998, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element19) Double(x *Element19) *Element19 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], carry = bits.Sub64(z[1], 17989202503947931894, carry)
		z[2], carry = bits.Sub64(z[2], 7865949421298734024, carry)
		z[3], carry = bits.Sub64(z[3], 8334089170398286669, carry)
		z[4], carry = bits.Sub64(z[4], 17101101108234867040, carry)
		z[5], carry = bits.Sub64(z[5], 7036716218522079288, carry)
		z[6], carry = bits.Sub64(z[6], 12327389887595278569, carry)
		z[7], carry = bits.Sub64(z[7], 16680436463261271307, carry)
		z[8], carry = bits.Sub64(z[8], 14206222658869717663, carry)
		z[9], carry = bits.Sub64(z[9], 3458415162174609720, carry)
		z[10], carry = bits.Sub64(z[10], 14146013476346872574, carry)
		z[11], carry = bits.Sub64(z[11], 2654374556142824840, carry)
		z[12], carry = bits.Sub64(z[12], 14075459043414175011, carry)
		z[13], carry = bits.Sub64(z[13], 13158486375590750285, carry)
		z[14], carry = bits.Sub64(z[14], 2029248135425088120, carry)
		z[15], carry = bits.Sub64(z[15], 9985663780730175825, carry)
		z[16], carry = bits.Sub64(z[16], 993155552330688738, carry)
		z[17], carry = bits.Sub64(z[17], 3205162148265974467, carry)
		z[18], carry = bits.Sub64(z[18], 7899914814533138998, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element19) Sub(x, y *Element19) *Element19 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 3712745699704639415, 0)
		z[1], c = bits.Add64(z[1], 17989202503947931894, c)
		z[2], c = bits.Add64(z[2], 7865949421298734024, c)
		z[3], c = bits.Add64(z[3], 8334089170398286669, c)
		z[4], c = bits.Add64(z[4], 17101101108234867040, c)
		z[5], c = bits.Add64(z[5], 7036716218522079288, c)
		z[6], c = bits.Add64(z[6], 12327389887595278569, c)
		z[7], c = bits.Add64(z[7], 16680436463261271307, c)
		z[8], c = bits.Add64(z[8], 14206222658869717663, c)
		z[9], c = bits.Add64(z[9], 3458415162174609720, c)
		z[10], c = bits.Add64(z[10], 14146013476346872574, c)
		z[11], c = bits.Add64(z[11], 2654374556142824840, c)
		z[12], c = bits.Add64(z[12], 14075459043414175011, c)
		z[13], c = bits.Add64(z[13], 13158486375590750285, c)
		z[14], c = bits.Add64(z[14], 2029248135425088120, c)
		z[15], c = bits.Add64(z[15], 9985663780730175825, c)
		z[16], c = bits.Add64(z[16], 993155552330688738, c)
		z[17], c = bits.Add64(z[17], 3205162148265974467, c)
		z[18], _ = bits.Add64(z[18], 7899914814533138998, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element19) SubAssign(x *Element19) *Element19 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 3712745699704639415, 0)
		z[1], c = bits.Add64(z[1], 17989202503947931894, c)
		z[2], c = bits.Add64(z[2], 7865949421298734024, c)
		z[3], c = bits.Add64(z[3], 8334089170398286669, c)
		z[4], c = bits.Add64(z[4], 17101101108234867040, c)
		z[5], c = bits.Add64(z[5], 7036716218522079288, c)
		z[6], c = bits.Add64(z[6], 12327389887595278569, c)
		z[7], c = bits.Add64(z[7], 16680436463261271307, c)
		z[8], c = bits.Add64(z[8], 14206222658869717663, c)
		z[9], c = bits.Add64(z[9], 3458415162174609720, c)
		z[10], c = bits.Add64(z[10], 14146013476346872574, c)
		z[11], c = bits.Add64(z[11], 2654374556142824840, c)
		z[12], c = bits.Add64(z[12], 14075459043414175011, c)
		z[13], c = bits.Add64(z[13], 13158486375590750285, c)
		z[14], c = bits.Add64(z[14], 2029248135425088120, c)
		z[15], c = bits.Add64(z[15], 9985663780730175825, c)
		z[16], c = bits.Add64(z[16], 993155552330688738, c)
		z[17], c = bits.Add64(z[17], 3205162148265974467, c)
		z[18], _ = bits.Add64(z[18], 7899914814533138998, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element19) Exp(x Element19, exponent ...uint64) *Element19 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element19) FromMont() *Element19 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 4559743196822241785
		C := madd0(m, 3712745699704639415, z[0])
		C, z[0] = madd2(m, 17989202503947931894, z[1], C)
		C, z[1] = madd2(m, 7865949421298734024, z[2], C)
		C, z[2] = madd2(m, 8334089170398286669, z[3], C)
		C, z[3] = madd2(m, 17101101108234867040, z[4], C)
		C, z[4] = madd2(m, 7036716218522079288, z[5], C)
		C, z[5] = madd2(m, 12327389887595278569, z[6], C)
		C, z[6] = madd2(m, 16680436463261271307, z[7], C)
		C, z[7] = madd2(m, 14206222658869717663, z[8], C)
		C, z[8] = madd2(m, 3458415162174609720, z[9], C)
		C, z[9] = madd2(m, 14146013476346872574, z[10], C)
		C, z[10] = madd2(m, 2654374556142824840, z[11], C)
		C, z[11] = madd2(m, 14075459043414175011, z[12], C)
		C, z[12] = madd2(m, 13158486375590750285, z[13], C)
		C, z[13] = madd2(m, 2029248135425088120, z[14], C)
		C, z[14] = madd2(m, 9985663780730175825, z[15], C)
		C, z[15] = madd2(m, 993155552330688738, z[16], C)
		C, z[16] = madd2(m, 3205162148265974467, z[17], C)
		C, z[17] = madd2(m, 7899914814533138998, z[18], C)
		z[18] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element19) ToMont() *Element19 {
	var rSquare = Element19{
		2714533561708075774,
		10999101228990424216,
		4217882542210371075,
		16099761210580970942,
		11909812170479994681,
		9978462014159790534,
		17978103078075329829,
		6733411439559520994,
		14406828827194732665,
		13900066385206318642,
		14180359956154555478,
		8940273518318947673,
		18345102242198225636,
		9276587575071019590,
		973334266078283980,
		12636117952249912859,
		10773578358533466807,
		7647630860199932922,
		819626365441761428,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element19) ToRegular() Element19 {
	return *z.FromMont()
}

// String returns the string form of an Element19 in Montgomery form
func (z *Element19) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element19) ToBigInt(res *big.Int) *big.Int {
	bits := (*[19]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element19) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[19]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element19) SetBigInt(v *big.Int) *Element19 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element19ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element19) SetString(s string) *Element19 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element19.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element19) Mul(x, y *Element19) *Element19 {

	var t [20]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)

	if t[19] != 0 {
		// we need to reduce, we have a result on 20 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(t[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(t[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(t[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(t[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(t[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(t[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(t[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(t[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(t[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(t[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(t[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(t[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(t[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(t[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(t[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(t[16], 993155552330688738, b)
		z[17], b = bits.Sub64(t[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(t[18], 7899914814533138998, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element19) MulAssign(x *Element19) *Element19 {

	var t [20]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 4559743196822241785

	// -----------------------------------
	// Second loop
	C = madd0(m, 3712745699704639415, t[0])

	C, t[0] = madd2(m, 17989202503947931894, t[1], C)

	C, t[1] = madd2(m, 7865949421298734024, t[2], C)

	C, t[2] = madd2(m, 8334089170398286669, t[3], C)

	C, t[3] = madd2(m, 17101101108234867040, t[4], C)

	C, t[4] = madd2(m, 7036716218522079288, t[5], C)

	C, t[5] = madd2(m, 12327389887595278569, t[6], C)

	C, t[6] = madd2(m, 16680436463261271307, t[7], C)

	C, t[7] = madd2(m, 14206222658869717663, t[8], C)

	C, t[8] = madd2(m, 3458415162174609720, t[9], C)

	C, t[9] = madd2(m, 14146013476346872574, t[10], C)

	C, t[10] = madd2(m, 2654374556142824840, t[11], C)

	C, t[11] = madd2(m, 14075459043414175011, t[12], C)

	C, t[12] = madd2(m, 13158486375590750285, t[13], C)

	C, t[13] = madd2(m, 2029248135425088120, t[14], C)

	C, t[14] = madd2(m, 9985663780730175825, t[15], C)

	C, t[15] = madd2(m, 993155552330688738, t[16], C)

	C, t[16] = madd2(m, 3205162148265974467, t[17], C)

	C, t[17] = madd3(m, 7899914814533138998, t[18], C, t[19])

	t[18], t[19] = bits.Add64(D, C, 0)

	if t[19] != 0 {
		// we need to reduce, we have a result on 20 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(t[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(t[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(t[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(t[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(t[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(t[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(t[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(t[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(t[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(t[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(t[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(t[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(t[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(t[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(t[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(t[16], 993155552330688738, b)
		z[17], b = bits.Sub64(t[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(t[18], 7899914814533138998, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[18] < 7899914814533138998 || (z[18] == 7899914814533138998 && (z[17] < 3205162148265974467 || (z[17] == 3205162148265974467 && (z[16] < 993155552330688738 || (z[16] == 993155552330688738 && (z[15] < 9985663780730175825 || (z[15] == 9985663780730175825 && (z[14] < 2029248135425088120 || (z[14] == 2029248135425088120 && (z[13] < 13158486375590750285 || (z[13] == 13158486375590750285 && (z[12] < 14075459043414175011 || (z[12] == 14075459043414175011 && (z[11] < 2654374556142824840 || (z[11] == 2654374556142824840 && (z[10] < 14146013476346872574 || (z[10] == 14146013476346872574 && (z[9] < 3458415162174609720 || (z[9] == 3458415162174609720 && (z[8] < 14206222658869717663 || (z[8] == 14206222658869717663 && (z[7] < 16680436463261271307 || (z[7] == 16680436463261271307 && (z[6] < 12327389887595278569 || (z[6] == 12327389887595278569 && (z[5] < 7036716218522079288 || (z[5] == 7036716218522079288 && (z[4] < 17101101108234867040 || (z[4] == 17101101108234867040 && (z[3] < 8334089170398286669 || (z[3] == 8334089170398286669 && (z[2] < 7865949421298734024 || (z[2] == 7865949421298734024 && (z[1] < 17989202503947931894 || (z[1] == 17989202503947931894 && (z[0] < 3712745699704639415))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3712745699704639415, 0)
		z[1], b = bits.Sub64(z[1], 17989202503947931894, b)
		z[2], b = bits.Sub64(z[2], 7865949421298734024, b)
		z[3], b = bits.Sub64(z[3], 8334089170398286669, b)
		z[4], b = bits.Sub64(z[4], 17101101108234867040, b)
		z[5], b = bits.Sub64(z[5], 7036716218522079288, b)
		z[6], b = bits.Sub64(z[6], 12327389887595278569, b)
		z[7], b = bits.Sub64(z[7], 16680436463261271307, b)
		z[8], b = bits.Sub64(z[8], 14206222658869717663, b)
		z[9], b = bits.Sub64(z[9], 3458415162174609720, b)
		z[10], b = bits.Sub64(z[10], 14146013476346872574, b)
		z[11], b = bits.Sub64(z[11], 2654374556142824840, b)
		z[12], b = bits.Sub64(z[12], 14075459043414175011, b)
		z[13], b = bits.Sub64(z[13], 13158486375590750285, b)
		z[14], b = bits.Sub64(z[14], 2029248135425088120, b)
		z[15], b = bits.Sub64(z[15], 9985663780730175825, b)
		z[16], b = bits.Sub64(z[16], 993155552330688738, b)
		z[17], b = bits.Sub64(z[17], 3205162148265974467, b)
		z[18], _ = bits.Sub64(z[18], 7899914814533138998, b)
	}
	return z
}

func (z *Element19) Legendre() int {
	var l Element19
	// z^((p-1)/2)
	l.Exp(*z,
		1856372849852319707,
		8994601251973965947,
		13156346747504142820,
		4167044585199143334,
		8550550554117433520,
		12741730146115815452,
		15387066980652415092,
		17563590268485411461,
		7103111329434858831,
		1729207581087304860,
		7073006738173436287,
		10550559314926188228,
		16261101558561863313,
		6579243187795375142,
		10237996104567319868,
		4992831890365087912,
		9719949813020120177,
		1602581074132987233,
		3949957407266569499,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[18] == 2646914444643273619) && (l[17] == 12036419777177602681) && (l[16] == 16460432969048174138) && (l[15] == 16922160585958751581) && (l[14] == 14388247802859375374) && (l[13] == 10576515396237602660) && (l[12] == 8742570060590753209) && (l[11] == 13137994961423901934) && (l[10] == 8601461194725358083) && (l[9] == 11529913749360332174) && (l[8] == 8481042829679667904) && (l[7] == 3532615220896560616) && (l[6] == 12238708372228546093) && (l[5] == 4373311636665393038) && (l[4] == 2691285930949369151) && (l[3] == 1778565732912978277) && (l[2] == 2714845231112083566) && (l[1] == 915083139523239443) && (l[0] == 11021252674300272786) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element19) Sqrt(x *Element19) *Element19 {
	switch x.Legendre() {
	case -1:
		return nil
	case 0:
		return z.SetZero()
	case 1:
		break
	}
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	return z.Exp(*x,
		10151558461780935662,
		4497300625986982973,
		6578173373752071410,
		2083522292599571667,
		4275275277058716760,
		6370865073057907726,
		16916905527180983354,
		18005167171097481538,
		3551555664717429415,
		10087975827398428238,
		3536503369086718143,
		14498651694317869922,
		8130550779280931656,
		3289621593897687571,
		5118998052283659934,
		11719787982037319764,
		14083346943364835896,
		10024662573921269424,
		1974978703633284749,
	)
}

// Square z = x * x mod q
func (z *Element19) Square(x *Element19) *Element19 {
	return z.Mul(x, x)
}
