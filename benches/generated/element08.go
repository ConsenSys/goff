// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 5315459662172859011258220130419388233248577625113445072854081173003977737777780266814780190928035591734755376868171945632522814298874106204538733428652143
// Code generated by goff DO NOT EDIT
// Element08 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"

	"unsafe"
)

// Element08 represents a field element stored on 8 words (uint64)
// Element08 are assumed to be in Montgomery form in all methods
type Element08 [8]uint64

// Element08Limbs number of 64 bits words needed to represent Element08
const Element08Limbs = 8

// Element08Bits number bits needed to represent Element08
const Element08Bits = 511

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element08) SetUint64(v uint64) *Element08 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element08) Set(x *Element08) *Element08 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	return z
}

// SetZero z = 0
func (z *Element08) SetZero() *Element08 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element08) SetOne() *Element08 {
	z[0] = 16715235361966165794
	z[1] = 11924772385527823323
	z[2] = 283279189771878724
	z[3] = 11721449223954634468
	z[4] = 4563639030595939639
	z[5] = 2356365849196755163
	z[6] = 14734159202133343270
	z[7] = 3820501732744102444
	return z
}

// Neg z = q - x
func (z *Element08) Neg(x *Element08) *Element08 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(865754355871692911, x[0], 0)
	z[1], borrow = bits.Sub64(12484357880945639954, x[1], borrow)
	z[2], borrow = bits.Sub64(18305104478823612253, x[2], borrow)
	z[3], borrow = bits.Sub64(3362647424877458573, x[3], borrow)
	z[4], borrow = bits.Sub64(6941552521556805988, x[4], borrow)
	z[5], borrow = bits.Sub64(17268561149111174034, x[5], borrow)
	z[6], borrow = bits.Sub64(11079664472642879980, x[6], borrow)
	z[7], _ = bits.Sub64(7313121170482724585, x[7], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element08) Div(x, y *Element08) *Element08 {
	var yInv Element08
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element08) Equal(x *Element08) bool {
	return (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element08) IsZero() bool {
	return (z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element08ModulusBigInt big.Int
var onceelement08Modulus sync.Once

func element08ModulusBigInt() *big.Int {
	onceelement08Modulus.Do(func() {
		_element08ModulusBigInt.SetString("5315459662172859011258220130419388233248577625113445072854081173003977737777780266814780190928035591734755376868171945632522814298874106204538733428652143", 10)
	})
	return &_element08ModulusBigInt
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element08) Inverse(x *Element08) *Element08 {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element08{
		865754355871692911,
		12484357880945639954,
		18305104478823612253,
		3362647424877458573,
		6941552521556805988,
		17268561149111174034,
		11079664472642879980,
		7313121170482724585,
	}

	// initialize s = r^2
	var s = Element08{
		7096044857742341599,
		11990561913609461620,
		2463126571075012904,
		16389963021016189355,
		10192019552310495211,
		1898753892622219701,
		1153841111988023036,
		3036995314535035086,
	}

	// r = 0
	r := Element08{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger, uIsOne, vIsOne bool

	for !uIsOne && !vIsOne {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[7] << 63
			v[7] >>= 1
			t = t2
			t2 = v[6] << 63
			v[6] = (v[6] >> 1) | t
			t = t2
			t2 = v[5] << 63
			v[5] = (v[5] >> 1) | t
			t = t2
			t2 = v[4] << 63
			v[4] = (v[4] >> 1) | t
			t = t2
			t2 = v[3] << 63
			v[3] = (v[3] >> 1) | t
			t = t2
			t2 = v[2] << 63
			v[2] = (v[2] >> 1) | t
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 865754355871692911, 0)
				s[1], carry = bits.Add64(s[1], 12484357880945639954, carry)
				s[2], carry = bits.Add64(s[2], 18305104478823612253, carry)
				s[3], carry = bits.Add64(s[3], 3362647424877458573, carry)
				s[4], carry = bits.Add64(s[4], 6941552521556805988, carry)
				s[5], carry = bits.Add64(s[5], 17268561149111174034, carry)
				s[6], carry = bits.Add64(s[6], 11079664472642879980, carry)
				s[7], _ = bits.Add64(s[7], 7313121170482724585, carry)

			}

			// s = s >> 1
			t2 = s[7] << 63
			s[7] >>= 1
			t = t2
			t2 = s[6] << 63
			s[6] = (s[6] >> 1) | t
			t = t2
			t2 = s[5] << 63
			s[5] = (s[5] >> 1) | t
			t = t2
			t2 = s[4] << 63
			s[4] = (s[4] >> 1) | t
			t = t2
			t2 = s[3] << 63
			s[3] = (s[3] >> 1) | t
			t = t2
			t2 = s[2] << 63
			s[2] = (s[2] >> 1) | t
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[7] << 63
			u[7] >>= 1
			t = t2
			t2 = u[6] << 63
			u[6] = (u[6] >> 1) | t
			t = t2
			t2 = u[5] << 63
			u[5] = (u[5] >> 1) | t
			t = t2
			t2 = u[4] << 63
			u[4] = (u[4] >> 1) | t
			t = t2
			t2 = u[3] << 63
			u[3] = (u[3] >> 1) | t
			t = t2
			t2 = u[2] << 63
			u[2] = (u[2] >> 1) | t
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 865754355871692911, 0)
				r[1], carry = bits.Add64(r[1], 12484357880945639954, carry)
				r[2], carry = bits.Add64(r[2], 18305104478823612253, carry)
				r[3], carry = bits.Add64(r[3], 3362647424877458573, carry)
				r[4], carry = bits.Add64(r[4], 6941552521556805988, carry)
				r[5], carry = bits.Add64(r[5], 17268561149111174034, carry)
				r[6], carry = bits.Add64(r[6], 11079664472642879980, carry)
				r[7], _ = bits.Add64(r[7], 7313121170482724585, carry)

			}

			// r = r >> 1
			t2 = r[7] << 63
			r[7] >>= 1
			t = t2
			t2 = r[6] << 63
			r[6] = (r[6] >> 1) | t
			t = t2
			t2 = r[5] << 63
			r[5] = (r[5] >> 1) | t
			t = t2
			t2 = r[4] << 63
			r[4] = (r[4] >> 1) | t
			t = t2
			t2 = r[3] << 63
			r[3] = (r[3] >> 1) | t
			t = t2
			t2 = r[2] << 63
			r[2] = (r[2] >> 1) | t
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], _ = bits.Sub64(v[7], u[7], borrow)

			// r >= s
			bigger = !(r[7] < s[7] || (r[7] == s[7] && (r[6] < s[6] || (r[6] == s[6] && (r[5] < s[5] || (r[5] == s[5] && (r[4] < s[4] || (r[4] == s[4] && (r[3] < s[3] || (r[3] == s[3] && (r[2] < s[2] || (r[2] == s[2] && (r[1] < s[1] || (r[1] == s[1] && (r[0] < s[0])))))))))))))))

			if bigger {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 865754355871692911, 0)
				s[1], carry = bits.Add64(s[1], 12484357880945639954, carry)
				s[2], carry = bits.Add64(s[2], 18305104478823612253, carry)
				s[3], carry = bits.Add64(s[3], 3362647424877458573, carry)
				s[4], carry = bits.Add64(s[4], 6941552521556805988, carry)
				s[5], carry = bits.Add64(s[5], 17268561149111174034, carry)
				s[6], carry = bits.Add64(s[6], 11079664472642879980, carry)
				s[7], _ = bits.Add64(s[7], 7313121170482724585, carry)

			}

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], _ = bits.Sub64(s[7], r[7], borrow)

		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], _ = bits.Sub64(u[7], v[7], borrow)

			// s >= r
			bigger = !(s[7] < r[7] || (s[7] == r[7] && (s[6] < r[6] || (s[6] == r[6] && (s[5] < r[5] || (s[5] == r[5] && (s[4] < r[4] || (s[4] == r[4] && (s[3] < r[3] || (s[3] == r[3] && (s[2] < r[2] || (s[2] == r[2] && (s[1] < r[1] || (s[1] == r[1] && (s[0] < r[0])))))))))))))))

			if bigger {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 865754355871692911, 0)
				r[1], carry = bits.Add64(r[1], 12484357880945639954, carry)
				r[2], carry = bits.Add64(r[2], 18305104478823612253, carry)
				r[3], carry = bits.Add64(r[3], 3362647424877458573, carry)
				r[4], carry = bits.Add64(r[4], 6941552521556805988, carry)
				r[5], carry = bits.Add64(r[5], 17268561149111174034, carry)
				r[6], carry = bits.Add64(r[6], 11079664472642879980, carry)
				r[7], _ = bits.Add64(r[7], 7313121170482724585, carry)

			}

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], _ = bits.Sub64(r[7], s[7], borrow)

		}
		uIsOne = (u[0] == 1) && (u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0
		vIsOne = (v[0] == 1) && (v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0
	}

	if uIsOne {
		z.Set(&r)
	} else {
		z.Set(&s)
	}

	return z
}

// SetRandom sets z to a random element < q
func (z *Element08) SetRandom() *Element08 {
	bytes := make([]byte, 64)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[7] %= 7313121170482724585

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element08) Add(x, y *Element08) *Element08 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], _ = bits.Add64(x[7], y[7], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element08) AddAssign(x *Element08) *Element08 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], _ = bits.Add64(z[7], x[7], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element08) Double(x *Element08) *Element08 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], _ = bits.Add64(x[7], x[7], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element08) Sub(x, y *Element08) *Element08 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 865754355871692911, 0)
		z[1], c = bits.Add64(z[1], 12484357880945639954, c)
		z[2], c = bits.Add64(z[2], 18305104478823612253, c)
		z[3], c = bits.Add64(z[3], 3362647424877458573, c)
		z[4], c = bits.Add64(z[4], 6941552521556805988, c)
		z[5], c = bits.Add64(z[5], 17268561149111174034, c)
		z[6], c = bits.Add64(z[6], 11079664472642879980, c)
		z[7], _ = bits.Add64(z[7], 7313121170482724585, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element08) SubAssign(x *Element08) *Element08 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 865754355871692911, 0)
		z[1], c = bits.Add64(z[1], 12484357880945639954, c)
		z[2], c = bits.Add64(z[2], 18305104478823612253, c)
		z[3], c = bits.Add64(z[3], 3362647424877458573, c)
		z[4], c = bits.Add64(z[4], 6941552521556805988, c)
		z[5], c = bits.Add64(z[5], 17268561149111174034, c)
		z[6], c = bits.Add64(z[6], 11079664472642879980, c)
		z[7], _ = bits.Add64(z[7], 7313121170482724585, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element08) Exp(x Element08, exponent ...uint64) *Element08 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element08) FromMont() *Element08 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13514752438810859889
		C := madd0(m, 865754355871692911, z[0])
		C, z[0] = madd2(m, 12484357880945639954, z[1], C)
		C, z[1] = madd2(m, 18305104478823612253, z[2], C)
		C, z[2] = madd2(m, 3362647424877458573, z[3], C)
		C, z[3] = madd2(m, 6941552521556805988, z[4], C)
		C, z[4] = madd2(m, 17268561149111174034, z[5], C)
		C, z[5] = madd2(m, 11079664472642879980, z[6], C)
		C, z[6] = madd2(m, 7313121170482724585, z[7], C)
		z[7] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element08) ToMont() *Element08 {
	var rSquare = Element08{
		7096044857742341599,
		11990561913609461620,
		2463126571075012904,
		16389963021016189355,
		10192019552310495211,
		1898753892622219701,
		1153841111988023036,
		3036995314535035086,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element08) ToRegular() Element08 {
	return *z.FromMont()
}

// String returns the string form of an Element08 in Montgomery form
func (z *Element08) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element08) ToBigInt(res *big.Int) *big.Int {
	bits := (*[8]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element08) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[8]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element08) SetBigInt(v *big.Int) *Element08 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element08ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element08) SetString(s string) *Element08 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element08.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element08) Mul(x, y *Element08) *Element08 {

	var t [8]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		z[7], z[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}
	return z
}

// MulAssign z = z * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element08) MulAssign(x *Element08) *Element08 {

	var t [8]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd1(v, x[6], c[1])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd1(v, x[7], c[1])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 5
		v := z[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 6
		v := z[6]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		t[7], t[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}
	{
		// round 7
		v := z[7]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 13514752438810859889
		c[2] = madd0(m, 865754355871692911, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 12484357880945639954, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 18305104478823612253, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 3362647424877458573, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 6941552521556805988, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], z[4] = madd2(m, 17268561149111174034, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], z[5] = madd2(m, 11079664472642879980, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		z[7], z[6] = madd3(m, 7313121170482724585, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[7] < 7313121170482724585 || (z[7] == 7313121170482724585 && (z[6] < 11079664472642879980 || (z[6] == 11079664472642879980 && (z[5] < 17268561149111174034 || (z[5] == 17268561149111174034 && (z[4] < 6941552521556805988 || (z[4] == 6941552521556805988 && (z[3] < 3362647424877458573 || (z[3] == 3362647424877458573 && (z[2] < 18305104478823612253 || (z[2] == 18305104478823612253 && (z[1] < 12484357880945639954 || (z[1] == 12484357880945639954 && (z[0] < 865754355871692911))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 865754355871692911, 0)
		z[1], b = bits.Sub64(z[1], 12484357880945639954, b)
		z[2], b = bits.Sub64(z[2], 18305104478823612253, b)
		z[3], b = bits.Sub64(z[3], 3362647424877458573, b)
		z[4], b = bits.Sub64(z[4], 6941552521556805988, b)
		z[5], b = bits.Sub64(z[5], 17268561149111174034, b)
		z[6], b = bits.Sub64(z[6], 11079664472642879980, b)
		z[7], _ = bits.Sub64(z[7], 7313121170482724585, b)
	}
	return z
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element08) Legendre() int {
	var l Element08
	// z^((q-1)/2)
	l.Exp(*z,
		432877177935846455,
		15465550977327595785,
		18375924276266581934,
		1681323712438729286,
		3470776260778402994,
		8634280574555587017,
		14763204273176215798,
		3656560585241362292,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[7] == 3820501732744102444) && (l[6] == 14734159202133343270) && (l[5] == 2356365849196755163) && (l[4] == 4563639030595939639) && (l[3] == 11721449223954634468) && (l[2] == 283279189771878724) && (l[1] == 11924772385527823323) && (l[0] == 16715235361966165794) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element08) Sqrt(x *Element08) *Element08 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element08
	y.Exp(*x,
		9439810625822699036,
		7732775488663797892,
		9187962138133290967,
		840661856219364643,
		10958760167243977305,
		4317140287277793508,
		7381602136588107899,
		1828280292620681146,
	)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// Square z = x * x mod q
func (z *Element08) Square(x *Element08) *Element08 {
	return z.Mul(x, x)
}
