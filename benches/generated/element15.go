// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 4116592173297103655819163866242525295668813385908227942219131714343488546741687944151204060347224204089543424317541084076721988687262329339538718176695235096452972167082247583004439596664217267009052420997298370518016022144147492209059637511240929798629208977649887494911914672365786709363
// Code generated by goff DO NOT EDIT
// Element15 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element15 represents a field element stored on 15 words (uint64)
// Element15 are assumed to be in Montgomery form in all methods
type Element15 [15]uint64

// Element15Limbs number of 64 bits words needed to represent Element15
const Element15Limbs = 15

// Element15Bits number bits needed to represent Element15
const Element15Bits = 959

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element15) SetUint64(v uint64) *Element15 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element15) Set(x *Element15) *Element15 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	return z
}

// SetZero z = 0
func (z *Element15) SetZero() *Element15 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element15) SetOne() *Element15 {
	z[0] = 15905022842062603546
	z[1] = 7594773300569521982
	z[2] = 3806829103322023309
	z[3] = 2435548496960937400
	z[4] = 6410257512161240491
	z[5] = 6377622252777429598
	z[6] = 4155500513567999875
	z[7] = 3970568230545039823
	z[8] = 18348319115716360354
	z[9] = 4332383724528653168
	z[10] = 13992897030799726277
	z[11] = 11512242683169533250
	z[12] = 16186917911291827058
	z[13] = 7097170706001440566
	z[14] = 2862285289145798728
	return z
}

// Neg z = q - x
func (z *Element15) Neg(x *Element15) *Element15 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(10494232652678249843, x[0], 0)
	z[1], borrow = bits.Sub64(5425985386570014816, x[1], borrow)
	z[2], borrow = bits.Sub64(16543329522048539961, x[2], borrow)
	z[3], borrow = bits.Sub64(8005597788374307107, x[3], borrow)
	z[4], borrow = bits.Sub64(15241615317628931370, x[4], borrow)
	z[5], borrow = bits.Sub64(6034560910466061008, x[5], borrow)
	z[6], borrow = bits.Sub64(7145621780070775870, x[6], borrow)
	z[7], borrow = bits.Sub64(16461459958437031704, x[7], borrow)
	z[8], borrow = bits.Sub64(9272584515851371438, x[8], borrow)
	z[9], borrow = bits.Sub64(7057180174590449223, x[9], borrow)
	z[10], borrow = bits.Sub64(11450295558309688477, x[10], borrow)
	z[11], borrow = bits.Sub64(12690622732124784990, x[11], borrow)
	z[12], borrow = bits.Sub64(10353285118063638086, x[12], borrow)
	z[13], borrow = bits.Sub64(14898158720708831332, x[13], borrow)
	z[14], _ = bits.Sub64(7792229392281876443, x[14], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element15) Div(x, y *Element15) *Element15 {
	var yInv Element15
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element15) Equal(x *Element15) bool {
	return (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element15) IsZero() bool {
	return (z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element15ModulusBigInt big.Int
var onceelement15Modulus sync.Once

func element15ModulusBigInt() *big.Int {
	onceelement15Modulus.Do(func() {
		_element15ModulusBigInt.SetString("4116592173297103655819163866242525295668813385908227942219131714343488546741687944151204060347224204089543424317541084076721988687262329339538718176695235096452972167082247583004439596664217267009052420997298370518016022144147492209059637511240929798629208977649887494911914672365786709363", 10)
	})
	return &_element15ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element15) Inverse(x *Element15) *Element15 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element15ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element15) SetRandom() *Element15 {
	bytes := make([]byte, 120)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[14] %= 7792229392281876443

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element15) Add(x, y *Element15) *Element15 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], carry = bits.Sub64(z[1], 5425985386570014816, carry)
		z[2], carry = bits.Sub64(z[2], 16543329522048539961, carry)
		z[3], carry = bits.Sub64(z[3], 8005597788374307107, carry)
		z[4], carry = bits.Sub64(z[4], 15241615317628931370, carry)
		z[5], carry = bits.Sub64(z[5], 6034560910466061008, carry)
		z[6], carry = bits.Sub64(z[6], 7145621780070775870, carry)
		z[7], carry = bits.Sub64(z[7], 16461459958437031704, carry)
		z[8], carry = bits.Sub64(z[8], 9272584515851371438, carry)
		z[9], carry = bits.Sub64(z[9], 7057180174590449223, carry)
		z[10], carry = bits.Sub64(z[10], 11450295558309688477, carry)
		z[11], carry = bits.Sub64(z[11], 12690622732124784990, carry)
		z[12], carry = bits.Sub64(z[12], 10353285118063638086, carry)
		z[13], carry = bits.Sub64(z[13], 14898158720708831332, carry)
		z[14], carry = bits.Sub64(z[14], 7792229392281876443, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element15) AddAssign(x *Element15) *Element15 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], carry = bits.Sub64(z[1], 5425985386570014816, carry)
		z[2], carry = bits.Sub64(z[2], 16543329522048539961, carry)
		z[3], carry = bits.Sub64(z[3], 8005597788374307107, carry)
		z[4], carry = bits.Sub64(z[4], 15241615317628931370, carry)
		z[5], carry = bits.Sub64(z[5], 6034560910466061008, carry)
		z[6], carry = bits.Sub64(z[6], 7145621780070775870, carry)
		z[7], carry = bits.Sub64(z[7], 16461459958437031704, carry)
		z[8], carry = bits.Sub64(z[8], 9272584515851371438, carry)
		z[9], carry = bits.Sub64(z[9], 7057180174590449223, carry)
		z[10], carry = bits.Sub64(z[10], 11450295558309688477, carry)
		z[11], carry = bits.Sub64(z[11], 12690622732124784990, carry)
		z[12], carry = bits.Sub64(z[12], 10353285118063638086, carry)
		z[13], carry = bits.Sub64(z[13], 14898158720708831332, carry)
		z[14], carry = bits.Sub64(z[14], 7792229392281876443, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element15) Double(x *Element15) *Element15 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], carry = bits.Sub64(z[1], 5425985386570014816, carry)
		z[2], carry = bits.Sub64(z[2], 16543329522048539961, carry)
		z[3], carry = bits.Sub64(z[3], 8005597788374307107, carry)
		z[4], carry = bits.Sub64(z[4], 15241615317628931370, carry)
		z[5], carry = bits.Sub64(z[5], 6034560910466061008, carry)
		z[6], carry = bits.Sub64(z[6], 7145621780070775870, carry)
		z[7], carry = bits.Sub64(z[7], 16461459958437031704, carry)
		z[8], carry = bits.Sub64(z[8], 9272584515851371438, carry)
		z[9], carry = bits.Sub64(z[9], 7057180174590449223, carry)
		z[10], carry = bits.Sub64(z[10], 11450295558309688477, carry)
		z[11], carry = bits.Sub64(z[11], 12690622732124784990, carry)
		z[12], carry = bits.Sub64(z[12], 10353285118063638086, carry)
		z[13], carry = bits.Sub64(z[13], 14898158720708831332, carry)
		z[14], carry = bits.Sub64(z[14], 7792229392281876443, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element15) Sub(x, y *Element15) *Element15 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 10494232652678249843, 0)
		z[1], c = bits.Add64(z[1], 5425985386570014816, c)
		z[2], c = bits.Add64(z[2], 16543329522048539961, c)
		z[3], c = bits.Add64(z[3], 8005597788374307107, c)
		z[4], c = bits.Add64(z[4], 15241615317628931370, c)
		z[5], c = bits.Add64(z[5], 6034560910466061008, c)
		z[6], c = bits.Add64(z[6], 7145621780070775870, c)
		z[7], c = bits.Add64(z[7], 16461459958437031704, c)
		z[8], c = bits.Add64(z[8], 9272584515851371438, c)
		z[9], c = bits.Add64(z[9], 7057180174590449223, c)
		z[10], c = bits.Add64(z[10], 11450295558309688477, c)
		z[11], c = bits.Add64(z[11], 12690622732124784990, c)
		z[12], c = bits.Add64(z[12], 10353285118063638086, c)
		z[13], c = bits.Add64(z[13], 14898158720708831332, c)
		z[14], _ = bits.Add64(z[14], 7792229392281876443, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element15) SubAssign(x *Element15) *Element15 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 10494232652678249843, 0)
		z[1], c = bits.Add64(z[1], 5425985386570014816, c)
		z[2], c = bits.Add64(z[2], 16543329522048539961, c)
		z[3], c = bits.Add64(z[3], 8005597788374307107, c)
		z[4], c = bits.Add64(z[4], 15241615317628931370, c)
		z[5], c = bits.Add64(z[5], 6034560910466061008, c)
		z[6], c = bits.Add64(z[6], 7145621780070775870, c)
		z[7], c = bits.Add64(z[7], 16461459958437031704, c)
		z[8], c = bits.Add64(z[8], 9272584515851371438, c)
		z[9], c = bits.Add64(z[9], 7057180174590449223, c)
		z[10], c = bits.Add64(z[10], 11450295558309688477, c)
		z[11], c = bits.Add64(z[11], 12690622732124784990, c)
		z[12], c = bits.Add64(z[12], 10353285118063638086, c)
		z[13], c = bits.Add64(z[13], 14898158720708831332, c)
		z[14], _ = bits.Add64(z[14], 7792229392281876443, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element15) Exp(x Element15, exponent ...uint64) *Element15 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element15) FromMont() *Element15 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16472869456696037445
		C := madd0(m, 10494232652678249843, z[0])
		C, z[0] = madd2(m, 5425985386570014816, z[1], C)
		C, z[1] = madd2(m, 16543329522048539961, z[2], C)
		C, z[2] = madd2(m, 8005597788374307107, z[3], C)
		C, z[3] = madd2(m, 15241615317628931370, z[4], C)
		C, z[4] = madd2(m, 6034560910466061008, z[5], C)
		C, z[5] = madd2(m, 7145621780070775870, z[6], C)
		C, z[6] = madd2(m, 16461459958437031704, z[7], C)
		C, z[7] = madd2(m, 9272584515851371438, z[8], C)
		C, z[8] = madd2(m, 7057180174590449223, z[9], C)
		C, z[9] = madd2(m, 11450295558309688477, z[10], C)
		C, z[10] = madd2(m, 12690622732124784990, z[11], C)
		C, z[11] = madd2(m, 10353285118063638086, z[12], C)
		C, z[12] = madd2(m, 14898158720708831332, z[13], C)
		C, z[13] = madd2(m, 7792229392281876443, z[14], C)
		z[14] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element15) ToMont() *Element15 {
	var rSquare = Element15{
		505130252482479291,
		6848350568261794627,
		8510834430330260042,
		15913757994330419931,
		1908669005106169605,
		2493639647831856309,
		4640691863467428913,
		4041265499399916433,
		14745640816029647020,
		6848703340766451354,
		8169967936545101281,
		2691939036278245650,
		16105723121250917281,
		7986245148049451158,
		283147054050383821,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element15) ToRegular() Element15 {
	return *z.FromMont()
}

// String returns the string form of an Element15 in Montgomery form
func (z *Element15) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element15) ToBigInt(res *big.Int) *big.Int {
	bits := (*[15]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element15) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[15]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element15) SetBigInt(v *big.Int) *Element15 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element15ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element15) SetString(s string) *Element15 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element15.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element15) Mul(x, y *Element15) *Element15 {

	var t [16]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)

	if t[15] != 0 {
		// we need to reduce, we have a result on 16 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(t[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(t[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(t[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(t[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(t[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(t[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(t[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(t[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(t[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(t[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(t[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(t[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(t[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(t[14], 7792229392281876443, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element15) MulAssign(x *Element15) *Element15 {

	var t [16]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16472869456696037445

	// -----------------------------------
	// Second loop
	C = madd0(m, 10494232652678249843, t[0])

	C, t[0] = madd2(m, 5425985386570014816, t[1], C)

	C, t[1] = madd2(m, 16543329522048539961, t[2], C)

	C, t[2] = madd2(m, 8005597788374307107, t[3], C)

	C, t[3] = madd2(m, 15241615317628931370, t[4], C)

	C, t[4] = madd2(m, 6034560910466061008, t[5], C)

	C, t[5] = madd2(m, 7145621780070775870, t[6], C)

	C, t[6] = madd2(m, 16461459958437031704, t[7], C)

	C, t[7] = madd2(m, 9272584515851371438, t[8], C)

	C, t[8] = madd2(m, 7057180174590449223, t[9], C)

	C, t[9] = madd2(m, 11450295558309688477, t[10], C)

	C, t[10] = madd2(m, 12690622732124784990, t[11], C)

	C, t[11] = madd2(m, 10353285118063638086, t[12], C)

	C, t[12] = madd2(m, 14898158720708831332, t[13], C)

	C, t[13] = madd3(m, 7792229392281876443, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)

	if t[15] != 0 {
		// we need to reduce, we have a result on 16 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(t[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(t[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(t[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(t[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(t[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(t[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(t[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(t[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(t[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(t[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(t[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(t[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(t[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(t[14], 7792229392281876443, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 7792229392281876443 || (z[14] == 7792229392281876443 && (z[13] < 14898158720708831332 || (z[13] == 14898158720708831332 && (z[12] < 10353285118063638086 || (z[12] == 10353285118063638086 && (z[11] < 12690622732124784990 || (z[11] == 12690622732124784990 && (z[10] < 11450295558309688477 || (z[10] == 11450295558309688477 && (z[9] < 7057180174590449223 || (z[9] == 7057180174590449223 && (z[8] < 9272584515851371438 || (z[8] == 9272584515851371438 && (z[7] < 16461459958437031704 || (z[7] == 16461459958437031704 && (z[6] < 7145621780070775870 || (z[6] == 7145621780070775870 && (z[5] < 6034560910466061008 || (z[5] == 6034560910466061008 && (z[4] < 15241615317628931370 || (z[4] == 15241615317628931370 && (z[3] < 8005597788374307107 || (z[3] == 8005597788374307107 && (z[2] < 16543329522048539961 || (z[2] == 16543329522048539961 && (z[1] < 5425985386570014816 || (z[1] == 5425985386570014816 && (z[0] < 10494232652678249843))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 10494232652678249843, 0)
		z[1], b = bits.Sub64(z[1], 5425985386570014816, b)
		z[2], b = bits.Sub64(z[2], 16543329522048539961, b)
		z[3], b = bits.Sub64(z[3], 8005597788374307107, b)
		z[4], b = bits.Sub64(z[4], 15241615317628931370, b)
		z[5], b = bits.Sub64(z[5], 6034560910466061008, b)
		z[6], b = bits.Sub64(z[6], 7145621780070775870, b)
		z[7], b = bits.Sub64(z[7], 16461459958437031704, b)
		z[8], b = bits.Sub64(z[8], 9272584515851371438, b)
		z[9], b = bits.Sub64(z[9], 7057180174590449223, b)
		z[10], b = bits.Sub64(z[10], 11450295558309688477, b)
		z[11], b = bits.Sub64(z[11], 12690622732124784990, b)
		z[12], b = bits.Sub64(z[12], 10353285118063638086, b)
		z[13], b = bits.Sub64(z[13], 14898158720708831332, b)
		z[14], _ = bits.Sub64(z[14], 7792229392281876443, b)
	}
	return z
}

func (z *Element15) Legendre() int {
	var l Element15
	// z^((q-1)/2)
	l.Exp(*z,
		5247116326339124921,
		11936364730139783216,
		17495036797879045788,
		4002798894187153553,
		7620807658814465685,
		3017280455233030504,
		3572810890035387935,
		8230729979218515852,
		13859664294780461527,
		12751962124150000419,
		5725147779154844238,
		6345311366062392495,
		5176642559031819043,
		16672451397209191474,
		3896114696140938221,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[14] == 2862285289145798728) && (l[13] == 7097170706001440566) && (l[12] == 16186917911291827058) && (l[11] == 11512242683169533250) && (l[10] == 13992897030799726277) && (l[9] == 4332383724528653168) && (l[8] == 18348319115716360354) && (l[7] == 3970568230545039823) && (l[6] == 4155500513567999875) && (l[5] == 6377622252777429598) && (l[4] == 6410257512161240491) && (l[3] == 2435548496960937400) && (l[2] == 3806829103322023309) && (l[1] == 7594773300569521982) && (l[0] == 15905022842062603546) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element15) Sqrt(x *Element15) *Element15 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element15
	y.Exp(*x,
		2623558163169562461,
		5968182365069891608,
		17970890435794298702,
		11224771483948352584,
		3810403829407232842,
		10732012264471291060,
		1786405445017693967,
		13338737026464033734,
		16153204184245006571,
		6375981062075000209,
		12085945926432197927,
		12396027719885972055,
		2588321279515909521,
		17559597735459371545,
		1948057348070469110,
	)
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	} else {
		return nil
	}
}

// Square z = x * x mod q
func (z *Element15) Square(x *Element15) *Element15 {
	return z.Mul(x, x)
}
