// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 4412262353267789628278902347247424445339160663247302386586531249099430163651234041783167221452523264890926063517704882109842008981700430302146945468848612782751526328002903960203586451581661881245608011603169732785959139693912464177300290294856113681437898329084517954025539693689206038889
// Code generated by goff DO NOT EDIT
// Element15 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element15 represents a field element stored on 15 words (uint64)
// Element15 are assumed to be in Montgomery form in all methods
type Element15 [15]uint64

// Element15Limbs number of 64 bits words needed to represent Element15
const Element15Limbs = 15

// Element15Bits number bits needed to represent Element15
const Element15Bits = 959

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element15) SetUint64(v uint64) *Element15 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element15) Set(x *Element15) *Element15 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	return z
}

// SetZero z = 0
func (z *Element15) SetZero() *Element15 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element15) SetOne() *Element15 {
	z[0] = 1489505562951236910
	z[1] = 15532344720143681648
	z[2] = 15510739642286032870
	z[3] = 10286151376863446162
	z[4] = 1686913443691195231
	z[5] = 14147832343513887011
	z[6] = 6892119333023863593
	z[7] = 13032004317135223684
	z[8] = 5126510699046383896
	z[9] = 8323916794225460337
	z[10] = 1074972621900705682
	z[11] = 4661144960233546257
	z[12] = 15769066831297352500
	z[13] = 2911854855303667560
	z[14] = 1742946880190138682
	return z
}

// Neg z = q - x
func (z *Element15) Neg(x *Element15) *Element15 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(17701991292233933161, x[0], 0)
	z[1], borrow = bits.Sub64(10680571713637710791, x[1], borrow)
	z[2], borrow = bits.Sub64(10691374252566535180, x[2], borrow)
	z[3], borrow = bits.Sub64(4080296348423052726, x[3], borrow)
	z[4], borrow = bits.Sub64(8379915315009178192, x[4], borrow)
	z[5], borrow = bits.Sub64(2149455865097832302, x[5], borrow)
	z[6], borrow = bits.Sub64(15000684407197619819, x[6], borrow)
	z[7], borrow = bits.Sub64(11930741915141939773, x[7], borrow)
	z[8], borrow = bits.Sub64(6660116687331583859, x[8], borrow)
	z[9], borrow = bits.Sub64(14284785676596821447, x[9], borrow)
	z[10], borrow = bits.Sub64(8685885725904422966, x[10], borrow)
	z[11], borrow = bits.Sub64(16116171593592778487, x[11], borrow)
	z[12], borrow = bits.Sub64(10562210658060875365, x[12], borrow)
	z[13], borrow = bits.Sub64(16990816646057717835, x[13], borrow)
	z[14], _ = bits.Sub64(8351898596759706466, x[14], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element15) Div(x, y *Element15) *Element15 {
	var yInv Element15
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element15) Equal(x *Element15) bool {
	return (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element15) IsZero() bool {
	return (z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element15ModulusBigInt big.Int
var onceelement15Modulus sync.Once

func element15ModulusBigInt() *big.Int {
	onceelement15Modulus.Do(func() {
		_element15ModulusBigInt.SetString("4412262353267789628278902347247424445339160663247302386586531249099430163651234041783167221452523264890926063517704882109842008981700430302146945468848612782751526328002903960203586451581661881245608011603169732785959139693912464177300290294856113681437898329084517954025539693689206038889", 10)
	})
	return &_element15ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element15) Inverse(x *Element15) *Element15 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element15ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element15) SetRandom() *Element15 {
	bytes := make([]byte, 120)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[14] %= 8351898596759706466

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element15) Add(x, y *Element15) *Element15 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], carry = bits.Sub64(z[1], 10680571713637710791, carry)
		z[2], carry = bits.Sub64(z[2], 10691374252566535180, carry)
		z[3], carry = bits.Sub64(z[3], 4080296348423052726, carry)
		z[4], carry = bits.Sub64(z[4], 8379915315009178192, carry)
		z[5], carry = bits.Sub64(z[5], 2149455865097832302, carry)
		z[6], carry = bits.Sub64(z[6], 15000684407197619819, carry)
		z[7], carry = bits.Sub64(z[7], 11930741915141939773, carry)
		z[8], carry = bits.Sub64(z[8], 6660116687331583859, carry)
		z[9], carry = bits.Sub64(z[9], 14284785676596821447, carry)
		z[10], carry = bits.Sub64(z[10], 8685885725904422966, carry)
		z[11], carry = bits.Sub64(z[11], 16116171593592778487, carry)
		z[12], carry = bits.Sub64(z[12], 10562210658060875365, carry)
		z[13], carry = bits.Sub64(z[13], 16990816646057717835, carry)
		z[14], carry = bits.Sub64(z[14], 8351898596759706466, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element15) AddAssign(x *Element15) *Element15 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], carry = bits.Sub64(z[1], 10680571713637710791, carry)
		z[2], carry = bits.Sub64(z[2], 10691374252566535180, carry)
		z[3], carry = bits.Sub64(z[3], 4080296348423052726, carry)
		z[4], carry = bits.Sub64(z[4], 8379915315009178192, carry)
		z[5], carry = bits.Sub64(z[5], 2149455865097832302, carry)
		z[6], carry = bits.Sub64(z[6], 15000684407197619819, carry)
		z[7], carry = bits.Sub64(z[7], 11930741915141939773, carry)
		z[8], carry = bits.Sub64(z[8], 6660116687331583859, carry)
		z[9], carry = bits.Sub64(z[9], 14284785676596821447, carry)
		z[10], carry = bits.Sub64(z[10], 8685885725904422966, carry)
		z[11], carry = bits.Sub64(z[11], 16116171593592778487, carry)
		z[12], carry = bits.Sub64(z[12], 10562210658060875365, carry)
		z[13], carry = bits.Sub64(z[13], 16990816646057717835, carry)
		z[14], carry = bits.Sub64(z[14], 8351898596759706466, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element15) Double(x *Element15) *Element15 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], carry = bits.Sub64(z[1], 10680571713637710791, carry)
		z[2], carry = bits.Sub64(z[2], 10691374252566535180, carry)
		z[3], carry = bits.Sub64(z[3], 4080296348423052726, carry)
		z[4], carry = bits.Sub64(z[4], 8379915315009178192, carry)
		z[5], carry = bits.Sub64(z[5], 2149455865097832302, carry)
		z[6], carry = bits.Sub64(z[6], 15000684407197619819, carry)
		z[7], carry = bits.Sub64(z[7], 11930741915141939773, carry)
		z[8], carry = bits.Sub64(z[8], 6660116687331583859, carry)
		z[9], carry = bits.Sub64(z[9], 14284785676596821447, carry)
		z[10], carry = bits.Sub64(z[10], 8685885725904422966, carry)
		z[11], carry = bits.Sub64(z[11], 16116171593592778487, carry)
		z[12], carry = bits.Sub64(z[12], 10562210658060875365, carry)
		z[13], carry = bits.Sub64(z[13], 16990816646057717835, carry)
		z[14], carry = bits.Sub64(z[14], 8351898596759706466, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element15) Sub(x, y *Element15) *Element15 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17701991292233933161, 0)
		z[1], c = bits.Add64(z[1], 10680571713637710791, c)
		z[2], c = bits.Add64(z[2], 10691374252566535180, c)
		z[3], c = bits.Add64(z[3], 4080296348423052726, c)
		z[4], c = bits.Add64(z[4], 8379915315009178192, c)
		z[5], c = bits.Add64(z[5], 2149455865097832302, c)
		z[6], c = bits.Add64(z[6], 15000684407197619819, c)
		z[7], c = bits.Add64(z[7], 11930741915141939773, c)
		z[8], c = bits.Add64(z[8], 6660116687331583859, c)
		z[9], c = bits.Add64(z[9], 14284785676596821447, c)
		z[10], c = bits.Add64(z[10], 8685885725904422966, c)
		z[11], c = bits.Add64(z[11], 16116171593592778487, c)
		z[12], c = bits.Add64(z[12], 10562210658060875365, c)
		z[13], c = bits.Add64(z[13], 16990816646057717835, c)
		z[14], _ = bits.Add64(z[14], 8351898596759706466, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element15) SubAssign(x *Element15) *Element15 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17701991292233933161, 0)
		z[1], c = bits.Add64(z[1], 10680571713637710791, c)
		z[2], c = bits.Add64(z[2], 10691374252566535180, c)
		z[3], c = bits.Add64(z[3], 4080296348423052726, c)
		z[4], c = bits.Add64(z[4], 8379915315009178192, c)
		z[5], c = bits.Add64(z[5], 2149455865097832302, c)
		z[6], c = bits.Add64(z[6], 15000684407197619819, c)
		z[7], c = bits.Add64(z[7], 11930741915141939773, c)
		z[8], c = bits.Add64(z[8], 6660116687331583859, c)
		z[9], c = bits.Add64(z[9], 14284785676596821447, c)
		z[10], c = bits.Add64(z[10], 8685885725904422966, c)
		z[11], c = bits.Add64(z[11], 16116171593592778487, c)
		z[12], c = bits.Add64(z[12], 10562210658060875365, c)
		z[13], c = bits.Add64(z[13], 16990816646057717835, c)
		z[14], _ = bits.Add64(z[14], 8351898596759706466, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element15) Exp(x Element15, exponent ...uint64) *Element15 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element15) FromMont() *Element15 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1032680738378662183
		C := madd0(m, 17701991292233933161, z[0])
		C, z[0] = madd2(m, 10680571713637710791, z[1], C)
		C, z[1] = madd2(m, 10691374252566535180, z[2], C)
		C, z[2] = madd2(m, 4080296348423052726, z[3], C)
		C, z[3] = madd2(m, 8379915315009178192, z[4], C)
		C, z[4] = madd2(m, 2149455865097832302, z[5], C)
		C, z[5] = madd2(m, 15000684407197619819, z[6], C)
		C, z[6] = madd2(m, 11930741915141939773, z[7], C)
		C, z[7] = madd2(m, 6660116687331583859, z[8], C)
		C, z[8] = madd2(m, 14284785676596821447, z[9], C)
		C, z[9] = madd2(m, 8685885725904422966, z[10], C)
		C, z[10] = madd2(m, 16116171593592778487, z[11], C)
		C, z[11] = madd2(m, 10562210658060875365, z[12], C)
		C, z[12] = madd2(m, 16990816646057717835, z[13], C)
		C, z[13] = madd2(m, 8351898596759706466, z[14], C)
		z[14] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element15) ToMont() *Element15 {
	var rSquare = Element15{
		6121870855702512878,
		17237392559695337471,
		15943469703421878468,
		14849367106015279442,
		16706132374984483724,
		12493188070767120220,
		10066338274450825544,
		16606324121025846788,
		3546176217695001612,
		913846118774686017,
		6638042666636641281,
		2894722015765499391,
		2478772878491726764,
		12993957957523381594,
		5443448504308437817,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element15) ToRegular() Element15 {
	return *z.FromMont()
}

// String returns the string form of an Element15 in Montgomery form
func (z *Element15) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element15) ToBigInt(res *big.Int) *big.Int {
	bits := (*[15]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element15) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[15]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element15) SetBigInt(v *big.Int) *Element15 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element15ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element15) SetString(s string) *Element15 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element15.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element15) Mul(x, y *Element15) *Element15 {

	var t [16]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)

	if t[15] != 0 {
		// we need to reduce, we have a result on 16 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(t[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(t[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(t[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(t[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(t[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(t[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(t[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(t[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(t[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(t[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(t[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(t[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(t[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(t[14], 8351898596759706466, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}
	return z
}

// MulAssign z = z * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element15) MulAssign(x *Element15) *Element15 {

	var t [16]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1032680738378662183

	// -----------------------------------
	// Second loop
	C = madd0(m, 17701991292233933161, t[0])

	C, t[0] = madd2(m, 10680571713637710791, t[1], C)

	C, t[1] = madd2(m, 10691374252566535180, t[2], C)

	C, t[2] = madd2(m, 4080296348423052726, t[3], C)

	C, t[3] = madd2(m, 8379915315009178192, t[4], C)

	C, t[4] = madd2(m, 2149455865097832302, t[5], C)

	C, t[5] = madd2(m, 15000684407197619819, t[6], C)

	C, t[6] = madd2(m, 11930741915141939773, t[7], C)

	C, t[7] = madd2(m, 6660116687331583859, t[8], C)

	C, t[8] = madd2(m, 14284785676596821447, t[9], C)

	C, t[9] = madd2(m, 8685885725904422966, t[10], C)

	C, t[10] = madd2(m, 16116171593592778487, t[11], C)

	C, t[11] = madd2(m, 10562210658060875365, t[12], C)

	C, t[12] = madd2(m, 16990816646057717835, t[13], C)

	C, t[13] = madd3(m, 8351898596759706466, t[14], C, t[15])

	t[14], t[15] = bits.Add64(D, C, 0)

	if t[15] != 0 {
		// we need to reduce, we have a result on 16 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(t[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(t[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(t[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(t[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(t[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(t[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(t[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(t[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(t[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(t[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(t[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(t[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(t[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(t[14], 8351898596759706466, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[14] < 8351898596759706466 || (z[14] == 8351898596759706466 && (z[13] < 16990816646057717835 || (z[13] == 16990816646057717835 && (z[12] < 10562210658060875365 || (z[12] == 10562210658060875365 && (z[11] < 16116171593592778487 || (z[11] == 16116171593592778487 && (z[10] < 8685885725904422966 || (z[10] == 8685885725904422966 && (z[9] < 14284785676596821447 || (z[9] == 14284785676596821447 && (z[8] < 6660116687331583859 || (z[8] == 6660116687331583859 && (z[7] < 11930741915141939773 || (z[7] == 11930741915141939773 && (z[6] < 15000684407197619819 || (z[6] == 15000684407197619819 && (z[5] < 2149455865097832302 || (z[5] == 2149455865097832302 && (z[4] < 8379915315009178192 || (z[4] == 8379915315009178192 && (z[3] < 4080296348423052726 || (z[3] == 4080296348423052726 && (z[2] < 10691374252566535180 || (z[2] == 10691374252566535180 && (z[1] < 10680571713637710791 || (z[1] == 10680571713637710791 && (z[0] < 17701991292233933161))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17701991292233933161, 0)
		z[1], b = bits.Sub64(z[1], 10680571713637710791, b)
		z[2], b = bits.Sub64(z[2], 10691374252566535180, b)
		z[3], b = bits.Sub64(z[3], 4080296348423052726, b)
		z[4], b = bits.Sub64(z[4], 8379915315009178192, b)
		z[5], b = bits.Sub64(z[5], 2149455865097832302, b)
		z[6], b = bits.Sub64(z[6], 15000684407197619819, b)
		z[7], b = bits.Sub64(z[7], 11930741915141939773, b)
		z[8], b = bits.Sub64(z[8], 6660116687331583859, b)
		z[9], b = bits.Sub64(z[9], 14284785676596821447, b)
		z[10], b = bits.Sub64(z[10], 8685885725904422966, b)
		z[11], b = bits.Sub64(z[11], 16116171593592778487, b)
		z[12], b = bits.Sub64(z[12], 10562210658060875365, b)
		z[13], b = bits.Sub64(z[13], 16990816646057717835, b)
		z[14], _ = bits.Sub64(z[14], 8351898596759706466, b)
	}
	return z
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element15) Legendre() int {
	var l Element15
	// z^((q-1)/2)
	l.Exp(*z,
		18074367682971742388,
		5340285856818855395,
		5345687126283267590,
		2040148174211526363,
		4189957657504589096,
		10298099969403691959,
		16723714240453585717,
		15188742994425745694,
		12553430380520567737,
		7142392838298410723,
		13566314899806987291,
		17281457833651165051,
		14504477365885213490,
		8495408323028858917,
		4175949298379853233,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[14] == 1742946880190138682) && (l[13] == 2911854855303667560) && (l[12] == 15769066831297352500) && (l[11] == 4661144960233546257) && (l[10] == 1074972621900705682) && (l[9] == 8323916794225460337) && (l[8] == 5126510699046383896) && (l[7] == 13032004317135223684) && (l[6] == 6892119333023863593) && (l[5] == 14147832343513887011) && (l[4] == 1686913443691195231) && (l[3] == 10286151376863446162) && (l[2] == 15510739642286032870) && (l[1] == 15532344720143681648) && (l[0] == 1489505562951236910) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element15) Sqrt(x *Element15) *Element15 {
	// q ≡ 1 (mod 4)
	// see modSqrtTonelliShanks in math/big/int.go
	// using https://www.maa.org/sites/default/files/pdf/upload_library/22/Polya/07468342.di020786.02p0470a.pdf

	var y, b, t, w Element15
	// w = x^((s-1)/2))
	w.Exp(*x,
		9176824988012549654,
		14502593787384520636,
		7585739918426490304,
		255018521776440795,
		16664645771683931301,
		12816477542243931254,
		15925522335338861926,
		4204435883516912163,
		8486707825206152823,
		7810328132428383196,
		8613318390116955267,
		6771868247633783535,
		13342274716804121446,
		3367769049592301316,
		521993662297481654,
	)

	// y = x^((s+1)/2)) = w * x
	y.Mul(x, &w)

	// b = x^s = w * w * x = y * x
	b.Mul(&w, &y)

	// g = nonResidue ^ s
	var g = Element15{
		3115793092097692135,
		16113884702144302212,
		12904374602062954409,
		5866552867725855552,
		4304503986342803469,
		16208463589033672664,
		907159596691111768,
		10471418430180795200,
		14058578384415463508,
		16939826038280255996,
		8489878235794235855,
		14113671461673396753,
		16650641333054792264,
		11566326305374568935,
		293778517326132939,
	}
	r := uint64(3)

	// compute legendre symbol
	// t = x^((q-1)/2) = r-1 squaring of x^s
	t = b
	for i := uint64(0); i < r-1; i++ {
		t.Square(&t)
	}
	if t.IsZero() {
		return z.SetZero()
	}
	if !((t[14] == 1742946880190138682) && (t[13] == 2911854855303667560) && (t[12] == 15769066831297352500) && (t[11] == 4661144960233546257) && (t[10] == 1074972621900705682) && (t[9] == 8323916794225460337) && (t[8] == 5126510699046383896) && (t[7] == 13032004317135223684) && (t[6] == 6892119333023863593) && (t[5] == 14147832343513887011) && (t[4] == 1686913443691195231) && (t[3] == 10286151376863446162) && (t[2] == 15510739642286032870) && (t[1] == 15532344720143681648) && (t[0] == 1489505562951236910)) {
		// t != 1, we don't have a square root
		return nil
	}
	for {
		var m uint64
		t = b

		// for t != 1
		for !((t[14] == 1742946880190138682) && (t[13] == 2911854855303667560) && (t[12] == 15769066831297352500) && (t[11] == 4661144960233546257) && (t[10] == 1074972621900705682) && (t[9] == 8323916794225460337) && (t[8] == 5126510699046383896) && (t[7] == 13032004317135223684) && (t[6] == 6892119333023863593) && (t[5] == 14147832343513887011) && (t[4] == 1686913443691195231) && (t[3] == 10286151376863446162) && (t[2] == 15510739642286032870) && (t[1] == 15532344720143681648) && (t[0] == 1489505562951236910)) {
			t.Square(&t)
			m++
		}

		if m == 0 {
			return z.Set(&y)
		}
		// t = g^(2^(r-m-1)) mod q
		ge := int(r - m - 1)
		t = g
		for ge > 0 {
			t.Square(&t)
			ge--
		}

		g.Square(&t)
		y.MulAssign(&t)
		b.MulAssign(&g)
		r = m
	}
}

// Square z = x * x mod q
func (z *Element15) Square(x *Element15) *Element15 {
	return z.Mul(x, x)
}
