// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 3115774400427428722053170356171067903466203820024877342590802541455487501319134285531760298486626696361323597870403873983360937943336198159528630090126480518120566599621647045973672493749587030271655385766661085918133718314340103490132727166041540229956971845020029754242987508348332944749785023682940341258140534259517187177426072027397242219804841375506769404886312979249993011438128779874063577810887425545160422499575303
// Code generated by goff DO NOT EDIT
// Element22 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element22 represents a field element stored on 22 words (uint64)
// Element22 are assumed to be in Montgomery form in all methods
type Element22 [22]uint64

// Element22Limbs number of 64 bits words needed to represent Element22
const Element22Limbs = 22

// Element22Bits number bits needed to represent Element22
const Element22Bits = 1407

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element22) SetUint64(v uint64) *Element22 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	z[20] = 0
	z[21] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element22) Set(x *Element22) *Element22 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	z[19] = x[19]
	z[20] = x[20]
	z[21] = x[21]
	return z
}

// SetZero z = 0
func (z *Element22) SetZero() *Element22 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	z[20] = 0
	z[21] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element22) SetOne() *Element22 {
	z[0] = 14528469500977165298
	z[1] = 12338714660719049566
	z[2] = 10869840180347296162
	z[3] = 14293662288584706897
	z[4] = 6404037698510142221
	z[5] = 1018477927709295221
	z[6] = 14373018423358331311
	z[7] = 5270236544254167570
	z[8] = 2425640176218047673
	z[9] = 3772203091430383624
	z[10] = 10458932942087003881
	z[11] = 12083002646294628334
	z[12] = 6541441586252220636
	z[13] = 4610505816892165987
	z[14] = 12552191184474631395
	z[15] = 3704662740157851339
	z[16] = 2960469978665287471
	z[17] = 11533128656463931704
	z[18] = 12752724854613322139
	z[19] = 11937878535852417586
	z[20] = 16140594758577265488
	z[21] = 2218115222486212672
	return z
}

// Neg z = q - x
func (z *Element22) Neg(x *Element22) *Element22 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(11182509323220968967, x[0], 0)
	z[1], borrow = bits.Sub64(12277386743350026832, x[1], borrow)
	z[2], borrow = bits.Sub64(3788451946681127726, x[2], borrow)
	z[3], borrow = bits.Sub64(2076540892562422359, x[3], borrow)
	z[4], borrow = bits.Sub64(6021353187599704697, x[4], borrow)
	z[5], borrow = bits.Sub64(8714133073000128197, x[5], borrow)
	z[6], borrow = bits.Sub64(11260234862030385960, x[6], borrow)
	z[7], borrow = bits.Sub64(6588253764727692022, x[7], borrow)
	z[8], borrow = bits.Sub64(17233923985600527779, x[8], borrow)
	z[9], borrow = bits.Sub64(7337270491139583995, x[9], borrow)
	z[10], borrow = bits.Sub64(13217277602666049675, x[10], borrow)
	z[11], borrow = bits.Sub64(12405242750562237448, x[11], borrow)
	z[12], borrow = bits.Sub64(5952651243728665489, x[12], borrow)
	z[13], borrow = bits.Sub64(6918119128408692814, x[13], borrow)
	z[14], borrow = bits.Sub64(2947276444617460110, x[14], borrow)
	z[15], borrow = bits.Sub64(7371040666775850138, x[15], borrow)
	z[16], borrow = bits.Sub64(16966509084376907880, x[16], borrow)
	z[17], borrow = bits.Sub64(3456807708622809955, x[17], borrow)
	z[18], borrow = bits.Sub64(12070381646402890546, x[18], borrow)
	z[19], borrow = bits.Sub64(12477804805783342822, x[19], borrow)
	z[20], borrow = bits.Sub64(10376446694420918871, x[20], borrow)
	z[21], _ = bits.Sub64(8114314425611669471, x[21], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element22) Div(x, y *Element22) *Element22 {
	var yInv Element22
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element22) Equal(x *Element22) bool {
	return (z[21] == x[21]) && (z[20] == x[20]) && (z[19] == x[19]) && (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element22) IsZero() bool {
	return (z[21] | z[20] | z[19] | z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element22ModulusBigInt big.Int
var onceelement22Modulus sync.Once

func element22ModulusBigInt() *big.Int {
	onceelement22Modulus.Do(func() {
		_element22ModulusBigInt.SetString("3115774400427428722053170356171067903466203820024877342590802541455487501319134285531760298486626696361323597870403873983360937943336198159528630090126480518120566599621647045973672493749587030271655385766661085918133718314340103490132727166041540229956971845020029754242987508348332944749785023682940341258140534259517187177426072027397242219804841375506769404886312979249993011438128779874063577810887425545160422499575303", 10)
	})
	return &_element22ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element22) Inverse(x *Element22) *Element22 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element22ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element22) SetRandom() *Element22 {
	bytes := make([]byte, 176)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[16] = binary.BigEndian.Uint64(bytes[128:136])
	z[17] = binary.BigEndian.Uint64(bytes[136:144])
	z[18] = binary.BigEndian.Uint64(bytes[144:152])
	z[19] = binary.BigEndian.Uint64(bytes[152:160])
	z[20] = binary.BigEndian.Uint64(bytes[160:168])
	z[21] = binary.BigEndian.Uint64(bytes[168:176])
	z[21] %= 8114314425611669471

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element22) Add(x, y *Element22) *Element22 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	z[19], carry = bits.Add64(x[19], y[19], carry)
	z[20], carry = bits.Add64(x[20], y[20], carry)
	z[21], carry = bits.Add64(x[21], y[21], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], carry = bits.Sub64(z[1], 12277386743350026832, carry)
		z[2], carry = bits.Sub64(z[2], 3788451946681127726, carry)
		z[3], carry = bits.Sub64(z[3], 2076540892562422359, carry)
		z[4], carry = bits.Sub64(z[4], 6021353187599704697, carry)
		z[5], carry = bits.Sub64(z[5], 8714133073000128197, carry)
		z[6], carry = bits.Sub64(z[6], 11260234862030385960, carry)
		z[7], carry = bits.Sub64(z[7], 6588253764727692022, carry)
		z[8], carry = bits.Sub64(z[8], 17233923985600527779, carry)
		z[9], carry = bits.Sub64(z[9], 7337270491139583995, carry)
		z[10], carry = bits.Sub64(z[10], 13217277602666049675, carry)
		z[11], carry = bits.Sub64(z[11], 12405242750562237448, carry)
		z[12], carry = bits.Sub64(z[12], 5952651243728665489, carry)
		z[13], carry = bits.Sub64(z[13], 6918119128408692814, carry)
		z[14], carry = bits.Sub64(z[14], 2947276444617460110, carry)
		z[15], carry = bits.Sub64(z[15], 7371040666775850138, carry)
		z[16], carry = bits.Sub64(z[16], 16966509084376907880, carry)
		z[17], carry = bits.Sub64(z[17], 3456807708622809955, carry)
		z[18], carry = bits.Sub64(z[18], 12070381646402890546, carry)
		z[19], carry = bits.Sub64(z[19], 12477804805783342822, carry)
		z[20], carry = bits.Sub64(z[20], 10376446694420918871, carry)
		z[21], carry = bits.Sub64(z[21], 8114314425611669471, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element22) AddAssign(x *Element22) *Element22 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	z[19], carry = bits.Add64(z[19], x[19], carry)
	z[20], carry = bits.Add64(z[20], x[20], carry)
	z[21], carry = bits.Add64(z[21], x[21], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], carry = bits.Sub64(z[1], 12277386743350026832, carry)
		z[2], carry = bits.Sub64(z[2], 3788451946681127726, carry)
		z[3], carry = bits.Sub64(z[3], 2076540892562422359, carry)
		z[4], carry = bits.Sub64(z[4], 6021353187599704697, carry)
		z[5], carry = bits.Sub64(z[5], 8714133073000128197, carry)
		z[6], carry = bits.Sub64(z[6], 11260234862030385960, carry)
		z[7], carry = bits.Sub64(z[7], 6588253764727692022, carry)
		z[8], carry = bits.Sub64(z[8], 17233923985600527779, carry)
		z[9], carry = bits.Sub64(z[9], 7337270491139583995, carry)
		z[10], carry = bits.Sub64(z[10], 13217277602666049675, carry)
		z[11], carry = bits.Sub64(z[11], 12405242750562237448, carry)
		z[12], carry = bits.Sub64(z[12], 5952651243728665489, carry)
		z[13], carry = bits.Sub64(z[13], 6918119128408692814, carry)
		z[14], carry = bits.Sub64(z[14], 2947276444617460110, carry)
		z[15], carry = bits.Sub64(z[15], 7371040666775850138, carry)
		z[16], carry = bits.Sub64(z[16], 16966509084376907880, carry)
		z[17], carry = bits.Sub64(z[17], 3456807708622809955, carry)
		z[18], carry = bits.Sub64(z[18], 12070381646402890546, carry)
		z[19], carry = bits.Sub64(z[19], 12477804805783342822, carry)
		z[20], carry = bits.Sub64(z[20], 10376446694420918871, carry)
		z[21], carry = bits.Sub64(z[21], 8114314425611669471, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element22) Double(x *Element22) *Element22 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	z[19], carry = bits.Add64(x[19], x[19], carry)
	z[20], carry = bits.Add64(x[20], x[20], carry)
	z[21], carry = bits.Add64(x[21], x[21], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], carry = bits.Sub64(z[1], 12277386743350026832, carry)
		z[2], carry = bits.Sub64(z[2], 3788451946681127726, carry)
		z[3], carry = bits.Sub64(z[3], 2076540892562422359, carry)
		z[4], carry = bits.Sub64(z[4], 6021353187599704697, carry)
		z[5], carry = bits.Sub64(z[5], 8714133073000128197, carry)
		z[6], carry = bits.Sub64(z[6], 11260234862030385960, carry)
		z[7], carry = bits.Sub64(z[7], 6588253764727692022, carry)
		z[8], carry = bits.Sub64(z[8], 17233923985600527779, carry)
		z[9], carry = bits.Sub64(z[9], 7337270491139583995, carry)
		z[10], carry = bits.Sub64(z[10], 13217277602666049675, carry)
		z[11], carry = bits.Sub64(z[11], 12405242750562237448, carry)
		z[12], carry = bits.Sub64(z[12], 5952651243728665489, carry)
		z[13], carry = bits.Sub64(z[13], 6918119128408692814, carry)
		z[14], carry = bits.Sub64(z[14], 2947276444617460110, carry)
		z[15], carry = bits.Sub64(z[15], 7371040666775850138, carry)
		z[16], carry = bits.Sub64(z[16], 16966509084376907880, carry)
		z[17], carry = bits.Sub64(z[17], 3456807708622809955, carry)
		z[18], carry = bits.Sub64(z[18], 12070381646402890546, carry)
		z[19], carry = bits.Sub64(z[19], 12477804805783342822, carry)
		z[20], carry = bits.Sub64(z[20], 10376446694420918871, carry)
		z[21], carry = bits.Sub64(z[21], 8114314425611669471, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element22) Sub(x, y *Element22) *Element22 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	z[19], b = bits.Sub64(x[19], y[19], b)
	z[20], b = bits.Sub64(x[20], y[20], b)
	z[21], b = bits.Sub64(x[21], y[21], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 11182509323220968967, 0)
		z[1], c = bits.Add64(z[1], 12277386743350026832, c)
		z[2], c = bits.Add64(z[2], 3788451946681127726, c)
		z[3], c = bits.Add64(z[3], 2076540892562422359, c)
		z[4], c = bits.Add64(z[4], 6021353187599704697, c)
		z[5], c = bits.Add64(z[5], 8714133073000128197, c)
		z[6], c = bits.Add64(z[6], 11260234862030385960, c)
		z[7], c = bits.Add64(z[7], 6588253764727692022, c)
		z[8], c = bits.Add64(z[8], 17233923985600527779, c)
		z[9], c = bits.Add64(z[9], 7337270491139583995, c)
		z[10], c = bits.Add64(z[10], 13217277602666049675, c)
		z[11], c = bits.Add64(z[11], 12405242750562237448, c)
		z[12], c = bits.Add64(z[12], 5952651243728665489, c)
		z[13], c = bits.Add64(z[13], 6918119128408692814, c)
		z[14], c = bits.Add64(z[14], 2947276444617460110, c)
		z[15], c = bits.Add64(z[15], 7371040666775850138, c)
		z[16], c = bits.Add64(z[16], 16966509084376907880, c)
		z[17], c = bits.Add64(z[17], 3456807708622809955, c)
		z[18], c = bits.Add64(z[18], 12070381646402890546, c)
		z[19], c = bits.Add64(z[19], 12477804805783342822, c)
		z[20], c = bits.Add64(z[20], 10376446694420918871, c)
		z[21], _ = bits.Add64(z[21], 8114314425611669471, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element22) SubAssign(x *Element22) *Element22 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	z[19], b = bits.Sub64(z[19], x[19], b)
	z[20], b = bits.Sub64(z[20], x[20], b)
	z[21], b = bits.Sub64(z[21], x[21], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 11182509323220968967, 0)
		z[1], c = bits.Add64(z[1], 12277386743350026832, c)
		z[2], c = bits.Add64(z[2], 3788451946681127726, c)
		z[3], c = bits.Add64(z[3], 2076540892562422359, c)
		z[4], c = bits.Add64(z[4], 6021353187599704697, c)
		z[5], c = bits.Add64(z[5], 8714133073000128197, c)
		z[6], c = bits.Add64(z[6], 11260234862030385960, c)
		z[7], c = bits.Add64(z[7], 6588253764727692022, c)
		z[8], c = bits.Add64(z[8], 17233923985600527779, c)
		z[9], c = bits.Add64(z[9], 7337270491139583995, c)
		z[10], c = bits.Add64(z[10], 13217277602666049675, c)
		z[11], c = bits.Add64(z[11], 12405242750562237448, c)
		z[12], c = bits.Add64(z[12], 5952651243728665489, c)
		z[13], c = bits.Add64(z[13], 6918119128408692814, c)
		z[14], c = bits.Add64(z[14], 2947276444617460110, c)
		z[15], c = bits.Add64(z[15], 7371040666775850138, c)
		z[16], c = bits.Add64(z[16], 16966509084376907880, c)
		z[17], c = bits.Add64(z[17], 3456807708622809955, c)
		z[18], c = bits.Add64(z[18], 12070381646402890546, c)
		z[19], c = bits.Add64(z[19], 12477804805783342822, c)
		z[20], c = bits.Add64(z[20], 10376446694420918871, c)
		z[21], _ = bits.Add64(z[21], 8114314425611669471, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element22) Exp(x Element22, exponent ...uint64) *Element22 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element22) FromMont() *Element22 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 5187576650881030217
		C := madd0(m, 11182509323220968967, z[0])
		C, z[0] = madd2(m, 12277386743350026832, z[1], C)
		C, z[1] = madd2(m, 3788451946681127726, z[2], C)
		C, z[2] = madd2(m, 2076540892562422359, z[3], C)
		C, z[3] = madd2(m, 6021353187599704697, z[4], C)
		C, z[4] = madd2(m, 8714133073000128197, z[5], C)
		C, z[5] = madd2(m, 11260234862030385960, z[6], C)
		C, z[6] = madd2(m, 6588253764727692022, z[7], C)
		C, z[7] = madd2(m, 17233923985600527779, z[8], C)
		C, z[8] = madd2(m, 7337270491139583995, z[9], C)
		C, z[9] = madd2(m, 13217277602666049675, z[10], C)
		C, z[10] = madd2(m, 12405242750562237448, z[11], C)
		C, z[11] = madd2(m, 5952651243728665489, z[12], C)
		C, z[12] = madd2(m, 6918119128408692814, z[13], C)
		C, z[13] = madd2(m, 2947276444617460110, z[14], C)
		C, z[14] = madd2(m, 7371040666775850138, z[15], C)
		C, z[15] = madd2(m, 16966509084376907880, z[16], C)
		C, z[16] = madd2(m, 3456807708622809955, z[17], C)
		C, z[17] = madd2(m, 12070381646402890546, z[18], C)
		C, z[18] = madd2(m, 12477804805783342822, z[19], C)
		C, z[19] = madd2(m, 10376446694420918871, z[20], C)
		C, z[20] = madd2(m, 8114314425611669471, z[21], C)
		z[21] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element22) ToMont() *Element22 {
	var rSquare = Element22{
		5203926683785779447,
		2146826361011828161,
		16562400863563856465,
		12727988159783566939,
		7801025857981081880,
		9069071641312407985,
		2304314179770605795,
		15489740052334340545,
		13773500643185757160,
		17822088754639439461,
		10853049305965964438,
		16092786056400241937,
		637136400996456269,
		6018116672478805061,
		9958306735426526022,
		243114502648165008,
		7160969633690222575,
		14484194451534059783,
		4718733538421283092,
		5613988027653731073,
		13818099231542413782,
		6609055985726266727,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element22) ToRegular() Element22 {
	return *z.FromMont()
}

// String returns the string form of an Element22 in Montgomery form
func (z *Element22) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element22) ToBigInt(res *big.Int) *big.Int {
	bits := (*[22]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element22) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[22]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element22) SetBigInt(v *big.Int) *Element22 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element22ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element22) SetString(s string) *Element22 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element22.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element22) Mul(x, y *Element22) *Element22 {

	var t [23]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)
	C, t[19] = madd1(y[0], x[19], C)
	C, t[20] = madd1(y[0], x[20], C)
	C, t[21] = madd1(y[0], x[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)
	C, t[19] = madd2(y[1], x[19], t[19], C)
	C, t[20] = madd2(y[1], x[20], t[20], C)
	C, t[21] = madd2(y[1], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)
	C, t[19] = madd2(y[2], x[19], t[19], C)
	C, t[20] = madd2(y[2], x[20], t[20], C)
	C, t[21] = madd2(y[2], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)
	C, t[19] = madd2(y[3], x[19], t[19], C)
	C, t[20] = madd2(y[3], x[20], t[20], C)
	C, t[21] = madd2(y[3], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)
	C, t[19] = madd2(y[4], x[19], t[19], C)
	C, t[20] = madd2(y[4], x[20], t[20], C)
	C, t[21] = madd2(y[4], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)
	C, t[19] = madd2(y[5], x[19], t[19], C)
	C, t[20] = madd2(y[5], x[20], t[20], C)
	C, t[21] = madd2(y[5], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)
	C, t[19] = madd2(y[6], x[19], t[19], C)
	C, t[20] = madd2(y[6], x[20], t[20], C)
	C, t[21] = madd2(y[6], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)
	C, t[19] = madd2(y[7], x[19], t[19], C)
	C, t[20] = madd2(y[7], x[20], t[20], C)
	C, t[21] = madd2(y[7], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)
	C, t[19] = madd2(y[8], x[19], t[19], C)
	C, t[20] = madd2(y[8], x[20], t[20], C)
	C, t[21] = madd2(y[8], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)
	C, t[19] = madd2(y[9], x[19], t[19], C)
	C, t[20] = madd2(y[9], x[20], t[20], C)
	C, t[21] = madd2(y[9], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)
	C, t[19] = madd2(y[10], x[19], t[19], C)
	C, t[20] = madd2(y[10], x[20], t[20], C)
	C, t[21] = madd2(y[10], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)
	C, t[19] = madd2(y[11], x[19], t[19], C)
	C, t[20] = madd2(y[11], x[20], t[20], C)
	C, t[21] = madd2(y[11], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)
	C, t[19] = madd2(y[12], x[19], t[19], C)
	C, t[20] = madd2(y[12], x[20], t[20], C)
	C, t[21] = madd2(y[12], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)
	C, t[19] = madd2(y[13], x[19], t[19], C)
	C, t[20] = madd2(y[13], x[20], t[20], C)
	C, t[21] = madd2(y[13], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)
	C, t[19] = madd2(y[14], x[19], t[19], C)
	C, t[20] = madd2(y[14], x[20], t[20], C)
	C, t[21] = madd2(y[14], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)
	C, t[19] = madd2(y[15], x[19], t[19], C)
	C, t[20] = madd2(y[15], x[20], t[20], C)
	C, t[21] = madd2(y[15], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)
	C, t[19] = madd2(y[16], x[19], t[19], C)
	C, t[20] = madd2(y[16], x[20], t[20], C)
	C, t[21] = madd2(y[16], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)
	C, t[19] = madd2(y[17], x[19], t[19], C)
	C, t[20] = madd2(y[17], x[20], t[20], C)
	C, t[21] = madd2(y[17], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)
	C, t[19] = madd2(y[18], x[19], t[19], C)
	C, t[20] = madd2(y[18], x[20], t[20], C)
	C, t[21] = madd2(y[18], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[19], x[0], t[0])
	C, t[1] = madd2(y[19], x[1], t[1], C)
	C, t[2] = madd2(y[19], x[2], t[2], C)
	C, t[3] = madd2(y[19], x[3], t[3], C)
	C, t[4] = madd2(y[19], x[4], t[4], C)
	C, t[5] = madd2(y[19], x[5], t[5], C)
	C, t[6] = madd2(y[19], x[6], t[6], C)
	C, t[7] = madd2(y[19], x[7], t[7], C)
	C, t[8] = madd2(y[19], x[8], t[8], C)
	C, t[9] = madd2(y[19], x[9], t[9], C)
	C, t[10] = madd2(y[19], x[10], t[10], C)
	C, t[11] = madd2(y[19], x[11], t[11], C)
	C, t[12] = madd2(y[19], x[12], t[12], C)
	C, t[13] = madd2(y[19], x[13], t[13], C)
	C, t[14] = madd2(y[19], x[14], t[14], C)
	C, t[15] = madd2(y[19], x[15], t[15], C)
	C, t[16] = madd2(y[19], x[16], t[16], C)
	C, t[17] = madd2(y[19], x[17], t[17], C)
	C, t[18] = madd2(y[19], x[18], t[18], C)
	C, t[19] = madd2(y[19], x[19], t[19], C)
	C, t[20] = madd2(y[19], x[20], t[20], C)
	C, t[21] = madd2(y[19], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[20], x[0], t[0])
	C, t[1] = madd2(y[20], x[1], t[1], C)
	C, t[2] = madd2(y[20], x[2], t[2], C)
	C, t[3] = madd2(y[20], x[3], t[3], C)
	C, t[4] = madd2(y[20], x[4], t[4], C)
	C, t[5] = madd2(y[20], x[5], t[5], C)
	C, t[6] = madd2(y[20], x[6], t[6], C)
	C, t[7] = madd2(y[20], x[7], t[7], C)
	C, t[8] = madd2(y[20], x[8], t[8], C)
	C, t[9] = madd2(y[20], x[9], t[9], C)
	C, t[10] = madd2(y[20], x[10], t[10], C)
	C, t[11] = madd2(y[20], x[11], t[11], C)
	C, t[12] = madd2(y[20], x[12], t[12], C)
	C, t[13] = madd2(y[20], x[13], t[13], C)
	C, t[14] = madd2(y[20], x[14], t[14], C)
	C, t[15] = madd2(y[20], x[15], t[15], C)
	C, t[16] = madd2(y[20], x[16], t[16], C)
	C, t[17] = madd2(y[20], x[17], t[17], C)
	C, t[18] = madd2(y[20], x[18], t[18], C)
	C, t[19] = madd2(y[20], x[19], t[19], C)
	C, t[20] = madd2(y[20], x[20], t[20], C)
	C, t[21] = madd2(y[20], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[21], x[0], t[0])
	C, t[1] = madd2(y[21], x[1], t[1], C)
	C, t[2] = madd2(y[21], x[2], t[2], C)
	C, t[3] = madd2(y[21], x[3], t[3], C)
	C, t[4] = madd2(y[21], x[4], t[4], C)
	C, t[5] = madd2(y[21], x[5], t[5], C)
	C, t[6] = madd2(y[21], x[6], t[6], C)
	C, t[7] = madd2(y[21], x[7], t[7], C)
	C, t[8] = madd2(y[21], x[8], t[8], C)
	C, t[9] = madd2(y[21], x[9], t[9], C)
	C, t[10] = madd2(y[21], x[10], t[10], C)
	C, t[11] = madd2(y[21], x[11], t[11], C)
	C, t[12] = madd2(y[21], x[12], t[12], C)
	C, t[13] = madd2(y[21], x[13], t[13], C)
	C, t[14] = madd2(y[21], x[14], t[14], C)
	C, t[15] = madd2(y[21], x[15], t[15], C)
	C, t[16] = madd2(y[21], x[16], t[16], C)
	C, t[17] = madd2(y[21], x[17], t[17], C)
	C, t[18] = madd2(y[21], x[18], t[18], C)
	C, t[19] = madd2(y[21], x[19], t[19], C)
	C, t[20] = madd2(y[21], x[20], t[20], C)
	C, t[21] = madd2(y[21], x[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)

	if t[22] != 0 {
		// we need to reduce, we have a result on 23 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(t[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(t[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(t[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(t[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(t[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(t[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(t[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(t[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(t[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(t[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(t[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(t[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(t[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(t[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(t[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(t[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(t[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(t[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(t[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(t[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(t[21], 8114314425611669471, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]
	z[20] = t[20]
	z[21] = t[21]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element22) MulAssign(x *Element22) *Element22 {

	var t [23]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)
	C, t[19] = madd1(x[0], z[19], C)
	C, t[20] = madd1(x[0], z[20], C)
	C, t[21] = madd1(x[0], z[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)
	C, t[19] = madd2(x[1], z[19], t[19], C)
	C, t[20] = madd2(x[1], z[20], t[20], C)
	C, t[21] = madd2(x[1], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)
	C, t[19] = madd2(x[2], z[19], t[19], C)
	C, t[20] = madd2(x[2], z[20], t[20], C)
	C, t[21] = madd2(x[2], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)
	C, t[19] = madd2(x[3], z[19], t[19], C)
	C, t[20] = madd2(x[3], z[20], t[20], C)
	C, t[21] = madd2(x[3], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)
	C, t[19] = madd2(x[4], z[19], t[19], C)
	C, t[20] = madd2(x[4], z[20], t[20], C)
	C, t[21] = madd2(x[4], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)
	C, t[19] = madd2(x[5], z[19], t[19], C)
	C, t[20] = madd2(x[5], z[20], t[20], C)
	C, t[21] = madd2(x[5], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)
	C, t[19] = madd2(x[6], z[19], t[19], C)
	C, t[20] = madd2(x[6], z[20], t[20], C)
	C, t[21] = madd2(x[6], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)
	C, t[19] = madd2(x[7], z[19], t[19], C)
	C, t[20] = madd2(x[7], z[20], t[20], C)
	C, t[21] = madd2(x[7], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)
	C, t[19] = madd2(x[8], z[19], t[19], C)
	C, t[20] = madd2(x[8], z[20], t[20], C)
	C, t[21] = madd2(x[8], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)
	C, t[19] = madd2(x[9], z[19], t[19], C)
	C, t[20] = madd2(x[9], z[20], t[20], C)
	C, t[21] = madd2(x[9], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)
	C, t[19] = madd2(x[10], z[19], t[19], C)
	C, t[20] = madd2(x[10], z[20], t[20], C)
	C, t[21] = madd2(x[10], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)
	C, t[19] = madd2(x[11], z[19], t[19], C)
	C, t[20] = madd2(x[11], z[20], t[20], C)
	C, t[21] = madd2(x[11], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)
	C, t[19] = madd2(x[12], z[19], t[19], C)
	C, t[20] = madd2(x[12], z[20], t[20], C)
	C, t[21] = madd2(x[12], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)
	C, t[19] = madd2(x[13], z[19], t[19], C)
	C, t[20] = madd2(x[13], z[20], t[20], C)
	C, t[21] = madd2(x[13], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)
	C, t[19] = madd2(x[14], z[19], t[19], C)
	C, t[20] = madd2(x[14], z[20], t[20], C)
	C, t[21] = madd2(x[14], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)
	C, t[19] = madd2(x[15], z[19], t[19], C)
	C, t[20] = madd2(x[15], z[20], t[20], C)
	C, t[21] = madd2(x[15], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)
	C, t[19] = madd2(x[16], z[19], t[19], C)
	C, t[20] = madd2(x[16], z[20], t[20], C)
	C, t[21] = madd2(x[16], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)
	C, t[19] = madd2(x[17], z[19], t[19], C)
	C, t[20] = madd2(x[17], z[20], t[20], C)
	C, t[21] = madd2(x[17], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)
	C, t[19] = madd2(x[18], z[19], t[19], C)
	C, t[20] = madd2(x[18], z[20], t[20], C)
	C, t[21] = madd2(x[18], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[19], z[0], t[0])
	C, t[1] = madd2(x[19], z[1], t[1], C)
	C, t[2] = madd2(x[19], z[2], t[2], C)
	C, t[3] = madd2(x[19], z[3], t[3], C)
	C, t[4] = madd2(x[19], z[4], t[4], C)
	C, t[5] = madd2(x[19], z[5], t[5], C)
	C, t[6] = madd2(x[19], z[6], t[6], C)
	C, t[7] = madd2(x[19], z[7], t[7], C)
	C, t[8] = madd2(x[19], z[8], t[8], C)
	C, t[9] = madd2(x[19], z[9], t[9], C)
	C, t[10] = madd2(x[19], z[10], t[10], C)
	C, t[11] = madd2(x[19], z[11], t[11], C)
	C, t[12] = madd2(x[19], z[12], t[12], C)
	C, t[13] = madd2(x[19], z[13], t[13], C)
	C, t[14] = madd2(x[19], z[14], t[14], C)
	C, t[15] = madd2(x[19], z[15], t[15], C)
	C, t[16] = madd2(x[19], z[16], t[16], C)
	C, t[17] = madd2(x[19], z[17], t[17], C)
	C, t[18] = madd2(x[19], z[18], t[18], C)
	C, t[19] = madd2(x[19], z[19], t[19], C)
	C, t[20] = madd2(x[19], z[20], t[20], C)
	C, t[21] = madd2(x[19], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[20], z[0], t[0])
	C, t[1] = madd2(x[20], z[1], t[1], C)
	C, t[2] = madd2(x[20], z[2], t[2], C)
	C, t[3] = madd2(x[20], z[3], t[3], C)
	C, t[4] = madd2(x[20], z[4], t[4], C)
	C, t[5] = madd2(x[20], z[5], t[5], C)
	C, t[6] = madd2(x[20], z[6], t[6], C)
	C, t[7] = madd2(x[20], z[7], t[7], C)
	C, t[8] = madd2(x[20], z[8], t[8], C)
	C, t[9] = madd2(x[20], z[9], t[9], C)
	C, t[10] = madd2(x[20], z[10], t[10], C)
	C, t[11] = madd2(x[20], z[11], t[11], C)
	C, t[12] = madd2(x[20], z[12], t[12], C)
	C, t[13] = madd2(x[20], z[13], t[13], C)
	C, t[14] = madd2(x[20], z[14], t[14], C)
	C, t[15] = madd2(x[20], z[15], t[15], C)
	C, t[16] = madd2(x[20], z[16], t[16], C)
	C, t[17] = madd2(x[20], z[17], t[17], C)
	C, t[18] = madd2(x[20], z[18], t[18], C)
	C, t[19] = madd2(x[20], z[19], t[19], C)
	C, t[20] = madd2(x[20], z[20], t[20], C)
	C, t[21] = madd2(x[20], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[21], z[0], t[0])
	C, t[1] = madd2(x[21], z[1], t[1], C)
	C, t[2] = madd2(x[21], z[2], t[2], C)
	C, t[3] = madd2(x[21], z[3], t[3], C)
	C, t[4] = madd2(x[21], z[4], t[4], C)
	C, t[5] = madd2(x[21], z[5], t[5], C)
	C, t[6] = madd2(x[21], z[6], t[6], C)
	C, t[7] = madd2(x[21], z[7], t[7], C)
	C, t[8] = madd2(x[21], z[8], t[8], C)
	C, t[9] = madd2(x[21], z[9], t[9], C)
	C, t[10] = madd2(x[21], z[10], t[10], C)
	C, t[11] = madd2(x[21], z[11], t[11], C)
	C, t[12] = madd2(x[21], z[12], t[12], C)
	C, t[13] = madd2(x[21], z[13], t[13], C)
	C, t[14] = madd2(x[21], z[14], t[14], C)
	C, t[15] = madd2(x[21], z[15], t[15], C)
	C, t[16] = madd2(x[21], z[16], t[16], C)
	C, t[17] = madd2(x[21], z[17], t[17], C)
	C, t[18] = madd2(x[21], z[18], t[18], C)
	C, t[19] = madd2(x[21], z[19], t[19], C)
	C, t[20] = madd2(x[21], z[20], t[20], C)
	C, t[21] = madd2(x[21], z[21], t[21], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 5187576650881030217

	// -----------------------------------
	// Second loop
	C = madd0(m, 11182509323220968967, t[0])

	C, t[0] = madd2(m, 12277386743350026832, t[1], C)

	C, t[1] = madd2(m, 3788451946681127726, t[2], C)

	C, t[2] = madd2(m, 2076540892562422359, t[3], C)

	C, t[3] = madd2(m, 6021353187599704697, t[4], C)

	C, t[4] = madd2(m, 8714133073000128197, t[5], C)

	C, t[5] = madd2(m, 11260234862030385960, t[6], C)

	C, t[6] = madd2(m, 6588253764727692022, t[7], C)

	C, t[7] = madd2(m, 17233923985600527779, t[8], C)

	C, t[8] = madd2(m, 7337270491139583995, t[9], C)

	C, t[9] = madd2(m, 13217277602666049675, t[10], C)

	C, t[10] = madd2(m, 12405242750562237448, t[11], C)

	C, t[11] = madd2(m, 5952651243728665489, t[12], C)

	C, t[12] = madd2(m, 6918119128408692814, t[13], C)

	C, t[13] = madd2(m, 2947276444617460110, t[14], C)

	C, t[14] = madd2(m, 7371040666775850138, t[15], C)

	C, t[15] = madd2(m, 16966509084376907880, t[16], C)

	C, t[16] = madd2(m, 3456807708622809955, t[17], C)

	C, t[17] = madd2(m, 12070381646402890546, t[18], C)

	C, t[18] = madd2(m, 12477804805783342822, t[19], C)

	C, t[19] = madd2(m, 10376446694420918871, t[20], C)

	C, t[20] = madd3(m, 8114314425611669471, t[21], C, t[22])

	t[21], t[22] = bits.Add64(D, C, 0)

	if t[22] != 0 {
		// we need to reduce, we have a result on 23 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(t[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(t[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(t[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(t[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(t[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(t[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(t[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(t[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(t[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(t[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(t[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(t[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(t[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(t[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(t[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(t[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(t[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(t[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(t[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(t[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(t[21], 8114314425611669471, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]
	z[20] = t[20]
	z[21] = t[21]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[21] < 8114314425611669471 || (z[21] == 8114314425611669471 && (z[20] < 10376446694420918871 || (z[20] == 10376446694420918871 && (z[19] < 12477804805783342822 || (z[19] == 12477804805783342822 && (z[18] < 12070381646402890546 || (z[18] == 12070381646402890546 && (z[17] < 3456807708622809955 || (z[17] == 3456807708622809955 && (z[16] < 16966509084376907880 || (z[16] == 16966509084376907880 && (z[15] < 7371040666775850138 || (z[15] == 7371040666775850138 && (z[14] < 2947276444617460110 || (z[14] == 2947276444617460110 && (z[13] < 6918119128408692814 || (z[13] == 6918119128408692814 && (z[12] < 5952651243728665489 || (z[12] == 5952651243728665489 && (z[11] < 12405242750562237448 || (z[11] == 12405242750562237448 && (z[10] < 13217277602666049675 || (z[10] == 13217277602666049675 && (z[9] < 7337270491139583995 || (z[9] == 7337270491139583995 && (z[8] < 17233923985600527779 || (z[8] == 17233923985600527779 && (z[7] < 6588253764727692022 || (z[7] == 6588253764727692022 && (z[6] < 11260234862030385960 || (z[6] == 11260234862030385960 && (z[5] < 8714133073000128197 || (z[5] == 8714133073000128197 && (z[4] < 6021353187599704697 || (z[4] == 6021353187599704697 && (z[3] < 2076540892562422359 || (z[3] == 2076540892562422359 && (z[2] < 3788451946681127726 || (z[2] == 3788451946681127726 && (z[1] < 12277386743350026832 || (z[1] == 12277386743350026832 && (z[0] < 11182509323220968967))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 11182509323220968967, 0)
		z[1], b = bits.Sub64(z[1], 12277386743350026832, b)
		z[2], b = bits.Sub64(z[2], 3788451946681127726, b)
		z[3], b = bits.Sub64(z[3], 2076540892562422359, b)
		z[4], b = bits.Sub64(z[4], 6021353187599704697, b)
		z[5], b = bits.Sub64(z[5], 8714133073000128197, b)
		z[6], b = bits.Sub64(z[6], 11260234862030385960, b)
		z[7], b = bits.Sub64(z[7], 6588253764727692022, b)
		z[8], b = bits.Sub64(z[8], 17233923985600527779, b)
		z[9], b = bits.Sub64(z[9], 7337270491139583995, b)
		z[10], b = bits.Sub64(z[10], 13217277602666049675, b)
		z[11], b = bits.Sub64(z[11], 12405242750562237448, b)
		z[12], b = bits.Sub64(z[12], 5952651243728665489, b)
		z[13], b = bits.Sub64(z[13], 6918119128408692814, b)
		z[14], b = bits.Sub64(z[14], 2947276444617460110, b)
		z[15], b = bits.Sub64(z[15], 7371040666775850138, b)
		z[16], b = bits.Sub64(z[16], 16966509084376907880, b)
		z[17], b = bits.Sub64(z[17], 3456807708622809955, b)
		z[18], b = bits.Sub64(z[18], 12070381646402890546, b)
		z[19], b = bits.Sub64(z[19], 12477804805783342822, b)
		z[20], b = bits.Sub64(z[20], 10376446694420918871, b)
		z[21], _ = bits.Sub64(z[21], 8114314425611669471, b)
	}
	return z
}

func (z *Element22) Legendre() int {
	var l Element22
	// z^((q-1)/2)
	l.Exp(*z,
		5591254661610484483,
		6138693371675013416,
		11117598010195339671,
		10261642483135986987,
		12234048630654628156,
		4357066536500064098,
		5630117431015192980,
		12517498919218621819,
		17840334029655039697,
		12892007282424567805,
		6608638801333024837,
		15425993412135894532,
		2976325621864332744,
		3459059564204346407,
		1473638222308730055,
		3685520333387925069,
		17706626579043229748,
		1728403854311404977,
		6035190823201445273,
		15462274439746447219,
		14411595384065235243,
		4057157212805834735,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[21] == 2218115222486212672) && (l[20] == 16140594758577265488) && (l[19] == 11937878535852417586) && (l[18] == 12752724854613322139) && (l[17] == 11533128656463931704) && (l[16] == 2960469978665287471) && (l[15] == 3704662740157851339) && (l[14] == 12552191184474631395) && (l[13] == 4610505816892165987) && (l[12] == 6541441586252220636) && (l[11] == 12083002646294628334) && (l[10] == 10458932942087003881) && (l[9] == 3772203091430383624) && (l[8] == 2425640176218047673) && (l[7] == 5270236544254167570) && (l[6] == 14373018423358331311) && (l[5] == 1018477927709295221) && (l[4] == 6404037698510142221) && (l[3] == 14293662288584706897) && (l[2] == 10869840180347296162) && (l[1] == 12338714660719049566) && (l[0] == 14528469500977165298) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element22) Sqrt(x *Element22) *Element22 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element22
	y.Exp(*x,
		2795627330805242242,
		12292718722692282516,
		14782171041952445643,
		5130821241567993493,
		6117024315327314078,
		2178533268250032049,
		12038430752362372298,
		15482121496464086717,
		18143539051682295656,
		15669375678067059710,
		3304319400666512418,
		7712996706067947266,
		10711534847786942180,
		10952901818956949011,
		9960191148009140835,
		1842760166693962534,
		18076685326376390682,
		10087573964010478296,
		12240967448455498444,
		16954509256727999417,
		16429169728887393429,
		2028578606402917367,
	)
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	} else {
		return nil
	}
}

// Square z = x * x mod q
func (z *Element22) Square(x *Element22) *Element22 {
	return z.Mul(x, x)
}
