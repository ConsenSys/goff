// Code generated by goff DO NOT EDIT
package generated

import (
	"crypto/rand"
	"math/big"
	"math/bits"
	mrand "math/rand"
	"testing"
)

func TestELEMENT02CorrectnessAgainstBigInt(t *testing.T) {
	modulus, _ := new(big.Int).SetString("165299026649368002216522103813648136491", 10)
	cmpEandB := func(e *Element02, b *big.Int, name string) {
		var _e big.Int
		if e.FromMont().ToBigInt(&_e).Cmp(b) != 0 {
			t.Fatal(name, "failed")
		}
	}
	var modulusMinusOne, one big.Int
	one.SetUint64(1)

	modulusMinusOne.Sub(modulus, &one)

	var n int
	if testing.Short() {
		n = 10
	} else {
		n = 500
	}

	for i := 0; i < n; i++ {

		// sample 2 random big int
		b1, _ := rand.Int(rand.Reader, modulus)
		b2, _ := rand.Int(rand.Reader, modulus)
		rExp := mrand.Uint64()

		// adding edge cases
		// TODO need more edge cases
		switch i {
		case 0:
			rExp = 0
			b1.SetUint64(0)
		case 1:
			b2.SetUint64(0)
		case 2:
			b1.SetUint64(0)
			b2.SetUint64(0)
		case 3:
			rExp = 0
		case 4:
			rExp = 1
		case 5:
			rExp = ^uint64(0) // max uint
		case 6:
			rExp = 2
			b1.Set(&modulusMinusOne)
		case 7:
			b2.Set(&modulusMinusOne)
		case 8:
			b1.Set(&modulusMinusOne)
			b2.Set(&modulusMinusOne)
		}

		rbExp := new(big.Int).SetUint64(rExp)

		var bMul, bAdd, bSub, bDiv, bNeg, bLsh, bInv, bExp, bExp2, bSquare big.Int

		// e1 = mont(b1), e2 = mont(b2)
		var e1, e2, eMul, eAdd, eSub, eDiv, eNeg, eLsh, eInv, eExp, eExp2, eSquare, eMulAssign, eSubAssign, eAddAssign Element02
		e1.SetBigInt(b1)
		e2.SetBigInt(b2)

		// (e1*e2).FromMont() === b1*b2 mod q ... etc
		eSquare.Square(&e1)
		eMul.Mul(&e1, &e2)
		eMulAssign.Set(&e1)
		eMulAssign.MulAssign(&e2)
		eAdd.Add(&e1, &e2)
		eAddAssign.Set(&e1)
		eAddAssign.AddAssign(&e2)
		eSub.Sub(&e1, &e2)
		eSubAssign.Set(&e1)
		eSubAssign.SubAssign(&e2)
		eDiv.Div(&e1, &e2)
		eNeg.Neg(&e1)
		eInv.Inverse(&e1)
		eExp.Exp(e1, rExp)
		bits := b2.Bits()
		exponent := make([]uint64, len(bits))
		for k := 0; k < len(bits); k++ {
			exponent[k] = uint64(bits[k])
		}
		eExp2.Exp(e1, exponent...)
		eLsh.Double(&e1)

		// same operations with big int
		bAdd.Add(b1, b2).Mod(&bAdd, modulus)
		bMul.Mul(b1, b2).Mod(&bMul, modulus)
		bSquare.Mul(b1, b1).Mod(&bSquare, modulus)
		bSub.Sub(b1, b2).Mod(&bSub, modulus)
		bDiv.ModInverse(b2, modulus)
		bDiv.Mul(&bDiv, b1).
			Mod(&bDiv, modulus)
		bNeg.Neg(b1).Mod(&bNeg, modulus)

		bInv.ModInverse(b1, modulus)
		bExp.Exp(b1, rbExp, modulus)
		bExp2.Exp(b1, b2, modulus)
		bLsh.Lsh(b1, 1).Mod(&bLsh, modulus)

		cmpEandB(&eSquare, &bSquare, "Square")
		cmpEandB(&eMul, &bMul, "Mul")
		cmpEandB(&eMulAssign, &bMul, "MulAssign")
		cmpEandB(&eAdd, &bAdd, "Add")
		cmpEandB(&eAddAssign, &bAdd, "AddAssign")
		cmpEandB(&eSub, &bSub, "Sub")
		cmpEandB(&eSubAssign, &bSub, "SubAssign")
		cmpEandB(&eDiv, &bDiv, "Div")
		cmpEandB(&eNeg, &bNeg, "Neg")
		cmpEandB(&eInv, &bInv, "Inv")
		cmpEandB(&eExp, &bExp, "Exp")
		cmpEandB(&eExp2, &bExp2, "Exp multi words")
		cmpEandB(&eLsh, &bLsh, "Lsh")

		// legendre symbol
		if e1.Legendre() != big.Jacobi(b1, modulus) {
			t.Fatal("legendre symbol computation failed")
		}
		if e2.Legendre() != big.Jacobi(b2, modulus) {
			t.Fatal("legendre symbol computation failed")
		}

		// sqrt
		var eSqrt Element02
		var bSqrt big.Int
		bSqrt.ModSqrt(b1, modulus)
		eSqrt.Sqrt(&e1)
		cmpEandB(&eSqrt, &bSqrt, "Sqrt")
	}
}

func TestELEMENT02IsRandom(t *testing.T) {
	for i := 0; i < 50; i++ {
		var x, y Element02
		x.SetRandom()
		y.SetRandom()
		if x.Equal(&y) {
			t.Fatal("2 random numbers are unlikely to be equal")
		}
	}
}

// -------------------------------------------------------------------------------------------------
// benchmarks
// most benchmarks are rudimentary and should sample a large number of random inputs
// or be run multiple times to ensure it didn't measure the fastest path of the function

var benchResElement02 Element02

func BenchmarkInverseELEMENT02(b *testing.B) {
	var x Element02
	x.SetRandom()
	benchResElement02.SetRandom()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		benchResElement02.Inverse(&x)
	}

}
func BenchmarkExpELEMENT02(b *testing.B) {
	var x Element02
	x.SetRandom()
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Exp(x, mrand.Uint64())
	}
}

func BenchmarkDoubleELEMENT02(b *testing.B) {
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Double(&benchResElement02)
	}
}

func BenchmarkAddELEMENT02(b *testing.B) {
	var x Element02
	x.SetRandom()
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Add(&x, &benchResElement02)
	}
}

func BenchmarkSubELEMENT02(b *testing.B) {
	var x Element02
	x.SetRandom()
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Sub(&x, &benchResElement02)
	}
}

func BenchmarkNegELEMENT02(b *testing.B) {
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Neg(&benchResElement02)
	}
}

func BenchmarkDivELEMENT02(b *testing.B) {
	var x Element02
	x.SetRandom()
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Div(&x, &benchResElement02)
	}
}

func BenchmarkFromMontELEMENT02(b *testing.B) {
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.FromMont()
	}
}

func BenchmarkToMontELEMENT02(b *testing.B) {
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.ToMont()
	}
}
func BenchmarkSquareELEMENT02(b *testing.B) {
	benchResElement02.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Square(&benchResElement02)
	}
}

func BenchmarkSqrtELEMENT02(b *testing.B) {
	var a Element02
	a.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.Sqrt(&a)
	}
}

func BenchmarkMulAssignELEMENT02(b *testing.B) {
	x := Element02{
		12656761262559661015,
		7506484415656062422,
	}
	benchResElement02.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.MulAssign(&x)
	}
}

// Montgomery multiplication benchmarks
func (z *Element02) mulCIOS(x *Element02) *Element02 {

	var t [3]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 776670672527082109

	// -----------------------------------
	// Second loop
	C = madd0(m, 5384925885952407851, t[0])

	C, t[0] = madd3(m, 8960878190149204040, t[1], C, t[2])

	t[1], t[2] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 776670672527082109

	// -----------------------------------
	// Second loop
	C = madd0(m, 5384925885952407851, t[0])

	C, t[0] = madd3(m, 8960878190149204040, t[1], C, t[2])

	t[1], t[2] = bits.Add64(D, C, 0)

	if t[2] != 0 {
		// we need to reduce, we have a result on 3 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 5384925885952407851, 0)
		z[1], _ = bits.Sub64(t[1], 8960878190149204040, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[1] < 8960878190149204040 || (z[1] == 8960878190149204040 && (z[0] < 5384925885952407851))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5384925885952407851, 0)
		z[1], _ = bits.Sub64(z[1], 8960878190149204040, b)
	}
	return z
}

func (z *Element02) mulNoCarry(x *Element02) *Element02 {

	var t [2]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 776670672527082109
		c[2] = madd0(m, 5384925885952407851, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		t[1], t[0] = madd3(m, 8960878190149204040, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 776670672527082109
		c[2] = madd0(m, 5384925885952407851, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		z[1], z[0] = madd3(m, 8960878190149204040, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[1] < 8960878190149204040 || (z[1] == 8960878190149204040 && (z[0] < 5384925885952407851))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5384925885952407851, 0)
		z[1], _ = bits.Sub64(z[1], 8960878190149204040, b)
	}
	return z
}

func (z *Element02) mulFIPS(x *Element02) *Element02 {

	var p [2]uint64
	var t, u, v uint64
	u, v = bits.Mul64(z[0], x[0])
	p[0] = v * 776670672527082109
	u, v, _ = madd(p[0], 5384925885952407851, 0, u, v)
	t, u, v = madd(z[0], x[1], 0, u, v)
	t, u, v = madd(p[0], 8960878190149204040, t, u, v)
	t, u, v = madd(z[1], x[0], t, u, v)
	p[1] = v * 776670672527082109
	u, v, _ = madd(p[1], 5384925885952407851, t, u, v)
	t, u, v = madd(z[1], x[1], t, u, v)
	u, v, p[0] = madd(p[1], 8960878190149204040, t, u, v)

	p[1] = v
	z[1] = p[1]
	z[0] = p[0]
	// copy(z[:], p[:])

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[1] < 8960878190149204040 || (z[1] == 8960878190149204040 && (z[0] < 5384925885952407851))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 5384925885952407851, 0)
		z[1], _ = bits.Sub64(z[1], 8960878190149204040, b)
	}
	return z
}

func BenchmarkMulCIOSELEMENT02(b *testing.B) {
	x := Element02{
		12656761262559661015,
		7506484415656062422,
	}
	benchResElement02.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.mulCIOS(&x)
	}
}

func BenchmarkMulFIPSELEMENT02(b *testing.B) {
	x := Element02{
		12656761262559661015,
		7506484415656062422,
	}
	benchResElement02.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.mulFIPS(&x)
	}
}

func BenchmarkMulNoCarryELEMENT02(b *testing.B) {
	x := Element02{
		12656761262559661015,
		7506484415656062422,
	}
	benchResElement02.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement02.mulNoCarry(&x)
	}
}
