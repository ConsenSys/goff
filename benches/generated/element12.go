// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 751895730747394626674812254458843865462430971652870816210304867549296394781435472441322526634619849441650007973177977276611468653841353315296208364129204290764235424864012847714610482461203136090255782725876698651312309563710466401
// Code generated by goff DO NOT EDIT
// Element12 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"

	"unsafe"
)

// Element12 represents a field element stored on 12 words (uint64)
// Element12 are assumed to be in Montgomery form in all methods
type Element12 [12]uint64

// Element12Limbs number of 64 bits words needed to represent Element12
const Element12Limbs = 12

// Element12Bits number bits needed to represent Element12
const Element12Bits = 767

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element12) SetUint64(v uint64) *Element12 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element12) Set(x *Element12) *Element12 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	return z
}

// SetZero z = 0
func (z *Element12) SetZero() *Element12 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element12) SetOne() *Element12 {
	z[0] = 1899054442914852158
	z[1] = 10866921741573563519
	z[2] = 14484744119199601039
	z[3] = 7926184976847370845
	z[4] = 5168696743079736799
	z[5] = 4707247953358279877
	z[6] = 3522503554989961626
	z[7] = 14111242590327254876
	z[8] = 1369972293281562906
	z[9] = 17184204952295711259
	z[10] = 10528110180890721490
	z[11] = 578961167994448960
	return z
}

// Neg z = q - x
func (z *Element12) Neg(x *Element12) *Element12 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(8273844815397349729, x[0], 0)
	z[1], borrow = bits.Sub64(3789911166067994048, x[1], borrow)
	z[2], borrow = bits.Sub64(1980999977254975288, x[2], borrow)
	z[3], borrow = bits.Sub64(5260279548431090385, x[3], borrow)
	z[4], borrow = bits.Sub64(6639023665314907408, x[4], borrow)
	z[5], borrow = bits.Sub64(16093120097030411677, x[5], borrow)
	z[6], borrow = bits.Sub64(16685492296214570802, x[6], borrow)
	z[7], borrow = bits.Sub64(11391122778545924177, x[7], borrow)
	z[8], borrow = bits.Sub64(8538385890213994354, x[8], borrow)
	z[9], borrow = bits.Sub64(9854641597561695986, x[9], borrow)
	z[10], borrow = bits.Sub64(13182688983264190870, x[10], borrow)
	z[11], _ = bits.Sub64(8933891452857551327, x[11], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element12) Div(x, y *Element12) *Element12 {
	var yInv Element12
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element12) Equal(x *Element12) bool {
	return (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element12) IsZero() bool {
	return (z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element12ModulusBigInt big.Int
var onceelement12Modulus sync.Once

func element12ModulusBigInt() *big.Int {
	onceelement12Modulus.Do(func() {
		_element12ModulusBigInt.SetString("751895730747394626674812254458843865462430971652870816210304867549296394781435472441322526634619849441650007973177977276611468653841353315296208364129204290764235424864012847714610482461203136090255782725876698651312309563710466401", 10)
	})
	return &_element12ModulusBigInt
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element12) Inverse(x *Element12) *Element12 {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element12{
		8273844815397349729,
		3789911166067994048,
		1980999977254975288,
		5260279548431090385,
		6639023665314907408,
		16093120097030411677,
		16685492296214570802,
		11391122778545924177,
		8538385890213994354,
		9854641597561695986,
		13182688983264190870,
		8933891452857551327,
	}

	// initialize s = r^2
	var s = Element12{
		13819282429549430712,
		11945821257170307988,
		18364194473548453395,
		159965930876665593,
		15822911771152384576,
		10041210601779588868,
		12316334160257597868,
		8620447076019426173,
		15531630841755893066,
		13596835729947908395,
		10023107229061009484,
		3220318520580597111,
	}

	// r = 0
	r := Element12{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger, uIsOne, vIsOne bool

	for !uIsOne && !vIsOne {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[11] << 63
			v[11] >>= 1
			t = t2
			t2 = v[10] << 63
			v[10] = (v[10] >> 1) | t
			t = t2
			t2 = v[9] << 63
			v[9] = (v[9] >> 1) | t
			t = t2
			t2 = v[8] << 63
			v[8] = (v[8] >> 1) | t
			t = t2
			t2 = v[7] << 63
			v[7] = (v[7] >> 1) | t
			t = t2
			t2 = v[6] << 63
			v[6] = (v[6] >> 1) | t
			t = t2
			t2 = v[5] << 63
			v[5] = (v[5] >> 1) | t
			t = t2
			t2 = v[4] << 63
			v[4] = (v[4] >> 1) | t
			t = t2
			t2 = v[3] << 63
			v[3] = (v[3] >> 1) | t
			t = t2
			t2 = v[2] << 63
			v[2] = (v[2] >> 1) | t
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 8273844815397349729, 0)
				s[1], carry = bits.Add64(s[1], 3789911166067994048, carry)
				s[2], carry = bits.Add64(s[2], 1980999977254975288, carry)
				s[3], carry = bits.Add64(s[3], 5260279548431090385, carry)
				s[4], carry = bits.Add64(s[4], 6639023665314907408, carry)
				s[5], carry = bits.Add64(s[5], 16093120097030411677, carry)
				s[6], carry = bits.Add64(s[6], 16685492296214570802, carry)
				s[7], carry = bits.Add64(s[7], 11391122778545924177, carry)
				s[8], carry = bits.Add64(s[8], 8538385890213994354, carry)
				s[9], carry = bits.Add64(s[9], 9854641597561695986, carry)
				s[10], carry = bits.Add64(s[10], 13182688983264190870, carry)
				s[11], _ = bits.Add64(s[11], 8933891452857551327, carry)

			}

			// s = s >> 1
			t2 = s[11] << 63
			s[11] >>= 1
			t = t2
			t2 = s[10] << 63
			s[10] = (s[10] >> 1) | t
			t = t2
			t2 = s[9] << 63
			s[9] = (s[9] >> 1) | t
			t = t2
			t2 = s[8] << 63
			s[8] = (s[8] >> 1) | t
			t = t2
			t2 = s[7] << 63
			s[7] = (s[7] >> 1) | t
			t = t2
			t2 = s[6] << 63
			s[6] = (s[6] >> 1) | t
			t = t2
			t2 = s[5] << 63
			s[5] = (s[5] >> 1) | t
			t = t2
			t2 = s[4] << 63
			s[4] = (s[4] >> 1) | t
			t = t2
			t2 = s[3] << 63
			s[3] = (s[3] >> 1) | t
			t = t2
			t2 = s[2] << 63
			s[2] = (s[2] >> 1) | t
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[11] << 63
			u[11] >>= 1
			t = t2
			t2 = u[10] << 63
			u[10] = (u[10] >> 1) | t
			t = t2
			t2 = u[9] << 63
			u[9] = (u[9] >> 1) | t
			t = t2
			t2 = u[8] << 63
			u[8] = (u[8] >> 1) | t
			t = t2
			t2 = u[7] << 63
			u[7] = (u[7] >> 1) | t
			t = t2
			t2 = u[6] << 63
			u[6] = (u[6] >> 1) | t
			t = t2
			t2 = u[5] << 63
			u[5] = (u[5] >> 1) | t
			t = t2
			t2 = u[4] << 63
			u[4] = (u[4] >> 1) | t
			t = t2
			t2 = u[3] << 63
			u[3] = (u[3] >> 1) | t
			t = t2
			t2 = u[2] << 63
			u[2] = (u[2] >> 1) | t
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 8273844815397349729, 0)
				r[1], carry = bits.Add64(r[1], 3789911166067994048, carry)
				r[2], carry = bits.Add64(r[2], 1980999977254975288, carry)
				r[3], carry = bits.Add64(r[3], 5260279548431090385, carry)
				r[4], carry = bits.Add64(r[4], 6639023665314907408, carry)
				r[5], carry = bits.Add64(r[5], 16093120097030411677, carry)
				r[6], carry = bits.Add64(r[6], 16685492296214570802, carry)
				r[7], carry = bits.Add64(r[7], 11391122778545924177, carry)
				r[8], carry = bits.Add64(r[8], 8538385890213994354, carry)
				r[9], carry = bits.Add64(r[9], 9854641597561695986, carry)
				r[10], carry = bits.Add64(r[10], 13182688983264190870, carry)
				r[11], _ = bits.Add64(r[11], 8933891452857551327, carry)

			}

			// r = r >> 1
			t2 = r[11] << 63
			r[11] >>= 1
			t = t2
			t2 = r[10] << 63
			r[10] = (r[10] >> 1) | t
			t = t2
			t2 = r[9] << 63
			r[9] = (r[9] >> 1) | t
			t = t2
			t2 = r[8] << 63
			r[8] = (r[8] >> 1) | t
			t = t2
			t2 = r[7] << 63
			r[7] = (r[7] >> 1) | t
			t = t2
			t2 = r[6] << 63
			r[6] = (r[6] >> 1) | t
			t = t2
			t2 = r[5] << 63
			r[5] = (r[5] >> 1) | t
			t = t2
			t2 = r[4] << 63
			r[4] = (r[4] >> 1) | t
			t = t2
			t2 = r[3] << 63
			r[3] = (r[3] >> 1) | t
			t = t2
			t2 = r[2] << 63
			r[2] = (r[2] >> 1) | t
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[11] < u[11] || (v[11] == u[11] && (v[10] < u[10] || (v[10] == u[10] && (v[9] < u[9] || (v[9] == u[9] && (v[8] < u[8] || (v[8] == u[8] && (v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], borrow = bits.Sub64(v[7], u[7], borrow)
			v[8], borrow = bits.Sub64(v[8], u[8], borrow)
			v[9], borrow = bits.Sub64(v[9], u[9], borrow)
			v[10], borrow = bits.Sub64(v[10], u[10], borrow)
			v[11], _ = bits.Sub64(v[11], u[11], borrow)

			// r >= s
			bigger = !(r[11] < s[11] || (r[11] == s[11] && (r[10] < s[10] || (r[10] == s[10] && (r[9] < s[9] || (r[9] == s[9] && (r[8] < s[8] || (r[8] == s[8] && (r[7] < s[7] || (r[7] == s[7] && (r[6] < s[6] || (r[6] == s[6] && (r[5] < s[5] || (r[5] == s[5] && (r[4] < s[4] || (r[4] == s[4] && (r[3] < s[3] || (r[3] == s[3] && (r[2] < s[2] || (r[2] == s[2] && (r[1] < s[1] || (r[1] == s[1] && (r[0] < s[0])))))))))))))))))))))))

			if bigger {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 8273844815397349729, 0)
				s[1], carry = bits.Add64(s[1], 3789911166067994048, carry)
				s[2], carry = bits.Add64(s[2], 1980999977254975288, carry)
				s[3], carry = bits.Add64(s[3], 5260279548431090385, carry)
				s[4], carry = bits.Add64(s[4], 6639023665314907408, carry)
				s[5], carry = bits.Add64(s[5], 16093120097030411677, carry)
				s[6], carry = bits.Add64(s[6], 16685492296214570802, carry)
				s[7], carry = bits.Add64(s[7], 11391122778545924177, carry)
				s[8], carry = bits.Add64(s[8], 8538385890213994354, carry)
				s[9], carry = bits.Add64(s[9], 9854641597561695986, carry)
				s[10], carry = bits.Add64(s[10], 13182688983264190870, carry)
				s[11], _ = bits.Add64(s[11], 8933891452857551327, carry)

			}

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], borrow = bits.Sub64(s[7], r[7], borrow)
			s[8], borrow = bits.Sub64(s[8], r[8], borrow)
			s[9], borrow = bits.Sub64(s[9], r[9], borrow)
			s[10], borrow = bits.Sub64(s[10], r[10], borrow)
			s[11], _ = bits.Sub64(s[11], r[11], borrow)

		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], borrow = bits.Sub64(u[7], v[7], borrow)
			u[8], borrow = bits.Sub64(u[8], v[8], borrow)
			u[9], borrow = bits.Sub64(u[9], v[9], borrow)
			u[10], borrow = bits.Sub64(u[10], v[10], borrow)
			u[11], _ = bits.Sub64(u[11], v[11], borrow)

			// s >= r
			bigger = !(s[11] < r[11] || (s[11] == r[11] && (s[10] < r[10] || (s[10] == r[10] && (s[9] < r[9] || (s[9] == r[9] && (s[8] < r[8] || (s[8] == r[8] && (s[7] < r[7] || (s[7] == r[7] && (s[6] < r[6] || (s[6] == r[6] && (s[5] < r[5] || (s[5] == r[5] && (s[4] < r[4] || (s[4] == r[4] && (s[3] < r[3] || (s[3] == r[3] && (s[2] < r[2] || (s[2] == r[2] && (s[1] < r[1] || (s[1] == r[1] && (s[0] < r[0])))))))))))))))))))))))

			if bigger {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 8273844815397349729, 0)
				r[1], carry = bits.Add64(r[1], 3789911166067994048, carry)
				r[2], carry = bits.Add64(r[2], 1980999977254975288, carry)
				r[3], carry = bits.Add64(r[3], 5260279548431090385, carry)
				r[4], carry = bits.Add64(r[4], 6639023665314907408, carry)
				r[5], carry = bits.Add64(r[5], 16093120097030411677, carry)
				r[6], carry = bits.Add64(r[6], 16685492296214570802, carry)
				r[7], carry = bits.Add64(r[7], 11391122778545924177, carry)
				r[8], carry = bits.Add64(r[8], 8538385890213994354, carry)
				r[9], carry = bits.Add64(r[9], 9854641597561695986, carry)
				r[10], carry = bits.Add64(r[10], 13182688983264190870, carry)
				r[11], _ = bits.Add64(r[11], 8933891452857551327, carry)

			}

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], borrow = bits.Sub64(r[7], s[7], borrow)
			r[8], borrow = bits.Sub64(r[8], s[8], borrow)
			r[9], borrow = bits.Sub64(r[9], s[9], borrow)
			r[10], borrow = bits.Sub64(r[10], s[10], borrow)
			r[11], _ = bits.Sub64(r[11], s[11], borrow)

		}
		uIsOne = (u[0] == 1) && (u[11]|u[10]|u[9]|u[8]|u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0
		vIsOne = (v[0] == 1) && (v[11]|v[10]|v[9]|v[8]|v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0
	}

	if uIsOne {
		z.Set(&r)
	} else {
		z.Set(&s)
	}

	return z
}

// SetRandom sets z to a random element < q
func (z *Element12) SetRandom() *Element12 {
	bytes := make([]byte, 96)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[11] %= 8933891452857551327

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element12) Add(x, y *Element12) *Element12 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], _ = bits.Add64(x[11], y[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element12) AddAssign(x *Element12) *Element12 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], _ = bits.Add64(z[11], x[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element12) Double(x *Element12) *Element12 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], _ = bits.Add64(x[11], x[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element12) Sub(x, y *Element12) *Element12 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 8273844815397349729, 0)
		z[1], c = bits.Add64(z[1], 3789911166067994048, c)
		z[2], c = bits.Add64(z[2], 1980999977254975288, c)
		z[3], c = bits.Add64(z[3], 5260279548431090385, c)
		z[4], c = bits.Add64(z[4], 6639023665314907408, c)
		z[5], c = bits.Add64(z[5], 16093120097030411677, c)
		z[6], c = bits.Add64(z[6], 16685492296214570802, c)
		z[7], c = bits.Add64(z[7], 11391122778545924177, c)
		z[8], c = bits.Add64(z[8], 8538385890213994354, c)
		z[9], c = bits.Add64(z[9], 9854641597561695986, c)
		z[10], c = bits.Add64(z[10], 13182688983264190870, c)
		z[11], _ = bits.Add64(z[11], 8933891452857551327, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element12) SubAssign(x *Element12) *Element12 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 8273844815397349729, 0)
		z[1], c = bits.Add64(z[1], 3789911166067994048, c)
		z[2], c = bits.Add64(z[2], 1980999977254975288, c)
		z[3], c = bits.Add64(z[3], 5260279548431090385, c)
		z[4], c = bits.Add64(z[4], 6639023665314907408, c)
		z[5], c = bits.Add64(z[5], 16093120097030411677, c)
		z[6], c = bits.Add64(z[6], 16685492296214570802, c)
		z[7], c = bits.Add64(z[7], 11391122778545924177, c)
		z[8], c = bits.Add64(z[8], 8538385890213994354, c)
		z[9], c = bits.Add64(z[9], 9854641597561695986, c)
		z[10], c = bits.Add64(z[10], 13182688983264190870, c)
		z[11], _ = bits.Add64(z[11], 8933891452857551327, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element12) Exp(x Element12, exponent ...uint64) *Element12 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element12) FromMont() *Element12 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14044005451381671263
		C := madd0(m, 8273844815397349729, z[0])
		C, z[0] = madd2(m, 3789911166067994048, z[1], C)
		C, z[1] = madd2(m, 1980999977254975288, z[2], C)
		C, z[2] = madd2(m, 5260279548431090385, z[3], C)
		C, z[3] = madd2(m, 6639023665314907408, z[4], C)
		C, z[4] = madd2(m, 16093120097030411677, z[5], C)
		C, z[5] = madd2(m, 16685492296214570802, z[6], C)
		C, z[6] = madd2(m, 11391122778545924177, z[7], C)
		C, z[7] = madd2(m, 8538385890213994354, z[8], C)
		C, z[8] = madd2(m, 9854641597561695986, z[9], C)
		C, z[9] = madd2(m, 13182688983264190870, z[10], C)
		C, z[10] = madd2(m, 8933891452857551327, z[11], C)
		z[11] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element12) ToMont() *Element12 {
	var rSquare = Element12{
		13819282429549430712,
		11945821257170307988,
		18364194473548453395,
		159965930876665593,
		15822911771152384576,
		10041210601779588868,
		12316334160257597868,
		8620447076019426173,
		15531630841755893066,
		13596835729947908395,
		10023107229061009484,
		3220318520580597111,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element12) ToRegular() Element12 {
	return *z.FromMont()
}

// String returns the string form of an Element12 in Montgomery form
func (z *Element12) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element12) ToBigInt(res *big.Int) *big.Int {
	bits := (*[12]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element12) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[12]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element12) SetBigInt(v *big.Int) *Element12 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element12ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element12) SetString(s string) *Element12 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element12.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element12) Mul(x, y *Element12) *Element12 {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd1(v, y[10], c[1])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd1(v, y[11], c[1])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 11
		v := x[11]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], z[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], z[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		z[11], z[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element12) MulAssign(x *Element12) *Element12 {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd1(v, x[6], c[1])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd1(v, x[7], c[1])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd1(v, x[8], c[1])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd1(v, x[9], c[1])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd1(v, x[10], c[1])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd1(v, x[11], c[1])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 5
		v := z[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 6
		v := z[6]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 7
		v := z[7]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 8
		v := z[8]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 9
		v := z[9]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 10
		v := z[10]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}
	{
		// round 11
		v := z[11]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 14044005451381671263
		c[2] = madd0(m, 8273844815397349729, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 3789911166067994048, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 1980999977254975288, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 5260279548431090385, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 6639023665314907408, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], z[4] = madd2(m, 16093120097030411677, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], z[5] = madd2(m, 16685492296214570802, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], z[6] = madd2(m, 11391122778545924177, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], z[7] = madd2(m, 8538385890213994354, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], z[8] = madd2(m, 9854641597561695986, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], z[9] = madd2(m, 13182688983264190870, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		z[11], z[10] = madd3(m, 8933891452857551327, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8933891452857551327 || (z[11] == 8933891452857551327 && (z[10] < 13182688983264190870 || (z[10] == 13182688983264190870 && (z[9] < 9854641597561695986 || (z[9] == 9854641597561695986 && (z[8] < 8538385890213994354 || (z[8] == 8538385890213994354 && (z[7] < 11391122778545924177 || (z[7] == 11391122778545924177 && (z[6] < 16685492296214570802 || (z[6] == 16685492296214570802 && (z[5] < 16093120097030411677 || (z[5] == 16093120097030411677 && (z[4] < 6639023665314907408 || (z[4] == 6639023665314907408 && (z[3] < 5260279548431090385 || (z[3] == 5260279548431090385 && (z[2] < 1980999977254975288 || (z[2] == 1980999977254975288 && (z[1] < 3789911166067994048 || (z[1] == 3789911166067994048 && (z[0] < 8273844815397349729))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 8273844815397349729, 0)
		z[1], b = bits.Sub64(z[1], 3789911166067994048, b)
		z[2], b = bits.Sub64(z[2], 1980999977254975288, b)
		z[3], b = bits.Sub64(z[3], 5260279548431090385, b)
		z[4], b = bits.Sub64(z[4], 6639023665314907408, b)
		z[5], b = bits.Sub64(z[5], 16093120097030411677, b)
		z[6], b = bits.Sub64(z[6], 16685492296214570802, b)
		z[7], b = bits.Sub64(z[7], 11391122778545924177, b)
		z[8], b = bits.Sub64(z[8], 8538385890213994354, b)
		z[9], b = bits.Sub64(z[9], 9854641597561695986, b)
		z[10], b = bits.Sub64(z[10], 13182688983264190870, b)
		z[11], _ = bits.Sub64(z[11], 8933891452857551327, b)
	}
	return z
}

func (z *Element12) Legendre() int {
	var l Element12
	// z^((q-1)/2)
	l.Exp(*z,
		4136922407698674864,
		1894955583033997024,
		10213872025482263452,
		2630139774215545192,
		12542883869512229512,
		8046560048515205838,
		17566118184962061209,
		5695561389272962088,
		4269192945106997177,
		4927320798780847993,
		15814716528486871243,
		4466945726428775663,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[11] == 578961167994448960) && (l[10] == 10528110180890721490) && (l[9] == 17184204952295711259) && (l[8] == 1369972293281562906) && (l[7] == 14111242590327254876) && (l[6] == 3522503554989961626) && (l[5] == 4707247953358279877) && (l[4] == 5168696743079736799) && (l[3] == 7926184976847370845) && (l[2] == 14484744119199601039) && (l[1] == 10866921741573563519) && (l[0] == 1899054442914852158) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element12) Sqrt(x *Element12) *Element12 {
	// q ≡ 1 (mod 4)
	// see modSqrtTonelliShanks in math/big/int.go
	// using https://www.maa.org/sites/default/files/pdf/upload_library/22/Polya/07468342.di020786.02p0470a.pdf

	var y, b, t, w Element12
	// w = x^((s-1)/2))
	w.Exp(*x,
		129278825240583589,
		16200118426465670071,
		4930869519223708636,
		4693877886371623691,
		8462415653170186004,
		14662973809101687382,
		5160627211707452316,
		14589505101000367265,
		14544931087120180861,
		6495047050299559867,
		9141121176066567046,
		139592053950899239,
	)

	// y = x^((s+1)/2)) = w * x
	y.Mul(x, &w)

	// b = x^s = w * w * x = y * x
	b.Mul(&w, &y)

	// g = nonResidue ^ s
	var g = Element12{
		3011911405708480522,
		9793725928352457984,
		17180633969280744589,
		3218267904138802143,
		9302703774286241045,
		15179067730698321707,
		17243087680873393520,
		3970574865456603042,
		11591678347944919527,
		5259715424968970269,
		16923967853859920734,
		188933864521447390,
	}
	r := uint64(5)

	// compute legendre symbol
	// t = x^((q-1)/2) = r-1 squaring of x^s
	t.Set(&b)
	for i := uint64(0); i < r-1; i++ {
		t.Square(&t)
	}
	if t.IsZero() {
		return z.SetZero()
	}
	if !((t[11] == 578961167994448960) && (t[10] == 10528110180890721490) && (t[9] == 17184204952295711259) && (t[8] == 1369972293281562906) && (t[7] == 14111242590327254876) && (t[6] == 3522503554989961626) && (t[5] == 4707247953358279877) && (t[4] == 5168696743079736799) && (t[3] == 7926184976847370845) && (t[2] == 14484744119199601039) && (t[1] == 10866921741573563519) && (t[0] == 1899054442914852158)) {
		// t != 1, we don't have a square root
		return nil
	}
	for {
		var m uint64
		t.Set(&b)

		// for t != 1
		for !((t[11] == 578961167994448960) && (t[10] == 10528110180890721490) && (t[9] == 17184204952295711259) && (t[8] == 1369972293281562906) && (t[7] == 14111242590327254876) && (t[6] == 3522503554989961626) && (t[5] == 4707247953358279877) && (t[4] == 5168696743079736799) && (t[3] == 7926184976847370845) && (t[2] == 14484744119199601039) && (t[1] == 10866921741573563519) && (t[0] == 1899054442914852158)) {
			t.Square(&t)
			m++
		}

		if m == 0 {
			return z.Set(&y)
		}
		// t = g^(2^(r-m-1)) mod q
		ge := int(r - m - 1)
		t = g
		for ge > 0 {
			t.Square(&t)
			ge--
		}

		g.Square(&t)
		y.MulAssign(&t)
		b.MulAssign(&g)
		r = m
	}
}

// Square z = x * x mod q
func (z *Element12) Square(x *Element12) *Element12 {
	return z.Mul(x, x)
}
