// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 689811130972169141471219426861603573387664149719286878841401782326465888438135268887448371286481926363454444206604373139262181732602006200999106386838071790361349361119968314294442937463862757752761400122696947452535663312470205377
// Code generated by goff DO NOT EDIT
// Element12 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"

	"unsafe"
)

// Element12 represents a field element stored on 12 words (uint64)
// Element12 are assumed to be in Montgomery form in all methods
type Element12 [12]uint64

// Element12Limbs number of 64 bits words needed to represent Element12
const Element12Limbs = 12

// Element12Bits number bits needed to represent Element12
const Element12Bits = 767

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element12) SetUint64(v uint64) *Element12 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element12) Set(x *Element12) *Element12 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	return z
}

// SetZero z = 0
func (z *Element12) SetZero() *Element12 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element12) SetOne() *Element12 {
	z[0] = 17956290572425771134
	z[1] = 2711010868255033525
	z[2] = 3049867917862625903
	z[3] = 5601572397190365473
	z[4] = 13937433677829496543
	z[5] = 18210480424935222310
	z[6] = 17986426877185215020
	z[7] = 7802000833856975739
	z[8] = 11224246129065292856
	z[9] = 4970863810288422696
	z[10] = 6254824059125977398
	z[11] = 2054317530863093275
	return z
}

// Neg z = q - x
func (z *Element12) Neg(x *Element12) *Element12 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(245226750641890241, x[0], 0)
	z[1], borrow = bits.Sub64(7867866602727259045, x[1], borrow)
	z[2], borrow = bits.Sub64(7698438077923462856, x[2], borrow)
	z[3], borrow = bits.Sub64(6422585838259593071, x[3], borrow)
	z[4], borrow = bits.Sub64(11478027234794803344, x[4], borrow)
	z[5], borrow = bits.Sub64(9341503861241940460, x[5], borrow)
	z[6], borrow = bits.Sub64(230158598262168297, x[6], borrow)
	z[7], borrow = bits.Sub64(14545743656781063746, x[7], borrow)
	z[8], borrow = bits.Sub64(12834621009176905187, x[8], borrow)
	z[9], borrow = bits.Sub64(15961312168565340267, x[9], borrow)
	z[10], borrow = bits.Sub64(6095960007291787108, x[10], borrow)
	z[11], _ = bits.Sub64(8196213271423229170, x[11], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element12) Div(x, y *Element12) *Element12 {
	var yInv Element12
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element12) Equal(x *Element12) bool {
	return (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element12) IsZero() bool {
	return (z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element12ModulusBigInt big.Int
var onceelement12Modulus sync.Once

func element12ModulusBigInt() *big.Int {
	onceelement12Modulus.Do(func() {
		_element12ModulusBigInt.SetString("689811130972169141471219426861603573387664149719286878841401782326465888438135268887448371286481926363454444206604373139262181732602006200999106386838071790361349361119968314294442937463862757752761400122696947452535663312470205377", 10)
	})
	return &_element12ModulusBigInt
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element12) Inverse(x *Element12) *Element12 {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element12{
		245226750641890241,
		7867866602727259045,
		7698438077923462856,
		6422585838259593071,
		11478027234794803344,
		9341503861241940460,
		230158598262168297,
		14545743656781063746,
		12834621009176905187,
		15961312168565340267,
		6095960007291787108,
		8196213271423229170,
	}

	// initialize s = r^2
	var s = Element12{
		8607996967455362410,
		18365026562483225282,
		14480864977506714478,
		17769368167857925662,
		4907391171281347322,
		585944911034415132,
		7684495503890212064,
		7407798643850413062,
		9685611217852354847,
		9422408629884690308,
		14731826610705134964,
		1564945750710930073,
	}

	// r = 0
	r := Element12{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger, uIsOne, vIsOne bool

	for !uIsOne && !vIsOne {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[11] << 63
			v[11] >>= 1
			t = t2
			t2 = v[10] << 63
			v[10] = (v[10] >> 1) | t
			t = t2
			t2 = v[9] << 63
			v[9] = (v[9] >> 1) | t
			t = t2
			t2 = v[8] << 63
			v[8] = (v[8] >> 1) | t
			t = t2
			t2 = v[7] << 63
			v[7] = (v[7] >> 1) | t
			t = t2
			t2 = v[6] << 63
			v[6] = (v[6] >> 1) | t
			t = t2
			t2 = v[5] << 63
			v[5] = (v[5] >> 1) | t
			t = t2
			t2 = v[4] << 63
			v[4] = (v[4] >> 1) | t
			t = t2
			t2 = v[3] << 63
			v[3] = (v[3] >> 1) | t
			t = t2
			t2 = v[2] << 63
			v[2] = (v[2] >> 1) | t
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 245226750641890241, 0)
				s[1], carry = bits.Add64(s[1], 7867866602727259045, carry)
				s[2], carry = bits.Add64(s[2], 7698438077923462856, carry)
				s[3], carry = bits.Add64(s[3], 6422585838259593071, carry)
				s[4], carry = bits.Add64(s[4], 11478027234794803344, carry)
				s[5], carry = bits.Add64(s[5], 9341503861241940460, carry)
				s[6], carry = bits.Add64(s[6], 230158598262168297, carry)
				s[7], carry = bits.Add64(s[7], 14545743656781063746, carry)
				s[8], carry = bits.Add64(s[8], 12834621009176905187, carry)
				s[9], carry = bits.Add64(s[9], 15961312168565340267, carry)
				s[10], carry = bits.Add64(s[10], 6095960007291787108, carry)
				s[11], _ = bits.Add64(s[11], 8196213271423229170, carry)

			}

			// s = s >> 1
			t2 = s[11] << 63
			s[11] >>= 1
			t = t2
			t2 = s[10] << 63
			s[10] = (s[10] >> 1) | t
			t = t2
			t2 = s[9] << 63
			s[9] = (s[9] >> 1) | t
			t = t2
			t2 = s[8] << 63
			s[8] = (s[8] >> 1) | t
			t = t2
			t2 = s[7] << 63
			s[7] = (s[7] >> 1) | t
			t = t2
			t2 = s[6] << 63
			s[6] = (s[6] >> 1) | t
			t = t2
			t2 = s[5] << 63
			s[5] = (s[5] >> 1) | t
			t = t2
			t2 = s[4] << 63
			s[4] = (s[4] >> 1) | t
			t = t2
			t2 = s[3] << 63
			s[3] = (s[3] >> 1) | t
			t = t2
			t2 = s[2] << 63
			s[2] = (s[2] >> 1) | t
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[11] << 63
			u[11] >>= 1
			t = t2
			t2 = u[10] << 63
			u[10] = (u[10] >> 1) | t
			t = t2
			t2 = u[9] << 63
			u[9] = (u[9] >> 1) | t
			t = t2
			t2 = u[8] << 63
			u[8] = (u[8] >> 1) | t
			t = t2
			t2 = u[7] << 63
			u[7] = (u[7] >> 1) | t
			t = t2
			t2 = u[6] << 63
			u[6] = (u[6] >> 1) | t
			t = t2
			t2 = u[5] << 63
			u[5] = (u[5] >> 1) | t
			t = t2
			t2 = u[4] << 63
			u[4] = (u[4] >> 1) | t
			t = t2
			t2 = u[3] << 63
			u[3] = (u[3] >> 1) | t
			t = t2
			t2 = u[2] << 63
			u[2] = (u[2] >> 1) | t
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 245226750641890241, 0)
				r[1], carry = bits.Add64(r[1], 7867866602727259045, carry)
				r[2], carry = bits.Add64(r[2], 7698438077923462856, carry)
				r[3], carry = bits.Add64(r[3], 6422585838259593071, carry)
				r[4], carry = bits.Add64(r[4], 11478027234794803344, carry)
				r[5], carry = bits.Add64(r[5], 9341503861241940460, carry)
				r[6], carry = bits.Add64(r[6], 230158598262168297, carry)
				r[7], carry = bits.Add64(r[7], 14545743656781063746, carry)
				r[8], carry = bits.Add64(r[8], 12834621009176905187, carry)
				r[9], carry = bits.Add64(r[9], 15961312168565340267, carry)
				r[10], carry = bits.Add64(r[10], 6095960007291787108, carry)
				r[11], _ = bits.Add64(r[11], 8196213271423229170, carry)

			}

			// r = r >> 1
			t2 = r[11] << 63
			r[11] >>= 1
			t = t2
			t2 = r[10] << 63
			r[10] = (r[10] >> 1) | t
			t = t2
			t2 = r[9] << 63
			r[9] = (r[9] >> 1) | t
			t = t2
			t2 = r[8] << 63
			r[8] = (r[8] >> 1) | t
			t = t2
			t2 = r[7] << 63
			r[7] = (r[7] >> 1) | t
			t = t2
			t2 = r[6] << 63
			r[6] = (r[6] >> 1) | t
			t = t2
			t2 = r[5] << 63
			r[5] = (r[5] >> 1) | t
			t = t2
			t2 = r[4] << 63
			r[4] = (r[4] >> 1) | t
			t = t2
			t2 = r[3] << 63
			r[3] = (r[3] >> 1) | t
			t = t2
			t2 = r[2] << 63
			r[2] = (r[2] >> 1) | t
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[11] < u[11] || (v[11] == u[11] && (v[10] < u[10] || (v[10] == u[10] && (v[9] < u[9] || (v[9] == u[9] && (v[8] < u[8] || (v[8] == u[8] && (v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], borrow = bits.Sub64(v[7], u[7], borrow)
			v[8], borrow = bits.Sub64(v[8], u[8], borrow)
			v[9], borrow = bits.Sub64(v[9], u[9], borrow)
			v[10], borrow = bits.Sub64(v[10], u[10], borrow)
			v[11], _ = bits.Sub64(v[11], u[11], borrow)

			// r >= s
			bigger = !(r[11] < s[11] || (r[11] == s[11] && (r[10] < s[10] || (r[10] == s[10] && (r[9] < s[9] || (r[9] == s[9] && (r[8] < s[8] || (r[8] == s[8] && (r[7] < s[7] || (r[7] == s[7] && (r[6] < s[6] || (r[6] == s[6] && (r[5] < s[5] || (r[5] == s[5] && (r[4] < s[4] || (r[4] == s[4] && (r[3] < s[3] || (r[3] == s[3] && (r[2] < s[2] || (r[2] == s[2] && (r[1] < s[1] || (r[1] == s[1] && (r[0] < s[0])))))))))))))))))))))))

			if bigger {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 245226750641890241, 0)
				s[1], carry = bits.Add64(s[1], 7867866602727259045, carry)
				s[2], carry = bits.Add64(s[2], 7698438077923462856, carry)
				s[3], carry = bits.Add64(s[3], 6422585838259593071, carry)
				s[4], carry = bits.Add64(s[4], 11478027234794803344, carry)
				s[5], carry = bits.Add64(s[5], 9341503861241940460, carry)
				s[6], carry = bits.Add64(s[6], 230158598262168297, carry)
				s[7], carry = bits.Add64(s[7], 14545743656781063746, carry)
				s[8], carry = bits.Add64(s[8], 12834621009176905187, carry)
				s[9], carry = bits.Add64(s[9], 15961312168565340267, carry)
				s[10], carry = bits.Add64(s[10], 6095960007291787108, carry)
				s[11], _ = bits.Add64(s[11], 8196213271423229170, carry)

			}

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], borrow = bits.Sub64(s[7], r[7], borrow)
			s[8], borrow = bits.Sub64(s[8], r[8], borrow)
			s[9], borrow = bits.Sub64(s[9], r[9], borrow)
			s[10], borrow = bits.Sub64(s[10], r[10], borrow)
			s[11], _ = bits.Sub64(s[11], r[11], borrow)

		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], borrow = bits.Sub64(u[7], v[7], borrow)
			u[8], borrow = bits.Sub64(u[8], v[8], borrow)
			u[9], borrow = bits.Sub64(u[9], v[9], borrow)
			u[10], borrow = bits.Sub64(u[10], v[10], borrow)
			u[11], _ = bits.Sub64(u[11], v[11], borrow)

			// s >= r
			bigger = !(s[11] < r[11] || (s[11] == r[11] && (s[10] < r[10] || (s[10] == r[10] && (s[9] < r[9] || (s[9] == r[9] && (s[8] < r[8] || (s[8] == r[8] && (s[7] < r[7] || (s[7] == r[7] && (s[6] < r[6] || (s[6] == r[6] && (s[5] < r[5] || (s[5] == r[5] && (s[4] < r[4] || (s[4] == r[4] && (s[3] < r[3] || (s[3] == r[3] && (s[2] < r[2] || (s[2] == r[2] && (s[1] < r[1] || (s[1] == r[1] && (s[0] < r[0])))))))))))))))))))))))

			if bigger {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 245226750641890241, 0)
				r[1], carry = bits.Add64(r[1], 7867866602727259045, carry)
				r[2], carry = bits.Add64(r[2], 7698438077923462856, carry)
				r[3], carry = bits.Add64(r[3], 6422585838259593071, carry)
				r[4], carry = bits.Add64(r[4], 11478027234794803344, carry)
				r[5], carry = bits.Add64(r[5], 9341503861241940460, carry)
				r[6], carry = bits.Add64(r[6], 230158598262168297, carry)
				r[7], carry = bits.Add64(r[7], 14545743656781063746, carry)
				r[8], carry = bits.Add64(r[8], 12834621009176905187, carry)
				r[9], carry = bits.Add64(r[9], 15961312168565340267, carry)
				r[10], carry = bits.Add64(r[10], 6095960007291787108, carry)
				r[11], _ = bits.Add64(r[11], 8196213271423229170, carry)

			}

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], borrow = bits.Sub64(r[7], s[7], borrow)
			r[8], borrow = bits.Sub64(r[8], s[8], borrow)
			r[9], borrow = bits.Sub64(r[9], s[9], borrow)
			r[10], borrow = bits.Sub64(r[10], s[10], borrow)
			r[11], _ = bits.Sub64(r[11], s[11], borrow)

		}
		uIsOne = (u[0] == 1) && (u[11]|u[10]|u[9]|u[8]|u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0
		vIsOne = (v[0] == 1) && (v[11]|v[10]|v[9]|v[8]|v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0
	}

	if uIsOne {
		z.Set(&r)
	} else {
		z.Set(&s)
	}

	return z
}

// SetRandom sets z to a random element < q
func (z *Element12) SetRandom() *Element12 {
	bytes := make([]byte, 96)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[11] %= 8196213271423229170

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element12) Add(x, y *Element12) *Element12 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], _ = bits.Add64(x[11], y[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element12) AddAssign(x *Element12) *Element12 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], _ = bits.Add64(z[11], x[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element12) Double(x *Element12) *Element12 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], _ = bits.Add64(x[11], x[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element12) Sub(x, y *Element12) *Element12 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 245226750641890241, 0)
		z[1], c = bits.Add64(z[1], 7867866602727259045, c)
		z[2], c = bits.Add64(z[2], 7698438077923462856, c)
		z[3], c = bits.Add64(z[3], 6422585838259593071, c)
		z[4], c = bits.Add64(z[4], 11478027234794803344, c)
		z[5], c = bits.Add64(z[5], 9341503861241940460, c)
		z[6], c = bits.Add64(z[6], 230158598262168297, c)
		z[7], c = bits.Add64(z[7], 14545743656781063746, c)
		z[8], c = bits.Add64(z[8], 12834621009176905187, c)
		z[9], c = bits.Add64(z[9], 15961312168565340267, c)
		z[10], c = bits.Add64(z[10], 6095960007291787108, c)
		z[11], _ = bits.Add64(z[11], 8196213271423229170, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element12) SubAssign(x *Element12) *Element12 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 245226750641890241, 0)
		z[1], c = bits.Add64(z[1], 7867866602727259045, c)
		z[2], c = bits.Add64(z[2], 7698438077923462856, c)
		z[3], c = bits.Add64(z[3], 6422585838259593071, c)
		z[4], c = bits.Add64(z[4], 11478027234794803344, c)
		z[5], c = bits.Add64(z[5], 9341503861241940460, c)
		z[6], c = bits.Add64(z[6], 230158598262168297, c)
		z[7], c = bits.Add64(z[7], 14545743656781063746, c)
		z[8], c = bits.Add64(z[8], 12834621009176905187, c)
		z[9], c = bits.Add64(z[9], 15961312168565340267, c)
		z[10], c = bits.Add64(z[10], 6095960007291787108, c)
		z[11], _ = bits.Add64(z[11], 8196213271423229170, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element12) Exp(x Element12, exponent ...uint64) *Element12 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element12) FromMont() *Element12 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16862748405045973951
		C := madd0(m, 245226750641890241, z[0])
		C, z[0] = madd2(m, 7867866602727259045, z[1], C)
		C, z[1] = madd2(m, 7698438077923462856, z[2], C)
		C, z[2] = madd2(m, 6422585838259593071, z[3], C)
		C, z[3] = madd2(m, 11478027234794803344, z[4], C)
		C, z[4] = madd2(m, 9341503861241940460, z[5], C)
		C, z[5] = madd2(m, 230158598262168297, z[6], C)
		C, z[6] = madd2(m, 14545743656781063746, z[7], C)
		C, z[7] = madd2(m, 12834621009176905187, z[8], C)
		C, z[8] = madd2(m, 15961312168565340267, z[9], C)
		C, z[9] = madd2(m, 6095960007291787108, z[10], C)
		C, z[10] = madd2(m, 8196213271423229170, z[11], C)
		z[11] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element12) ToMont() *Element12 {
	var rSquare = Element12{
		8607996967455362410,
		18365026562483225282,
		14480864977506714478,
		17769368167857925662,
		4907391171281347322,
		585944911034415132,
		7684495503890212064,
		7407798643850413062,
		9685611217852354847,
		9422408629884690308,
		14731826610705134964,
		1564945750710930073,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element12) ToRegular() Element12 {
	return *z.FromMont()
}

// String returns the string form of an Element12 in Montgomery form
func (z *Element12) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element12) ToBigInt(res *big.Int) *big.Int {
	bits := (*[12]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element12) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[12]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element12) SetBigInt(v *big.Int) *Element12 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element12ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element12) SetString(s string) *Element12 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element12.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element12) Mul(x, y *Element12) *Element12 {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd1(v, y[10], c[1])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd1(v, y[11], c[1])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 11
		v := x[11]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], z[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], z[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		z[11], z[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element12) MulAssign(x *Element12) *Element12 {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd1(v, x[6], c[1])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd1(v, x[7], c[1])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd1(v, x[8], c[1])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd1(v, x[9], c[1])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd1(v, x[10], c[1])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd1(v, x[11], c[1])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 5
		v := z[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 6
		v := z[6]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 7
		v := z[7]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 8
		v := z[8]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 9
		v := z[9]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 10
		v := z[10]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}
	{
		// round 11
		v := z[11]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 16862748405045973951
		c[2] = madd0(m, 245226750641890241, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 7867866602727259045, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 7698438077923462856, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 6422585838259593071, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 11478027234794803344, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], z[4] = madd2(m, 9341503861241940460, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], z[5] = madd2(m, 230158598262168297, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], z[6] = madd2(m, 14545743656781063746, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], z[7] = madd2(m, 12834621009176905187, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], z[8] = madd2(m, 15961312168565340267, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], z[9] = madd2(m, 6095960007291787108, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		z[11], z[10] = madd3(m, 8196213271423229170, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 8196213271423229170 || (z[11] == 8196213271423229170 && (z[10] < 6095960007291787108 || (z[10] == 6095960007291787108 && (z[9] < 15961312168565340267 || (z[9] == 15961312168565340267 && (z[8] < 12834621009176905187 || (z[8] == 12834621009176905187 && (z[7] < 14545743656781063746 || (z[7] == 14545743656781063746 && (z[6] < 230158598262168297 || (z[6] == 230158598262168297 && (z[5] < 9341503861241940460 || (z[5] == 9341503861241940460 && (z[4] < 11478027234794803344 || (z[4] == 11478027234794803344 && (z[3] < 6422585838259593071 || (z[3] == 6422585838259593071 && (z[2] < 7698438077923462856 || (z[2] == 7698438077923462856 && (z[1] < 7867866602727259045 || (z[1] == 7867866602727259045 && (z[0] < 245226750641890241))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 245226750641890241, 0)
		z[1], b = bits.Sub64(z[1], 7867866602727259045, b)
		z[2], b = bits.Sub64(z[2], 7698438077923462856, b)
		z[3], b = bits.Sub64(z[3], 6422585838259593071, b)
		z[4], b = bits.Sub64(z[4], 11478027234794803344, b)
		z[5], b = bits.Sub64(z[5], 9341503861241940460, b)
		z[6], b = bits.Sub64(z[6], 230158598262168297, b)
		z[7], b = bits.Sub64(z[7], 14545743656781063746, b)
		z[8], b = bits.Sub64(z[8], 12834621009176905187, b)
		z[9], b = bits.Sub64(z[9], 15961312168565340267, b)
		z[10], b = bits.Sub64(z[10], 6095960007291787108, b)
		z[11], _ = bits.Sub64(z[11], 8196213271423229170, b)
	}
	return z
}

func (z *Element12) Legendre() int {
	var l Element12
	// z^((p-1)/2)
	l.Exp(*z,
		9345985412175720928,
		3933933301363629522,
		13072591075816507236,
		3211292919129796535,
		5739013617397401672,
		13894123967475746038,
		115079299131084148,
		16496243865245307681,
		15640682541443228401,
		7980656084282670133,
		3047980003645893554,
		4098106635711614585,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[11] == 2054317530863093275) && (l[10] == 6254824059125977398) && (l[9] == 4970863810288422696) && (l[8] == 11224246129065292856) && (l[7] == 7802000833856975739) && (l[6] == 17986426877185215020) && (l[5] == 18210480424935222310) && (l[4] == 13937433677829496543) && (l[3] == 5601572397190365473) && (l[2] == 3049867917862625903) && (l[1] == 2711010868255033525) && (l[0] == 17956290572425771134) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element12) Sqrt(x *Element12) *Element12 {
	switch x.Legendre() {
	case -1:
		return nil
	case 0:
		return z.SetZero()
	case 1:
		break
	}
	panic("not implemented")
}

// Square z = x * x mod q
func (z *Element12) Square(x *Element12) *Element12 {
	return z.Mul(x, x)
}
