// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 1086919067735983688820133322773423544172175238368475878608117059235937159080914296861018193423053393368689846609660112304542153798539891290901657132101811917097212838367123859943220096988788588599964358558799366357481737684783433568641896673033222813470431708904535534887113454565413757381040742822952872465983397026579998512419665544681182260290867236632823726069455095711801555463379416057069261267952791694447689010532220118490186831024317497282453872449320863
// Code generated by goff DO NOT EDIT
// Element24 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element24 represents a field element stored on 24 words (uint64)
// Element24 are assumed to be in Montgomery form in all methods
type Element24 [24]uint64

// Element24Limbs number of 64 bits words needed to represent Element24
const Element24Limbs = 24

// Element24Bits number bits needed to represent Element24
const Element24Bits = 1535

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element24) SetUint64(v uint64) *Element24 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	z[20] = 0
	z[21] = 0
	z[22] = 0
	z[23] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element24) Set(x *Element24) *Element24 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	z[19] = x[19]
	z[20] = x[20]
	z[21] = x[21]
	z[22] = x[22]
	z[23] = x[23]
	return z
}

// SetZero z = 0
func (z *Element24) SetZero() *Element24 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	z[20] = 0
	z[21] = 0
	z[22] = 0
	z[23] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element24) SetOne() *Element24 {
	z[0] = 11269317330001924290
	z[1] = 6807879565256362975
	z[2] = 5027009231231219240
	z[3] = 10763166478073905359
	z[4] = 8861963734612783871
	z[5] = 14305471832377360365
	z[6] = 15783254115478252401
	z[7] = 4697664802041902388
	z[8] = 8780638036470054149
	z[9] = 4750192128168090991
	z[10] = 15414482926084771700
	z[11] = 1509610985109944307
	z[12] = 16475477904669000711
	z[13] = 16025297427432865917
	z[14] = 8406008316098554038
	z[15] = 13972142752331392583
	z[16] = 4990144995845567658
	z[17] = 18305388987851213214
	z[18] = 3792792501317676335
	z[19] = 15477088202972160602
	z[20] = 13693951596490135238
	z[21] = 10880507254011332431
	z[22] = 13895126027202418575
	z[23] = 1809798881527163992
	return z
}

// Neg z = q - x
func (z *Element24) Neg(x *Element24) *Element24 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(3588713371853813663, x[0], 0)
	z[1], borrow = bits.Sub64(15042804291081370128, x[1], borrow)
	z[2], borrow = bits.Sub64(6709867421239166187, x[2], borrow)
	z[3], borrow = bits.Sub64(3841788797817823128, x[3], borrow)
	z[4], borrow = bits.Sub64(4792390169548383872, x[4], borrow)
	z[5], borrow = bits.Sub64(2070636120666095625, x[5], borrow)
	z[6], borrow = bits.Sub64(10555117015970425415, x[6], borrow)
	z[7], borrow = bits.Sub64(6874539635833824613, x[7], borrow)
	z[8], borrow = bits.Sub64(4833053018619748733, x[8], borrow)
	z[9], borrow = bits.Sub64(16071648009625506120, x[9], borrow)
	z[10], borrow = bits.Sub64(1516130573812389957, x[10], borrow)
	z[11], borrow = bits.Sub64(8468566544299803654, x[11], borrow)
	z[12], borrow = bits.Sub64(985633084520275452, x[12], borrow)
	z[13], borrow = bits.Sub64(10434095359993118657, x[13], borrow)
	z[14], borrow = bits.Sub64(5020367878805498788, x[14], borrow)
	z[15], borrow = bits.Sub64(11460672697543855324, x[15], borrow)
	z[16], borrow = bits.Sub64(15951671575786767786, x[16], borrow)
	z[17], borrow = bits.Sub64(70677542929169200, x[17], borrow)
	z[18], borrow = bits.Sub64(16550347823050713448, x[18], borrow)
	z[19], borrow = bits.Sub64(10708199972223471314, x[19], borrow)
	z[20], borrow = bits.Sub64(2376396238609708188, x[20], borrow)
	z[21], borrow = bits.Sub64(3783118409849109592, x[21], borrow)
	z[22], borrow = bits.Sub64(11499181060108342328, x[22], borrow)
	z[23], _ = bits.Sub64(8318472596091193811, x[23], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element24) Div(x, y *Element24) *Element24 {
	var yInv Element24
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element24) Equal(x *Element24) bool {
	return (z[23] == x[23]) && (z[22] == x[22]) && (z[21] == x[21]) && (z[20] == x[20]) && (z[19] == x[19]) && (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element24) IsZero() bool {
	return (z[23] | z[22] | z[21] | z[20] | z[19] | z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element24ModulusBigInt big.Int
var onceelement24Modulus sync.Once

func element24ModulusBigInt() *big.Int {
	onceelement24Modulus.Do(func() {
		_element24ModulusBigInt.SetString("1086919067735983688820133322773423544172175238368475878608117059235937159080914296861018193423053393368689846609660112304542153798539891290901657132101811917097212838367123859943220096988788588599964358558799366357481737684783433568641896673033222813470431708904535534887113454565413757381040742822952872465983397026579998512419665544681182260290867236632823726069455095711801555463379416057069261267952791694447689010532220118490186831024317497282453872449320863", 10)
	})
	return &_element24ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element24) Inverse(x *Element24) *Element24 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element24ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element24) SetRandom() *Element24 {
	bytes := make([]byte, 192)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[16] = binary.BigEndian.Uint64(bytes[128:136])
	z[17] = binary.BigEndian.Uint64(bytes[136:144])
	z[18] = binary.BigEndian.Uint64(bytes[144:152])
	z[19] = binary.BigEndian.Uint64(bytes[152:160])
	z[20] = binary.BigEndian.Uint64(bytes[160:168])
	z[21] = binary.BigEndian.Uint64(bytes[168:176])
	z[22] = binary.BigEndian.Uint64(bytes[176:184])
	z[23] = binary.BigEndian.Uint64(bytes[184:192])
	z[23] %= 8318472596091193811

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element24) Add(x, y *Element24) *Element24 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	z[19], carry = bits.Add64(x[19], y[19], carry)
	z[20], carry = bits.Add64(x[20], y[20], carry)
	z[21], carry = bits.Add64(x[21], y[21], carry)
	z[22], carry = bits.Add64(x[22], y[22], carry)
	z[23], carry = bits.Add64(x[23], y[23], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], carry = bits.Sub64(z[1], 15042804291081370128, carry)
		z[2], carry = bits.Sub64(z[2], 6709867421239166187, carry)
		z[3], carry = bits.Sub64(z[3], 3841788797817823128, carry)
		z[4], carry = bits.Sub64(z[4], 4792390169548383872, carry)
		z[5], carry = bits.Sub64(z[5], 2070636120666095625, carry)
		z[6], carry = bits.Sub64(z[6], 10555117015970425415, carry)
		z[7], carry = bits.Sub64(z[7], 6874539635833824613, carry)
		z[8], carry = bits.Sub64(z[8], 4833053018619748733, carry)
		z[9], carry = bits.Sub64(z[9], 16071648009625506120, carry)
		z[10], carry = bits.Sub64(z[10], 1516130573812389957, carry)
		z[11], carry = bits.Sub64(z[11], 8468566544299803654, carry)
		z[12], carry = bits.Sub64(z[12], 985633084520275452, carry)
		z[13], carry = bits.Sub64(z[13], 10434095359993118657, carry)
		z[14], carry = bits.Sub64(z[14], 5020367878805498788, carry)
		z[15], carry = bits.Sub64(z[15], 11460672697543855324, carry)
		z[16], carry = bits.Sub64(z[16], 15951671575786767786, carry)
		z[17], carry = bits.Sub64(z[17], 70677542929169200, carry)
		z[18], carry = bits.Sub64(z[18], 16550347823050713448, carry)
		z[19], carry = bits.Sub64(z[19], 10708199972223471314, carry)
		z[20], carry = bits.Sub64(z[20], 2376396238609708188, carry)
		z[21], carry = bits.Sub64(z[21], 3783118409849109592, carry)
		z[22], carry = bits.Sub64(z[22], 11499181060108342328, carry)
		z[23], carry = bits.Sub64(z[23], 8318472596091193811, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element24) AddAssign(x *Element24) *Element24 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	z[19], carry = bits.Add64(z[19], x[19], carry)
	z[20], carry = bits.Add64(z[20], x[20], carry)
	z[21], carry = bits.Add64(z[21], x[21], carry)
	z[22], carry = bits.Add64(z[22], x[22], carry)
	z[23], carry = bits.Add64(z[23], x[23], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], carry = bits.Sub64(z[1], 15042804291081370128, carry)
		z[2], carry = bits.Sub64(z[2], 6709867421239166187, carry)
		z[3], carry = bits.Sub64(z[3], 3841788797817823128, carry)
		z[4], carry = bits.Sub64(z[4], 4792390169548383872, carry)
		z[5], carry = bits.Sub64(z[5], 2070636120666095625, carry)
		z[6], carry = bits.Sub64(z[6], 10555117015970425415, carry)
		z[7], carry = bits.Sub64(z[7], 6874539635833824613, carry)
		z[8], carry = bits.Sub64(z[8], 4833053018619748733, carry)
		z[9], carry = bits.Sub64(z[9], 16071648009625506120, carry)
		z[10], carry = bits.Sub64(z[10], 1516130573812389957, carry)
		z[11], carry = bits.Sub64(z[11], 8468566544299803654, carry)
		z[12], carry = bits.Sub64(z[12], 985633084520275452, carry)
		z[13], carry = bits.Sub64(z[13], 10434095359993118657, carry)
		z[14], carry = bits.Sub64(z[14], 5020367878805498788, carry)
		z[15], carry = bits.Sub64(z[15], 11460672697543855324, carry)
		z[16], carry = bits.Sub64(z[16], 15951671575786767786, carry)
		z[17], carry = bits.Sub64(z[17], 70677542929169200, carry)
		z[18], carry = bits.Sub64(z[18], 16550347823050713448, carry)
		z[19], carry = bits.Sub64(z[19], 10708199972223471314, carry)
		z[20], carry = bits.Sub64(z[20], 2376396238609708188, carry)
		z[21], carry = bits.Sub64(z[21], 3783118409849109592, carry)
		z[22], carry = bits.Sub64(z[22], 11499181060108342328, carry)
		z[23], carry = bits.Sub64(z[23], 8318472596091193811, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element24) Double(x *Element24) *Element24 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	z[19], carry = bits.Add64(x[19], x[19], carry)
	z[20], carry = bits.Add64(x[20], x[20], carry)
	z[21], carry = bits.Add64(x[21], x[21], carry)
	z[22], carry = bits.Add64(x[22], x[22], carry)
	z[23], carry = bits.Add64(x[23], x[23], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], carry = bits.Sub64(z[1], 15042804291081370128, carry)
		z[2], carry = bits.Sub64(z[2], 6709867421239166187, carry)
		z[3], carry = bits.Sub64(z[3], 3841788797817823128, carry)
		z[4], carry = bits.Sub64(z[4], 4792390169548383872, carry)
		z[5], carry = bits.Sub64(z[5], 2070636120666095625, carry)
		z[6], carry = bits.Sub64(z[6], 10555117015970425415, carry)
		z[7], carry = bits.Sub64(z[7], 6874539635833824613, carry)
		z[8], carry = bits.Sub64(z[8], 4833053018619748733, carry)
		z[9], carry = bits.Sub64(z[9], 16071648009625506120, carry)
		z[10], carry = bits.Sub64(z[10], 1516130573812389957, carry)
		z[11], carry = bits.Sub64(z[11], 8468566544299803654, carry)
		z[12], carry = bits.Sub64(z[12], 985633084520275452, carry)
		z[13], carry = bits.Sub64(z[13], 10434095359993118657, carry)
		z[14], carry = bits.Sub64(z[14], 5020367878805498788, carry)
		z[15], carry = bits.Sub64(z[15], 11460672697543855324, carry)
		z[16], carry = bits.Sub64(z[16], 15951671575786767786, carry)
		z[17], carry = bits.Sub64(z[17], 70677542929169200, carry)
		z[18], carry = bits.Sub64(z[18], 16550347823050713448, carry)
		z[19], carry = bits.Sub64(z[19], 10708199972223471314, carry)
		z[20], carry = bits.Sub64(z[20], 2376396238609708188, carry)
		z[21], carry = bits.Sub64(z[21], 3783118409849109592, carry)
		z[22], carry = bits.Sub64(z[22], 11499181060108342328, carry)
		z[23], carry = bits.Sub64(z[23], 8318472596091193811, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element24) Sub(x, y *Element24) *Element24 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	z[19], b = bits.Sub64(x[19], y[19], b)
	z[20], b = bits.Sub64(x[20], y[20], b)
	z[21], b = bits.Sub64(x[21], y[21], b)
	z[22], b = bits.Sub64(x[22], y[22], b)
	z[23], b = bits.Sub64(x[23], y[23], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 3588713371853813663, 0)
		z[1], c = bits.Add64(z[1], 15042804291081370128, c)
		z[2], c = bits.Add64(z[2], 6709867421239166187, c)
		z[3], c = bits.Add64(z[3], 3841788797817823128, c)
		z[4], c = bits.Add64(z[4], 4792390169548383872, c)
		z[5], c = bits.Add64(z[5], 2070636120666095625, c)
		z[6], c = bits.Add64(z[6], 10555117015970425415, c)
		z[7], c = bits.Add64(z[7], 6874539635833824613, c)
		z[8], c = bits.Add64(z[8], 4833053018619748733, c)
		z[9], c = bits.Add64(z[9], 16071648009625506120, c)
		z[10], c = bits.Add64(z[10], 1516130573812389957, c)
		z[11], c = bits.Add64(z[11], 8468566544299803654, c)
		z[12], c = bits.Add64(z[12], 985633084520275452, c)
		z[13], c = bits.Add64(z[13], 10434095359993118657, c)
		z[14], c = bits.Add64(z[14], 5020367878805498788, c)
		z[15], c = bits.Add64(z[15], 11460672697543855324, c)
		z[16], c = bits.Add64(z[16], 15951671575786767786, c)
		z[17], c = bits.Add64(z[17], 70677542929169200, c)
		z[18], c = bits.Add64(z[18], 16550347823050713448, c)
		z[19], c = bits.Add64(z[19], 10708199972223471314, c)
		z[20], c = bits.Add64(z[20], 2376396238609708188, c)
		z[21], c = bits.Add64(z[21], 3783118409849109592, c)
		z[22], c = bits.Add64(z[22], 11499181060108342328, c)
		z[23], _ = bits.Add64(z[23], 8318472596091193811, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element24) SubAssign(x *Element24) *Element24 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	z[19], b = bits.Sub64(z[19], x[19], b)
	z[20], b = bits.Sub64(z[20], x[20], b)
	z[21], b = bits.Sub64(z[21], x[21], b)
	z[22], b = bits.Sub64(z[22], x[22], b)
	z[23], b = bits.Sub64(z[23], x[23], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 3588713371853813663, 0)
		z[1], c = bits.Add64(z[1], 15042804291081370128, c)
		z[2], c = bits.Add64(z[2], 6709867421239166187, c)
		z[3], c = bits.Add64(z[3], 3841788797817823128, c)
		z[4], c = bits.Add64(z[4], 4792390169548383872, c)
		z[5], c = bits.Add64(z[5], 2070636120666095625, c)
		z[6], c = bits.Add64(z[6], 10555117015970425415, c)
		z[7], c = bits.Add64(z[7], 6874539635833824613, c)
		z[8], c = bits.Add64(z[8], 4833053018619748733, c)
		z[9], c = bits.Add64(z[9], 16071648009625506120, c)
		z[10], c = bits.Add64(z[10], 1516130573812389957, c)
		z[11], c = bits.Add64(z[11], 8468566544299803654, c)
		z[12], c = bits.Add64(z[12], 985633084520275452, c)
		z[13], c = bits.Add64(z[13], 10434095359993118657, c)
		z[14], c = bits.Add64(z[14], 5020367878805498788, c)
		z[15], c = bits.Add64(z[15], 11460672697543855324, c)
		z[16], c = bits.Add64(z[16], 15951671575786767786, c)
		z[17], c = bits.Add64(z[17], 70677542929169200, c)
		z[18], c = bits.Add64(z[18], 16550347823050713448, c)
		z[19], c = bits.Add64(z[19], 10708199972223471314, c)
		z[20], c = bits.Add64(z[20], 2376396238609708188, c)
		z[21], c = bits.Add64(z[21], 3783118409849109592, c)
		z[22], c = bits.Add64(z[22], 11499181060108342328, c)
		z[23], _ = bits.Add64(z[23], 8318472596091193811, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element24) Exp(x Element24, exponent ...uint64) *Element24 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element24) FromMont() *Element24 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 6198633493284723617
		C := madd0(m, 3588713371853813663, z[0])
		C, z[0] = madd2(m, 15042804291081370128, z[1], C)
		C, z[1] = madd2(m, 6709867421239166187, z[2], C)
		C, z[2] = madd2(m, 3841788797817823128, z[3], C)
		C, z[3] = madd2(m, 4792390169548383872, z[4], C)
		C, z[4] = madd2(m, 2070636120666095625, z[5], C)
		C, z[5] = madd2(m, 10555117015970425415, z[6], C)
		C, z[6] = madd2(m, 6874539635833824613, z[7], C)
		C, z[7] = madd2(m, 4833053018619748733, z[8], C)
		C, z[8] = madd2(m, 16071648009625506120, z[9], C)
		C, z[9] = madd2(m, 1516130573812389957, z[10], C)
		C, z[10] = madd2(m, 8468566544299803654, z[11], C)
		C, z[11] = madd2(m, 985633084520275452, z[12], C)
		C, z[12] = madd2(m, 10434095359993118657, z[13], C)
		C, z[13] = madd2(m, 5020367878805498788, z[14], C)
		C, z[14] = madd2(m, 11460672697543855324, z[15], C)
		C, z[15] = madd2(m, 15951671575786767786, z[16], C)
		C, z[16] = madd2(m, 70677542929169200, z[17], C)
		C, z[17] = madd2(m, 16550347823050713448, z[18], C)
		C, z[18] = madd2(m, 10708199972223471314, z[19], C)
		C, z[19] = madd2(m, 2376396238609708188, z[20], C)
		C, z[20] = madd2(m, 3783118409849109592, z[21], C)
		C, z[21] = madd2(m, 11499181060108342328, z[22], C)
		C, z[22] = madd2(m, 8318472596091193811, z[23], C)
		z[23] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element24) ToMont() *Element24 {
	var rSquare = Element24{
		13337846646987985805,
		18387218735977681052,
		1207005827102594979,
		11785195286031196317,
		1317835602905677708,
		8970031190561962603,
		1914993268438180079,
		12183581830953378960,
		18100909098525220064,
		15007781849400033565,
		1514276157853413991,
		4085167685780447221,
		17804767306081914673,
		2053035986042835979,
		1315213695160723669,
		10359960718816537111,
		1012845379214642766,
		2563806640778131829,
		10153453291738477268,
		9389075523221592824,
		8915978360779647166,
		9937098146350070596,
		17526334571474523048,
		2308883182605584985,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element24) ToRegular() Element24 {
	return *z.FromMont()
}

// String returns the string form of an Element24 in Montgomery form
func (z *Element24) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element24) ToBigInt(res *big.Int) *big.Int {
	bits := (*[24]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element24) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[24]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element24) SetBigInt(v *big.Int) *Element24 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element24ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element24) SetString(s string) *Element24 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element24.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element24) Mul(x, y *Element24) *Element24 {

	var t [25]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)
	C, t[19] = madd1(y[0], x[19], C)
	C, t[20] = madd1(y[0], x[20], C)
	C, t[21] = madd1(y[0], x[21], C)
	C, t[22] = madd1(y[0], x[22], C)
	C, t[23] = madd1(y[0], x[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)
	C, t[19] = madd2(y[1], x[19], t[19], C)
	C, t[20] = madd2(y[1], x[20], t[20], C)
	C, t[21] = madd2(y[1], x[21], t[21], C)
	C, t[22] = madd2(y[1], x[22], t[22], C)
	C, t[23] = madd2(y[1], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)
	C, t[19] = madd2(y[2], x[19], t[19], C)
	C, t[20] = madd2(y[2], x[20], t[20], C)
	C, t[21] = madd2(y[2], x[21], t[21], C)
	C, t[22] = madd2(y[2], x[22], t[22], C)
	C, t[23] = madd2(y[2], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)
	C, t[19] = madd2(y[3], x[19], t[19], C)
	C, t[20] = madd2(y[3], x[20], t[20], C)
	C, t[21] = madd2(y[3], x[21], t[21], C)
	C, t[22] = madd2(y[3], x[22], t[22], C)
	C, t[23] = madd2(y[3], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)
	C, t[19] = madd2(y[4], x[19], t[19], C)
	C, t[20] = madd2(y[4], x[20], t[20], C)
	C, t[21] = madd2(y[4], x[21], t[21], C)
	C, t[22] = madd2(y[4], x[22], t[22], C)
	C, t[23] = madd2(y[4], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)
	C, t[19] = madd2(y[5], x[19], t[19], C)
	C, t[20] = madd2(y[5], x[20], t[20], C)
	C, t[21] = madd2(y[5], x[21], t[21], C)
	C, t[22] = madd2(y[5], x[22], t[22], C)
	C, t[23] = madd2(y[5], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)
	C, t[19] = madd2(y[6], x[19], t[19], C)
	C, t[20] = madd2(y[6], x[20], t[20], C)
	C, t[21] = madd2(y[6], x[21], t[21], C)
	C, t[22] = madd2(y[6], x[22], t[22], C)
	C, t[23] = madd2(y[6], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)
	C, t[19] = madd2(y[7], x[19], t[19], C)
	C, t[20] = madd2(y[7], x[20], t[20], C)
	C, t[21] = madd2(y[7], x[21], t[21], C)
	C, t[22] = madd2(y[7], x[22], t[22], C)
	C, t[23] = madd2(y[7], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)
	C, t[19] = madd2(y[8], x[19], t[19], C)
	C, t[20] = madd2(y[8], x[20], t[20], C)
	C, t[21] = madd2(y[8], x[21], t[21], C)
	C, t[22] = madd2(y[8], x[22], t[22], C)
	C, t[23] = madd2(y[8], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)
	C, t[19] = madd2(y[9], x[19], t[19], C)
	C, t[20] = madd2(y[9], x[20], t[20], C)
	C, t[21] = madd2(y[9], x[21], t[21], C)
	C, t[22] = madd2(y[9], x[22], t[22], C)
	C, t[23] = madd2(y[9], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)
	C, t[19] = madd2(y[10], x[19], t[19], C)
	C, t[20] = madd2(y[10], x[20], t[20], C)
	C, t[21] = madd2(y[10], x[21], t[21], C)
	C, t[22] = madd2(y[10], x[22], t[22], C)
	C, t[23] = madd2(y[10], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)
	C, t[19] = madd2(y[11], x[19], t[19], C)
	C, t[20] = madd2(y[11], x[20], t[20], C)
	C, t[21] = madd2(y[11], x[21], t[21], C)
	C, t[22] = madd2(y[11], x[22], t[22], C)
	C, t[23] = madd2(y[11], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)
	C, t[19] = madd2(y[12], x[19], t[19], C)
	C, t[20] = madd2(y[12], x[20], t[20], C)
	C, t[21] = madd2(y[12], x[21], t[21], C)
	C, t[22] = madd2(y[12], x[22], t[22], C)
	C, t[23] = madd2(y[12], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)
	C, t[19] = madd2(y[13], x[19], t[19], C)
	C, t[20] = madd2(y[13], x[20], t[20], C)
	C, t[21] = madd2(y[13], x[21], t[21], C)
	C, t[22] = madd2(y[13], x[22], t[22], C)
	C, t[23] = madd2(y[13], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)
	C, t[19] = madd2(y[14], x[19], t[19], C)
	C, t[20] = madd2(y[14], x[20], t[20], C)
	C, t[21] = madd2(y[14], x[21], t[21], C)
	C, t[22] = madd2(y[14], x[22], t[22], C)
	C, t[23] = madd2(y[14], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)
	C, t[19] = madd2(y[15], x[19], t[19], C)
	C, t[20] = madd2(y[15], x[20], t[20], C)
	C, t[21] = madd2(y[15], x[21], t[21], C)
	C, t[22] = madd2(y[15], x[22], t[22], C)
	C, t[23] = madd2(y[15], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)
	C, t[19] = madd2(y[16], x[19], t[19], C)
	C, t[20] = madd2(y[16], x[20], t[20], C)
	C, t[21] = madd2(y[16], x[21], t[21], C)
	C, t[22] = madd2(y[16], x[22], t[22], C)
	C, t[23] = madd2(y[16], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)
	C, t[19] = madd2(y[17], x[19], t[19], C)
	C, t[20] = madd2(y[17], x[20], t[20], C)
	C, t[21] = madd2(y[17], x[21], t[21], C)
	C, t[22] = madd2(y[17], x[22], t[22], C)
	C, t[23] = madd2(y[17], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)
	C, t[19] = madd2(y[18], x[19], t[19], C)
	C, t[20] = madd2(y[18], x[20], t[20], C)
	C, t[21] = madd2(y[18], x[21], t[21], C)
	C, t[22] = madd2(y[18], x[22], t[22], C)
	C, t[23] = madd2(y[18], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[19], x[0], t[0])
	C, t[1] = madd2(y[19], x[1], t[1], C)
	C, t[2] = madd2(y[19], x[2], t[2], C)
	C, t[3] = madd2(y[19], x[3], t[3], C)
	C, t[4] = madd2(y[19], x[4], t[4], C)
	C, t[5] = madd2(y[19], x[5], t[5], C)
	C, t[6] = madd2(y[19], x[6], t[6], C)
	C, t[7] = madd2(y[19], x[7], t[7], C)
	C, t[8] = madd2(y[19], x[8], t[8], C)
	C, t[9] = madd2(y[19], x[9], t[9], C)
	C, t[10] = madd2(y[19], x[10], t[10], C)
	C, t[11] = madd2(y[19], x[11], t[11], C)
	C, t[12] = madd2(y[19], x[12], t[12], C)
	C, t[13] = madd2(y[19], x[13], t[13], C)
	C, t[14] = madd2(y[19], x[14], t[14], C)
	C, t[15] = madd2(y[19], x[15], t[15], C)
	C, t[16] = madd2(y[19], x[16], t[16], C)
	C, t[17] = madd2(y[19], x[17], t[17], C)
	C, t[18] = madd2(y[19], x[18], t[18], C)
	C, t[19] = madd2(y[19], x[19], t[19], C)
	C, t[20] = madd2(y[19], x[20], t[20], C)
	C, t[21] = madd2(y[19], x[21], t[21], C)
	C, t[22] = madd2(y[19], x[22], t[22], C)
	C, t[23] = madd2(y[19], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[20], x[0], t[0])
	C, t[1] = madd2(y[20], x[1], t[1], C)
	C, t[2] = madd2(y[20], x[2], t[2], C)
	C, t[3] = madd2(y[20], x[3], t[3], C)
	C, t[4] = madd2(y[20], x[4], t[4], C)
	C, t[5] = madd2(y[20], x[5], t[5], C)
	C, t[6] = madd2(y[20], x[6], t[6], C)
	C, t[7] = madd2(y[20], x[7], t[7], C)
	C, t[8] = madd2(y[20], x[8], t[8], C)
	C, t[9] = madd2(y[20], x[9], t[9], C)
	C, t[10] = madd2(y[20], x[10], t[10], C)
	C, t[11] = madd2(y[20], x[11], t[11], C)
	C, t[12] = madd2(y[20], x[12], t[12], C)
	C, t[13] = madd2(y[20], x[13], t[13], C)
	C, t[14] = madd2(y[20], x[14], t[14], C)
	C, t[15] = madd2(y[20], x[15], t[15], C)
	C, t[16] = madd2(y[20], x[16], t[16], C)
	C, t[17] = madd2(y[20], x[17], t[17], C)
	C, t[18] = madd2(y[20], x[18], t[18], C)
	C, t[19] = madd2(y[20], x[19], t[19], C)
	C, t[20] = madd2(y[20], x[20], t[20], C)
	C, t[21] = madd2(y[20], x[21], t[21], C)
	C, t[22] = madd2(y[20], x[22], t[22], C)
	C, t[23] = madd2(y[20], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[21], x[0], t[0])
	C, t[1] = madd2(y[21], x[1], t[1], C)
	C, t[2] = madd2(y[21], x[2], t[2], C)
	C, t[3] = madd2(y[21], x[3], t[3], C)
	C, t[4] = madd2(y[21], x[4], t[4], C)
	C, t[5] = madd2(y[21], x[5], t[5], C)
	C, t[6] = madd2(y[21], x[6], t[6], C)
	C, t[7] = madd2(y[21], x[7], t[7], C)
	C, t[8] = madd2(y[21], x[8], t[8], C)
	C, t[9] = madd2(y[21], x[9], t[9], C)
	C, t[10] = madd2(y[21], x[10], t[10], C)
	C, t[11] = madd2(y[21], x[11], t[11], C)
	C, t[12] = madd2(y[21], x[12], t[12], C)
	C, t[13] = madd2(y[21], x[13], t[13], C)
	C, t[14] = madd2(y[21], x[14], t[14], C)
	C, t[15] = madd2(y[21], x[15], t[15], C)
	C, t[16] = madd2(y[21], x[16], t[16], C)
	C, t[17] = madd2(y[21], x[17], t[17], C)
	C, t[18] = madd2(y[21], x[18], t[18], C)
	C, t[19] = madd2(y[21], x[19], t[19], C)
	C, t[20] = madd2(y[21], x[20], t[20], C)
	C, t[21] = madd2(y[21], x[21], t[21], C)
	C, t[22] = madd2(y[21], x[22], t[22], C)
	C, t[23] = madd2(y[21], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[22], x[0], t[0])
	C, t[1] = madd2(y[22], x[1], t[1], C)
	C, t[2] = madd2(y[22], x[2], t[2], C)
	C, t[3] = madd2(y[22], x[3], t[3], C)
	C, t[4] = madd2(y[22], x[4], t[4], C)
	C, t[5] = madd2(y[22], x[5], t[5], C)
	C, t[6] = madd2(y[22], x[6], t[6], C)
	C, t[7] = madd2(y[22], x[7], t[7], C)
	C, t[8] = madd2(y[22], x[8], t[8], C)
	C, t[9] = madd2(y[22], x[9], t[9], C)
	C, t[10] = madd2(y[22], x[10], t[10], C)
	C, t[11] = madd2(y[22], x[11], t[11], C)
	C, t[12] = madd2(y[22], x[12], t[12], C)
	C, t[13] = madd2(y[22], x[13], t[13], C)
	C, t[14] = madd2(y[22], x[14], t[14], C)
	C, t[15] = madd2(y[22], x[15], t[15], C)
	C, t[16] = madd2(y[22], x[16], t[16], C)
	C, t[17] = madd2(y[22], x[17], t[17], C)
	C, t[18] = madd2(y[22], x[18], t[18], C)
	C, t[19] = madd2(y[22], x[19], t[19], C)
	C, t[20] = madd2(y[22], x[20], t[20], C)
	C, t[21] = madd2(y[22], x[21], t[21], C)
	C, t[22] = madd2(y[22], x[22], t[22], C)
	C, t[23] = madd2(y[22], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[23], x[0], t[0])
	C, t[1] = madd2(y[23], x[1], t[1], C)
	C, t[2] = madd2(y[23], x[2], t[2], C)
	C, t[3] = madd2(y[23], x[3], t[3], C)
	C, t[4] = madd2(y[23], x[4], t[4], C)
	C, t[5] = madd2(y[23], x[5], t[5], C)
	C, t[6] = madd2(y[23], x[6], t[6], C)
	C, t[7] = madd2(y[23], x[7], t[7], C)
	C, t[8] = madd2(y[23], x[8], t[8], C)
	C, t[9] = madd2(y[23], x[9], t[9], C)
	C, t[10] = madd2(y[23], x[10], t[10], C)
	C, t[11] = madd2(y[23], x[11], t[11], C)
	C, t[12] = madd2(y[23], x[12], t[12], C)
	C, t[13] = madd2(y[23], x[13], t[13], C)
	C, t[14] = madd2(y[23], x[14], t[14], C)
	C, t[15] = madd2(y[23], x[15], t[15], C)
	C, t[16] = madd2(y[23], x[16], t[16], C)
	C, t[17] = madd2(y[23], x[17], t[17], C)
	C, t[18] = madd2(y[23], x[18], t[18], C)
	C, t[19] = madd2(y[23], x[19], t[19], C)
	C, t[20] = madd2(y[23], x[20], t[20], C)
	C, t[21] = madd2(y[23], x[21], t[21], C)
	C, t[22] = madd2(y[23], x[22], t[22], C)
	C, t[23] = madd2(y[23], x[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)

	if t[24] != 0 {
		// we need to reduce, we have a result on 25 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(t[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(t[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(t[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(t[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(t[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(t[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(t[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(t[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(t[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(t[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(t[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(t[12], 985633084520275452, b)
		z[13], b = bits.Sub64(t[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(t[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(t[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(t[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(t[17], 70677542929169200, b)
		z[18], b = bits.Sub64(t[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(t[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(t[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(t[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(t[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(t[23], 8318472596091193811, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]
	z[20] = t[20]
	z[21] = t[21]
	z[22] = t[22]
	z[23] = t[23]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element24) MulAssign(x *Element24) *Element24 {

	var t [25]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)
	C, t[19] = madd1(x[0], z[19], C)
	C, t[20] = madd1(x[0], z[20], C)
	C, t[21] = madd1(x[0], z[21], C)
	C, t[22] = madd1(x[0], z[22], C)
	C, t[23] = madd1(x[0], z[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)
	C, t[19] = madd2(x[1], z[19], t[19], C)
	C, t[20] = madd2(x[1], z[20], t[20], C)
	C, t[21] = madd2(x[1], z[21], t[21], C)
	C, t[22] = madd2(x[1], z[22], t[22], C)
	C, t[23] = madd2(x[1], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)
	C, t[19] = madd2(x[2], z[19], t[19], C)
	C, t[20] = madd2(x[2], z[20], t[20], C)
	C, t[21] = madd2(x[2], z[21], t[21], C)
	C, t[22] = madd2(x[2], z[22], t[22], C)
	C, t[23] = madd2(x[2], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)
	C, t[19] = madd2(x[3], z[19], t[19], C)
	C, t[20] = madd2(x[3], z[20], t[20], C)
	C, t[21] = madd2(x[3], z[21], t[21], C)
	C, t[22] = madd2(x[3], z[22], t[22], C)
	C, t[23] = madd2(x[3], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)
	C, t[19] = madd2(x[4], z[19], t[19], C)
	C, t[20] = madd2(x[4], z[20], t[20], C)
	C, t[21] = madd2(x[4], z[21], t[21], C)
	C, t[22] = madd2(x[4], z[22], t[22], C)
	C, t[23] = madd2(x[4], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)
	C, t[19] = madd2(x[5], z[19], t[19], C)
	C, t[20] = madd2(x[5], z[20], t[20], C)
	C, t[21] = madd2(x[5], z[21], t[21], C)
	C, t[22] = madd2(x[5], z[22], t[22], C)
	C, t[23] = madd2(x[5], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)
	C, t[19] = madd2(x[6], z[19], t[19], C)
	C, t[20] = madd2(x[6], z[20], t[20], C)
	C, t[21] = madd2(x[6], z[21], t[21], C)
	C, t[22] = madd2(x[6], z[22], t[22], C)
	C, t[23] = madd2(x[6], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)
	C, t[19] = madd2(x[7], z[19], t[19], C)
	C, t[20] = madd2(x[7], z[20], t[20], C)
	C, t[21] = madd2(x[7], z[21], t[21], C)
	C, t[22] = madd2(x[7], z[22], t[22], C)
	C, t[23] = madd2(x[7], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)
	C, t[19] = madd2(x[8], z[19], t[19], C)
	C, t[20] = madd2(x[8], z[20], t[20], C)
	C, t[21] = madd2(x[8], z[21], t[21], C)
	C, t[22] = madd2(x[8], z[22], t[22], C)
	C, t[23] = madd2(x[8], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)
	C, t[19] = madd2(x[9], z[19], t[19], C)
	C, t[20] = madd2(x[9], z[20], t[20], C)
	C, t[21] = madd2(x[9], z[21], t[21], C)
	C, t[22] = madd2(x[9], z[22], t[22], C)
	C, t[23] = madd2(x[9], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)
	C, t[19] = madd2(x[10], z[19], t[19], C)
	C, t[20] = madd2(x[10], z[20], t[20], C)
	C, t[21] = madd2(x[10], z[21], t[21], C)
	C, t[22] = madd2(x[10], z[22], t[22], C)
	C, t[23] = madd2(x[10], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)
	C, t[19] = madd2(x[11], z[19], t[19], C)
	C, t[20] = madd2(x[11], z[20], t[20], C)
	C, t[21] = madd2(x[11], z[21], t[21], C)
	C, t[22] = madd2(x[11], z[22], t[22], C)
	C, t[23] = madd2(x[11], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)
	C, t[19] = madd2(x[12], z[19], t[19], C)
	C, t[20] = madd2(x[12], z[20], t[20], C)
	C, t[21] = madd2(x[12], z[21], t[21], C)
	C, t[22] = madd2(x[12], z[22], t[22], C)
	C, t[23] = madd2(x[12], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)
	C, t[19] = madd2(x[13], z[19], t[19], C)
	C, t[20] = madd2(x[13], z[20], t[20], C)
	C, t[21] = madd2(x[13], z[21], t[21], C)
	C, t[22] = madd2(x[13], z[22], t[22], C)
	C, t[23] = madd2(x[13], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)
	C, t[19] = madd2(x[14], z[19], t[19], C)
	C, t[20] = madd2(x[14], z[20], t[20], C)
	C, t[21] = madd2(x[14], z[21], t[21], C)
	C, t[22] = madd2(x[14], z[22], t[22], C)
	C, t[23] = madd2(x[14], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)
	C, t[19] = madd2(x[15], z[19], t[19], C)
	C, t[20] = madd2(x[15], z[20], t[20], C)
	C, t[21] = madd2(x[15], z[21], t[21], C)
	C, t[22] = madd2(x[15], z[22], t[22], C)
	C, t[23] = madd2(x[15], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)
	C, t[19] = madd2(x[16], z[19], t[19], C)
	C, t[20] = madd2(x[16], z[20], t[20], C)
	C, t[21] = madd2(x[16], z[21], t[21], C)
	C, t[22] = madd2(x[16], z[22], t[22], C)
	C, t[23] = madd2(x[16], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)
	C, t[19] = madd2(x[17], z[19], t[19], C)
	C, t[20] = madd2(x[17], z[20], t[20], C)
	C, t[21] = madd2(x[17], z[21], t[21], C)
	C, t[22] = madd2(x[17], z[22], t[22], C)
	C, t[23] = madd2(x[17], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)
	C, t[19] = madd2(x[18], z[19], t[19], C)
	C, t[20] = madd2(x[18], z[20], t[20], C)
	C, t[21] = madd2(x[18], z[21], t[21], C)
	C, t[22] = madd2(x[18], z[22], t[22], C)
	C, t[23] = madd2(x[18], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[19], z[0], t[0])
	C, t[1] = madd2(x[19], z[1], t[1], C)
	C, t[2] = madd2(x[19], z[2], t[2], C)
	C, t[3] = madd2(x[19], z[3], t[3], C)
	C, t[4] = madd2(x[19], z[4], t[4], C)
	C, t[5] = madd2(x[19], z[5], t[5], C)
	C, t[6] = madd2(x[19], z[6], t[6], C)
	C, t[7] = madd2(x[19], z[7], t[7], C)
	C, t[8] = madd2(x[19], z[8], t[8], C)
	C, t[9] = madd2(x[19], z[9], t[9], C)
	C, t[10] = madd2(x[19], z[10], t[10], C)
	C, t[11] = madd2(x[19], z[11], t[11], C)
	C, t[12] = madd2(x[19], z[12], t[12], C)
	C, t[13] = madd2(x[19], z[13], t[13], C)
	C, t[14] = madd2(x[19], z[14], t[14], C)
	C, t[15] = madd2(x[19], z[15], t[15], C)
	C, t[16] = madd2(x[19], z[16], t[16], C)
	C, t[17] = madd2(x[19], z[17], t[17], C)
	C, t[18] = madd2(x[19], z[18], t[18], C)
	C, t[19] = madd2(x[19], z[19], t[19], C)
	C, t[20] = madd2(x[19], z[20], t[20], C)
	C, t[21] = madd2(x[19], z[21], t[21], C)
	C, t[22] = madd2(x[19], z[22], t[22], C)
	C, t[23] = madd2(x[19], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[20], z[0], t[0])
	C, t[1] = madd2(x[20], z[1], t[1], C)
	C, t[2] = madd2(x[20], z[2], t[2], C)
	C, t[3] = madd2(x[20], z[3], t[3], C)
	C, t[4] = madd2(x[20], z[4], t[4], C)
	C, t[5] = madd2(x[20], z[5], t[5], C)
	C, t[6] = madd2(x[20], z[6], t[6], C)
	C, t[7] = madd2(x[20], z[7], t[7], C)
	C, t[8] = madd2(x[20], z[8], t[8], C)
	C, t[9] = madd2(x[20], z[9], t[9], C)
	C, t[10] = madd2(x[20], z[10], t[10], C)
	C, t[11] = madd2(x[20], z[11], t[11], C)
	C, t[12] = madd2(x[20], z[12], t[12], C)
	C, t[13] = madd2(x[20], z[13], t[13], C)
	C, t[14] = madd2(x[20], z[14], t[14], C)
	C, t[15] = madd2(x[20], z[15], t[15], C)
	C, t[16] = madd2(x[20], z[16], t[16], C)
	C, t[17] = madd2(x[20], z[17], t[17], C)
	C, t[18] = madd2(x[20], z[18], t[18], C)
	C, t[19] = madd2(x[20], z[19], t[19], C)
	C, t[20] = madd2(x[20], z[20], t[20], C)
	C, t[21] = madd2(x[20], z[21], t[21], C)
	C, t[22] = madd2(x[20], z[22], t[22], C)
	C, t[23] = madd2(x[20], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[21], z[0], t[0])
	C, t[1] = madd2(x[21], z[1], t[1], C)
	C, t[2] = madd2(x[21], z[2], t[2], C)
	C, t[3] = madd2(x[21], z[3], t[3], C)
	C, t[4] = madd2(x[21], z[4], t[4], C)
	C, t[5] = madd2(x[21], z[5], t[5], C)
	C, t[6] = madd2(x[21], z[6], t[6], C)
	C, t[7] = madd2(x[21], z[7], t[7], C)
	C, t[8] = madd2(x[21], z[8], t[8], C)
	C, t[9] = madd2(x[21], z[9], t[9], C)
	C, t[10] = madd2(x[21], z[10], t[10], C)
	C, t[11] = madd2(x[21], z[11], t[11], C)
	C, t[12] = madd2(x[21], z[12], t[12], C)
	C, t[13] = madd2(x[21], z[13], t[13], C)
	C, t[14] = madd2(x[21], z[14], t[14], C)
	C, t[15] = madd2(x[21], z[15], t[15], C)
	C, t[16] = madd2(x[21], z[16], t[16], C)
	C, t[17] = madd2(x[21], z[17], t[17], C)
	C, t[18] = madd2(x[21], z[18], t[18], C)
	C, t[19] = madd2(x[21], z[19], t[19], C)
	C, t[20] = madd2(x[21], z[20], t[20], C)
	C, t[21] = madd2(x[21], z[21], t[21], C)
	C, t[22] = madd2(x[21], z[22], t[22], C)
	C, t[23] = madd2(x[21], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[22], z[0], t[0])
	C, t[1] = madd2(x[22], z[1], t[1], C)
	C, t[2] = madd2(x[22], z[2], t[2], C)
	C, t[3] = madd2(x[22], z[3], t[3], C)
	C, t[4] = madd2(x[22], z[4], t[4], C)
	C, t[5] = madd2(x[22], z[5], t[5], C)
	C, t[6] = madd2(x[22], z[6], t[6], C)
	C, t[7] = madd2(x[22], z[7], t[7], C)
	C, t[8] = madd2(x[22], z[8], t[8], C)
	C, t[9] = madd2(x[22], z[9], t[9], C)
	C, t[10] = madd2(x[22], z[10], t[10], C)
	C, t[11] = madd2(x[22], z[11], t[11], C)
	C, t[12] = madd2(x[22], z[12], t[12], C)
	C, t[13] = madd2(x[22], z[13], t[13], C)
	C, t[14] = madd2(x[22], z[14], t[14], C)
	C, t[15] = madd2(x[22], z[15], t[15], C)
	C, t[16] = madd2(x[22], z[16], t[16], C)
	C, t[17] = madd2(x[22], z[17], t[17], C)
	C, t[18] = madd2(x[22], z[18], t[18], C)
	C, t[19] = madd2(x[22], z[19], t[19], C)
	C, t[20] = madd2(x[22], z[20], t[20], C)
	C, t[21] = madd2(x[22], z[21], t[21], C)
	C, t[22] = madd2(x[22], z[22], t[22], C)
	C, t[23] = madd2(x[22], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[23], z[0], t[0])
	C, t[1] = madd2(x[23], z[1], t[1], C)
	C, t[2] = madd2(x[23], z[2], t[2], C)
	C, t[3] = madd2(x[23], z[3], t[3], C)
	C, t[4] = madd2(x[23], z[4], t[4], C)
	C, t[5] = madd2(x[23], z[5], t[5], C)
	C, t[6] = madd2(x[23], z[6], t[6], C)
	C, t[7] = madd2(x[23], z[7], t[7], C)
	C, t[8] = madd2(x[23], z[8], t[8], C)
	C, t[9] = madd2(x[23], z[9], t[9], C)
	C, t[10] = madd2(x[23], z[10], t[10], C)
	C, t[11] = madd2(x[23], z[11], t[11], C)
	C, t[12] = madd2(x[23], z[12], t[12], C)
	C, t[13] = madd2(x[23], z[13], t[13], C)
	C, t[14] = madd2(x[23], z[14], t[14], C)
	C, t[15] = madd2(x[23], z[15], t[15], C)
	C, t[16] = madd2(x[23], z[16], t[16], C)
	C, t[17] = madd2(x[23], z[17], t[17], C)
	C, t[18] = madd2(x[23], z[18], t[18], C)
	C, t[19] = madd2(x[23], z[19], t[19], C)
	C, t[20] = madd2(x[23], z[20], t[20], C)
	C, t[21] = madd2(x[23], z[21], t[21], C)
	C, t[22] = madd2(x[23], z[22], t[22], C)
	C, t[23] = madd2(x[23], z[23], t[23], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 6198633493284723617

	// -----------------------------------
	// Second loop
	C = madd0(m, 3588713371853813663, t[0])

	C, t[0] = madd2(m, 15042804291081370128, t[1], C)

	C, t[1] = madd2(m, 6709867421239166187, t[2], C)

	C, t[2] = madd2(m, 3841788797817823128, t[3], C)

	C, t[3] = madd2(m, 4792390169548383872, t[4], C)

	C, t[4] = madd2(m, 2070636120666095625, t[5], C)

	C, t[5] = madd2(m, 10555117015970425415, t[6], C)

	C, t[6] = madd2(m, 6874539635833824613, t[7], C)

	C, t[7] = madd2(m, 4833053018619748733, t[8], C)

	C, t[8] = madd2(m, 16071648009625506120, t[9], C)

	C, t[9] = madd2(m, 1516130573812389957, t[10], C)

	C, t[10] = madd2(m, 8468566544299803654, t[11], C)

	C, t[11] = madd2(m, 985633084520275452, t[12], C)

	C, t[12] = madd2(m, 10434095359993118657, t[13], C)

	C, t[13] = madd2(m, 5020367878805498788, t[14], C)

	C, t[14] = madd2(m, 11460672697543855324, t[15], C)

	C, t[15] = madd2(m, 15951671575786767786, t[16], C)

	C, t[16] = madd2(m, 70677542929169200, t[17], C)

	C, t[17] = madd2(m, 16550347823050713448, t[18], C)

	C, t[18] = madd2(m, 10708199972223471314, t[19], C)

	C, t[19] = madd2(m, 2376396238609708188, t[20], C)

	C, t[20] = madd2(m, 3783118409849109592, t[21], C)

	C, t[21] = madd2(m, 11499181060108342328, t[22], C)

	C, t[22] = madd3(m, 8318472596091193811, t[23], C, t[24])

	t[23], t[24] = bits.Add64(D, C, 0)

	if t[24] != 0 {
		// we need to reduce, we have a result on 25 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(t[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(t[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(t[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(t[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(t[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(t[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(t[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(t[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(t[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(t[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(t[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(t[12], 985633084520275452, b)
		z[13], b = bits.Sub64(t[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(t[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(t[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(t[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(t[17], 70677542929169200, b)
		z[18], b = bits.Sub64(t[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(t[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(t[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(t[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(t[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(t[23], 8318472596091193811, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]
	z[20] = t[20]
	z[21] = t[21]
	z[22] = t[22]
	z[23] = t[23]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[23] < 8318472596091193811 || (z[23] == 8318472596091193811 && (z[22] < 11499181060108342328 || (z[22] == 11499181060108342328 && (z[21] < 3783118409849109592 || (z[21] == 3783118409849109592 && (z[20] < 2376396238609708188 || (z[20] == 2376396238609708188 && (z[19] < 10708199972223471314 || (z[19] == 10708199972223471314 && (z[18] < 16550347823050713448 || (z[18] == 16550347823050713448 && (z[17] < 70677542929169200 || (z[17] == 70677542929169200 && (z[16] < 15951671575786767786 || (z[16] == 15951671575786767786 && (z[15] < 11460672697543855324 || (z[15] == 11460672697543855324 && (z[14] < 5020367878805498788 || (z[14] == 5020367878805498788 && (z[13] < 10434095359993118657 || (z[13] == 10434095359993118657 && (z[12] < 985633084520275452 || (z[12] == 985633084520275452 && (z[11] < 8468566544299803654 || (z[11] == 8468566544299803654 && (z[10] < 1516130573812389957 || (z[10] == 1516130573812389957 && (z[9] < 16071648009625506120 || (z[9] == 16071648009625506120 && (z[8] < 4833053018619748733 || (z[8] == 4833053018619748733 && (z[7] < 6874539635833824613 || (z[7] == 6874539635833824613 && (z[6] < 10555117015970425415 || (z[6] == 10555117015970425415 && (z[5] < 2070636120666095625 || (z[5] == 2070636120666095625 && (z[4] < 4792390169548383872 || (z[4] == 4792390169548383872 && (z[3] < 3841788797817823128 || (z[3] == 3841788797817823128 && (z[2] < 6709867421239166187 || (z[2] == 6709867421239166187 && (z[1] < 15042804291081370128 || (z[1] == 15042804291081370128 && (z[0] < 3588713371853813663))))))))))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 3588713371853813663, 0)
		z[1], b = bits.Sub64(z[1], 15042804291081370128, b)
		z[2], b = bits.Sub64(z[2], 6709867421239166187, b)
		z[3], b = bits.Sub64(z[3], 3841788797817823128, b)
		z[4], b = bits.Sub64(z[4], 4792390169548383872, b)
		z[5], b = bits.Sub64(z[5], 2070636120666095625, b)
		z[6], b = bits.Sub64(z[6], 10555117015970425415, b)
		z[7], b = bits.Sub64(z[7], 6874539635833824613, b)
		z[8], b = bits.Sub64(z[8], 4833053018619748733, b)
		z[9], b = bits.Sub64(z[9], 16071648009625506120, b)
		z[10], b = bits.Sub64(z[10], 1516130573812389957, b)
		z[11], b = bits.Sub64(z[11], 8468566544299803654, b)
		z[12], b = bits.Sub64(z[12], 985633084520275452, b)
		z[13], b = bits.Sub64(z[13], 10434095359993118657, b)
		z[14], b = bits.Sub64(z[14], 5020367878805498788, b)
		z[15], b = bits.Sub64(z[15], 11460672697543855324, b)
		z[16], b = bits.Sub64(z[16], 15951671575786767786, b)
		z[17], b = bits.Sub64(z[17], 70677542929169200, b)
		z[18], b = bits.Sub64(z[18], 16550347823050713448, b)
		z[19], b = bits.Sub64(z[19], 10708199972223471314, b)
		z[20], b = bits.Sub64(z[20], 2376396238609708188, b)
		z[21], b = bits.Sub64(z[21], 3783118409849109592, b)
		z[22], b = bits.Sub64(z[22], 11499181060108342328, b)
		z[23], _ = bits.Sub64(z[23], 8318472596091193811, b)
	}
	return z
}

func (z *Element24) Legendre() int {
	var l Element24
	// z^((p-1)/2)
	l.Exp(*z,
		1794356685926906831,
		16744774182395460872,
		3354933710619583093,
		1920894398908911564,
		11619567121628967744,
		10258690097187823620,
		14500930544839988515,
		12660641854771688114,
		2416526509309874366,
		17259196041667528868,
		758065286906194978,
		4234283272149901827,
		9716188579114913534,
		5217047679996559328,
		2510183939402749394,
		5730336348771927662,
		7975835787893383893,
		35338771464584600,
		8275173911525356724,
		5354099986111735657,
		1188198119304854094,
		1891559204924554796,
		14972962566908946972,
		4159236298045596905,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[23] == 1809798881527163992) && (l[22] == 13895126027202418575) && (l[21] == 10880507254011332431) && (l[20] == 13693951596490135238) && (l[19] == 15477088202972160602) && (l[18] == 3792792501317676335) && (l[17] == 18305388987851213214) && (l[16] == 4990144995845567658) && (l[15] == 13972142752331392583) && (l[14] == 8406008316098554038) && (l[13] == 16025297427432865917) && (l[12] == 16475477904669000711) && (l[11] == 1509610985109944307) && (l[10] == 15414482926084771700) && (l[9] == 4750192128168090991) && (l[8] == 8780638036470054149) && (l[7] == 4697664802041902388) && (l[6] == 15783254115478252401) && (l[5] == 14305471832377360365) && (l[4] == 8861963734612783871) && (l[3] == 10763166478073905359) && (l[2] == 5027009231231219240) && (l[1] == 6807879565256362975) && (l[0] == 11269317330001924290) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element24) Sqrt(x *Element24) *Element24 {
	switch x.Legendre() {
	case -1:
		return nil
	case 0:
		return z.SetZero()
	case 1:
		break
	}
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	return z.Exp(*x,
		897178342963453416,
		17595759128052506244,
		1677466855309791546,
		960447199454455782,
		5809783560814483872,
		14352717085448687618,
		7250465272419994257,
		6330320927385844057,
		1208263254654937183,
		8629598020833764434,
		9602404680307873297,
		2117141636074950913,
		4858094289557456767,
		2608523839998279664,
		1255091969701374697,
		12088540211240739639,
		3987917893946691946,
		17669385732292300,
		13360958992617454170,
		2677049993055867828,
		594099059652427047,
		945779602462277398,
		16709853320309249294,
		2079618149022798452,
	)
}

// Square z = x * x mod q
func (z *Element24) Square(x *Element24) *Element24 {
	return z.Mul(x, x)
}
