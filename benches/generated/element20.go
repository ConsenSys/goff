// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 8801742349413353581681791215458970831505297130488702170701955171187033367908202850654229827120209374882199225395089298965868481248706442373065244634772021183661753569390607233372836346953259299522558421590023515009516727814827043960309896177542852797807660929784881677949223158626111142766450695915932964157335429353669091216573224631930899002859924231658039212864668314376921003707157
// Code generated by goff DO NOT EDIT
// Element20 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element20 represents a field element stored on 20 words (uint64)
// Element20 are assumed to be in Montgomery form in all methods
type Element20 [20]uint64

// Element20Limbs number of 64 bits words needed to represent Element20
const Element20Limbs = 20

// Element20Bits number bits needed to represent Element20
const Element20Bits = 1279

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element20) SetUint64(v uint64) *Element20 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element20) Set(x *Element20) *Element20 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	z[19] = x[19]
	return z
}

// SetZero z = 0
func (z *Element20) SetZero() *Element20 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element20) SetOne() *Element20 {
	z[0] = 1486728457220811222
	z[1] = 2977472453868633086
	z[2] = 13862733295047165271
	z[3] = 13998305250604669301
	z[4] = 13020056497846403786
	z[5] = 3503432869139111819
	z[6] = 5697629904357047967
	z[7] = 4902514607119515983
	z[8] = 8222225898453338848
	z[9] = 13393493562567255535
	z[10] = 3843530523474400472
	z[11] = 10281314291908401441
	z[12] = 11627601391810512695
	z[13] = 5603873741418619098
	z[14] = 1563390534069955536
	z[15] = 2427587543009726600
	z[16] = 885674815842235000
	z[17] = 13263367364544280996
	z[18] = 18044995382649203291
	z[19] = 2846768450732836800
	return z
}

// Neg z = q - x
func (z *Element20) Neg(x *Element20) *Element20 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(17703379845099146005, x[0], 0)
	z[1], borrow = bits.Sub64(7734635809920459264, x[1], borrow)
	z[2], borrow = bits.Sub64(2292005389331193172, x[2], borrow)
	z[3], borrow = bits.Sub64(11447591448407216965, x[3], borrow)
	z[4], borrow = bits.Sub64(2713343787931573914, x[4], borrow)
	z[5], borrow = bits.Sub64(7471655602285219898, x[5], borrow)
	z[6], borrow = bits.Sub64(6374557084676251824, x[6], borrow)
	z[7], borrow = bits.Sub64(15995486770149793624, x[7], borrow)
	z[8], borrow = bits.Sub64(5112259087628106383, x[8], borrow)
	z[9], borrow = bits.Sub64(11749997292425923848, x[9], borrow)
	z[10], borrow = bits.Sub64(7301606775117575571, x[10], borrow)
	z[11], borrow = bits.Sub64(4082714890900575087, x[11], borrow)
	z[12], borrow = bits.Sub64(12632943377804295268, x[12], borrow)
	z[13], borrow = bits.Sub64(15644807203000242066, x[13], borrow)
	z[14], borrow = bits.Sub64(17665048806674573847, x[14], borrow)
	z[15], borrow = bits.Sub64(17232950302204688315, x[15], borrow)
	z[16], borrow = bits.Sub64(18003906665788434115, x[16], borrow)
	z[17], borrow = bits.Sub64(2591688354582635309, x[17], borrow)
	z[18], borrow = bits.Sub64(9424246382384949970, x[18], borrow)
	z[19], _ = bits.Sub64(7799987811488357407, x[19], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element20) Div(x, y *Element20) *Element20 {
	var yInv Element20
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element20) Equal(x *Element20) bool {
	return (z[19] == x[19]) && (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element20) IsZero() bool {
	return (z[19] | z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element20ModulusBigInt big.Int
var onceelement20Modulus sync.Once

func element20ModulusBigInt() *big.Int {
	onceelement20Modulus.Do(func() {
		_element20ModulusBigInt.SetString("8801742349413353581681791215458970831505297130488702170701955171187033367908202850654229827120209374882199225395089298965868481248706442373065244634772021183661753569390607233372836346953259299522558421590023515009516727814827043960309896177542852797807660929784881677949223158626111142766450695915932964157335429353669091216573224631930899002859924231658039212864668314376921003707157", 10)
	})
	return &_element20ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element20) Inverse(x *Element20) *Element20 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element20ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element20) SetRandom() *Element20 {
	bytes := make([]byte, 160)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[16] = binary.BigEndian.Uint64(bytes[128:136])
	z[17] = binary.BigEndian.Uint64(bytes[136:144])
	z[18] = binary.BigEndian.Uint64(bytes[144:152])
	z[19] = binary.BigEndian.Uint64(bytes[152:160])
	z[19] %= 7799987811488357407

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element20) Add(x, y *Element20) *Element20 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	z[19], carry = bits.Add64(x[19], y[19], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], carry = bits.Sub64(z[1], 7734635809920459264, carry)
		z[2], carry = bits.Sub64(z[2], 2292005389331193172, carry)
		z[3], carry = bits.Sub64(z[3], 11447591448407216965, carry)
		z[4], carry = bits.Sub64(z[4], 2713343787931573914, carry)
		z[5], carry = bits.Sub64(z[5], 7471655602285219898, carry)
		z[6], carry = bits.Sub64(z[6], 6374557084676251824, carry)
		z[7], carry = bits.Sub64(z[7], 15995486770149793624, carry)
		z[8], carry = bits.Sub64(z[8], 5112259087628106383, carry)
		z[9], carry = bits.Sub64(z[9], 11749997292425923848, carry)
		z[10], carry = bits.Sub64(z[10], 7301606775117575571, carry)
		z[11], carry = bits.Sub64(z[11], 4082714890900575087, carry)
		z[12], carry = bits.Sub64(z[12], 12632943377804295268, carry)
		z[13], carry = bits.Sub64(z[13], 15644807203000242066, carry)
		z[14], carry = bits.Sub64(z[14], 17665048806674573847, carry)
		z[15], carry = bits.Sub64(z[15], 17232950302204688315, carry)
		z[16], carry = bits.Sub64(z[16], 18003906665788434115, carry)
		z[17], carry = bits.Sub64(z[17], 2591688354582635309, carry)
		z[18], carry = bits.Sub64(z[18], 9424246382384949970, carry)
		z[19], carry = bits.Sub64(z[19], 7799987811488357407, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element20) AddAssign(x *Element20) *Element20 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	z[19], carry = bits.Add64(z[19], x[19], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], carry = bits.Sub64(z[1], 7734635809920459264, carry)
		z[2], carry = bits.Sub64(z[2], 2292005389331193172, carry)
		z[3], carry = bits.Sub64(z[3], 11447591448407216965, carry)
		z[4], carry = bits.Sub64(z[4], 2713343787931573914, carry)
		z[5], carry = bits.Sub64(z[5], 7471655602285219898, carry)
		z[6], carry = bits.Sub64(z[6], 6374557084676251824, carry)
		z[7], carry = bits.Sub64(z[7], 15995486770149793624, carry)
		z[8], carry = bits.Sub64(z[8], 5112259087628106383, carry)
		z[9], carry = bits.Sub64(z[9], 11749997292425923848, carry)
		z[10], carry = bits.Sub64(z[10], 7301606775117575571, carry)
		z[11], carry = bits.Sub64(z[11], 4082714890900575087, carry)
		z[12], carry = bits.Sub64(z[12], 12632943377804295268, carry)
		z[13], carry = bits.Sub64(z[13], 15644807203000242066, carry)
		z[14], carry = bits.Sub64(z[14], 17665048806674573847, carry)
		z[15], carry = bits.Sub64(z[15], 17232950302204688315, carry)
		z[16], carry = bits.Sub64(z[16], 18003906665788434115, carry)
		z[17], carry = bits.Sub64(z[17], 2591688354582635309, carry)
		z[18], carry = bits.Sub64(z[18], 9424246382384949970, carry)
		z[19], carry = bits.Sub64(z[19], 7799987811488357407, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element20) Double(x *Element20) *Element20 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	z[19], carry = bits.Add64(x[19], x[19], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], carry = bits.Sub64(z[1], 7734635809920459264, carry)
		z[2], carry = bits.Sub64(z[2], 2292005389331193172, carry)
		z[3], carry = bits.Sub64(z[3], 11447591448407216965, carry)
		z[4], carry = bits.Sub64(z[4], 2713343787931573914, carry)
		z[5], carry = bits.Sub64(z[5], 7471655602285219898, carry)
		z[6], carry = bits.Sub64(z[6], 6374557084676251824, carry)
		z[7], carry = bits.Sub64(z[7], 15995486770149793624, carry)
		z[8], carry = bits.Sub64(z[8], 5112259087628106383, carry)
		z[9], carry = bits.Sub64(z[9], 11749997292425923848, carry)
		z[10], carry = bits.Sub64(z[10], 7301606775117575571, carry)
		z[11], carry = bits.Sub64(z[11], 4082714890900575087, carry)
		z[12], carry = bits.Sub64(z[12], 12632943377804295268, carry)
		z[13], carry = bits.Sub64(z[13], 15644807203000242066, carry)
		z[14], carry = bits.Sub64(z[14], 17665048806674573847, carry)
		z[15], carry = bits.Sub64(z[15], 17232950302204688315, carry)
		z[16], carry = bits.Sub64(z[16], 18003906665788434115, carry)
		z[17], carry = bits.Sub64(z[17], 2591688354582635309, carry)
		z[18], carry = bits.Sub64(z[18], 9424246382384949970, carry)
		z[19], carry = bits.Sub64(z[19], 7799987811488357407, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element20) Sub(x, y *Element20) *Element20 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	z[19], b = bits.Sub64(x[19], y[19], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17703379845099146005, 0)
		z[1], c = bits.Add64(z[1], 7734635809920459264, c)
		z[2], c = bits.Add64(z[2], 2292005389331193172, c)
		z[3], c = bits.Add64(z[3], 11447591448407216965, c)
		z[4], c = bits.Add64(z[4], 2713343787931573914, c)
		z[5], c = bits.Add64(z[5], 7471655602285219898, c)
		z[6], c = bits.Add64(z[6], 6374557084676251824, c)
		z[7], c = bits.Add64(z[7], 15995486770149793624, c)
		z[8], c = bits.Add64(z[8], 5112259087628106383, c)
		z[9], c = bits.Add64(z[9], 11749997292425923848, c)
		z[10], c = bits.Add64(z[10], 7301606775117575571, c)
		z[11], c = bits.Add64(z[11], 4082714890900575087, c)
		z[12], c = bits.Add64(z[12], 12632943377804295268, c)
		z[13], c = bits.Add64(z[13], 15644807203000242066, c)
		z[14], c = bits.Add64(z[14], 17665048806674573847, c)
		z[15], c = bits.Add64(z[15], 17232950302204688315, c)
		z[16], c = bits.Add64(z[16], 18003906665788434115, c)
		z[17], c = bits.Add64(z[17], 2591688354582635309, c)
		z[18], c = bits.Add64(z[18], 9424246382384949970, c)
		z[19], _ = bits.Add64(z[19], 7799987811488357407, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element20) SubAssign(x *Element20) *Element20 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	z[19], b = bits.Sub64(z[19], x[19], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17703379845099146005, 0)
		z[1], c = bits.Add64(z[1], 7734635809920459264, c)
		z[2], c = bits.Add64(z[2], 2292005389331193172, c)
		z[3], c = bits.Add64(z[3], 11447591448407216965, c)
		z[4], c = bits.Add64(z[4], 2713343787931573914, c)
		z[5], c = bits.Add64(z[5], 7471655602285219898, c)
		z[6], c = bits.Add64(z[6], 6374557084676251824, c)
		z[7], c = bits.Add64(z[7], 15995486770149793624, c)
		z[8], c = bits.Add64(z[8], 5112259087628106383, c)
		z[9], c = bits.Add64(z[9], 11749997292425923848, c)
		z[10], c = bits.Add64(z[10], 7301606775117575571, c)
		z[11], c = bits.Add64(z[11], 4082714890900575087, c)
		z[12], c = bits.Add64(z[12], 12632943377804295268, c)
		z[13], c = bits.Add64(z[13], 15644807203000242066, c)
		z[14], c = bits.Add64(z[14], 17665048806674573847, c)
		z[15], c = bits.Add64(z[15], 17232950302204688315, c)
		z[16], c = bits.Add64(z[16], 18003906665788434115, c)
		z[17], c = bits.Add64(z[17], 2591688354582635309, c)
		z[18], c = bits.Add64(z[18], 9424246382384949970, c)
		z[19], _ = bits.Add64(z[19], 7799987811488357407, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element20) Exp(x Element20, exponent ...uint64) *Element20 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element20) FromMont() *Element20 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2757850243334722499
		C := madd0(m, 17703379845099146005, z[0])
		C, z[0] = madd2(m, 7734635809920459264, z[1], C)
		C, z[1] = madd2(m, 2292005389331193172, z[2], C)
		C, z[2] = madd2(m, 11447591448407216965, z[3], C)
		C, z[3] = madd2(m, 2713343787931573914, z[4], C)
		C, z[4] = madd2(m, 7471655602285219898, z[5], C)
		C, z[5] = madd2(m, 6374557084676251824, z[6], C)
		C, z[6] = madd2(m, 15995486770149793624, z[7], C)
		C, z[7] = madd2(m, 5112259087628106383, z[8], C)
		C, z[8] = madd2(m, 11749997292425923848, z[9], C)
		C, z[9] = madd2(m, 7301606775117575571, z[10], C)
		C, z[10] = madd2(m, 4082714890900575087, z[11], C)
		C, z[11] = madd2(m, 12632943377804295268, z[12], C)
		C, z[12] = madd2(m, 15644807203000242066, z[13], C)
		C, z[13] = madd2(m, 17665048806674573847, z[14], C)
		C, z[14] = madd2(m, 17232950302204688315, z[15], C)
		C, z[15] = madd2(m, 18003906665788434115, z[16], C)
		C, z[16] = madd2(m, 2591688354582635309, z[17], C)
		C, z[17] = madd2(m, 9424246382384949970, z[18], C)
		C, z[18] = madd2(m, 7799987811488357407, z[19], C)
		z[19] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element20) ToMont() *Element20 {
	var rSquare = Element20{
		8876270643650277401,
		16367973310184390727,
		3009176044297703368,
		14908881177397652118,
		9846507788422032214,
		17186774342414759784,
		10605021772832396091,
		13826725589195348915,
		16084480069205281649,
		13842727957643409656,
		7371377103412630019,
		17944811213964648851,
		8152020307196261861,
		10568420406310816507,
		2911447329761862663,
		18268449556550834872,
		9343486872755823861,
		16463360486316385221,
		5736400445270182824,
		742117909822421152,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element20) ToRegular() Element20 {
	return *z.FromMont()
}

// String returns the string form of an Element20 in Montgomery form
func (z *Element20) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element20) ToBigInt(res *big.Int) *big.Int {
	bits := (*[20]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element20) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[20]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element20) SetBigInt(v *big.Int) *Element20 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element20ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element20) SetString(s string) *Element20 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element20.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element20) Mul(x, y *Element20) *Element20 {

	var t [21]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)
	C, t[19] = madd1(y[0], x[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)
	C, t[19] = madd2(y[1], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)
	C, t[19] = madd2(y[2], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)
	C, t[19] = madd2(y[3], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)
	C, t[19] = madd2(y[4], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)
	C, t[19] = madd2(y[5], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)
	C, t[19] = madd2(y[6], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)
	C, t[19] = madd2(y[7], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)
	C, t[19] = madd2(y[8], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)
	C, t[19] = madd2(y[9], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)
	C, t[19] = madd2(y[10], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)
	C, t[19] = madd2(y[11], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)
	C, t[19] = madd2(y[12], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)
	C, t[19] = madd2(y[13], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)
	C, t[19] = madd2(y[14], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)
	C, t[19] = madd2(y[15], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)
	C, t[19] = madd2(y[16], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)
	C, t[19] = madd2(y[17], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)
	C, t[19] = madd2(y[18], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[19], x[0], t[0])
	C, t[1] = madd2(y[19], x[1], t[1], C)
	C, t[2] = madd2(y[19], x[2], t[2], C)
	C, t[3] = madd2(y[19], x[3], t[3], C)
	C, t[4] = madd2(y[19], x[4], t[4], C)
	C, t[5] = madd2(y[19], x[5], t[5], C)
	C, t[6] = madd2(y[19], x[6], t[6], C)
	C, t[7] = madd2(y[19], x[7], t[7], C)
	C, t[8] = madd2(y[19], x[8], t[8], C)
	C, t[9] = madd2(y[19], x[9], t[9], C)
	C, t[10] = madd2(y[19], x[10], t[10], C)
	C, t[11] = madd2(y[19], x[11], t[11], C)
	C, t[12] = madd2(y[19], x[12], t[12], C)
	C, t[13] = madd2(y[19], x[13], t[13], C)
	C, t[14] = madd2(y[19], x[14], t[14], C)
	C, t[15] = madd2(y[19], x[15], t[15], C)
	C, t[16] = madd2(y[19], x[16], t[16], C)
	C, t[17] = madd2(y[19], x[17], t[17], C)
	C, t[18] = madd2(y[19], x[18], t[18], C)
	C, t[19] = madd2(y[19], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)

	if t[20] != 0 {
		// we need to reduce, we have a result on 21 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(t[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(t[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(t[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(t[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(t[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(t[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(t[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(t[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(t[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(t[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(t[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(t[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(t[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(t[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(t[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(t[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(t[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(t[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(t[19], 7799987811488357407, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element20) MulAssign(x *Element20) *Element20 {

	var t [21]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)
	C, t[19] = madd1(x[0], z[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)
	C, t[19] = madd2(x[1], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)
	C, t[19] = madd2(x[2], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)
	C, t[19] = madd2(x[3], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)
	C, t[19] = madd2(x[4], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)
	C, t[19] = madd2(x[5], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)
	C, t[19] = madd2(x[6], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)
	C, t[19] = madd2(x[7], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)
	C, t[19] = madd2(x[8], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)
	C, t[19] = madd2(x[9], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)
	C, t[19] = madd2(x[10], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)
	C, t[19] = madd2(x[11], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)
	C, t[19] = madd2(x[12], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)
	C, t[19] = madd2(x[13], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)
	C, t[19] = madd2(x[14], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)
	C, t[19] = madd2(x[15], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)
	C, t[19] = madd2(x[16], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)
	C, t[19] = madd2(x[17], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)
	C, t[19] = madd2(x[18], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[19], z[0], t[0])
	C, t[1] = madd2(x[19], z[1], t[1], C)
	C, t[2] = madd2(x[19], z[2], t[2], C)
	C, t[3] = madd2(x[19], z[3], t[3], C)
	C, t[4] = madd2(x[19], z[4], t[4], C)
	C, t[5] = madd2(x[19], z[5], t[5], C)
	C, t[6] = madd2(x[19], z[6], t[6], C)
	C, t[7] = madd2(x[19], z[7], t[7], C)
	C, t[8] = madd2(x[19], z[8], t[8], C)
	C, t[9] = madd2(x[19], z[9], t[9], C)
	C, t[10] = madd2(x[19], z[10], t[10], C)
	C, t[11] = madd2(x[19], z[11], t[11], C)
	C, t[12] = madd2(x[19], z[12], t[12], C)
	C, t[13] = madd2(x[19], z[13], t[13], C)
	C, t[14] = madd2(x[19], z[14], t[14], C)
	C, t[15] = madd2(x[19], z[15], t[15], C)
	C, t[16] = madd2(x[19], z[16], t[16], C)
	C, t[17] = madd2(x[19], z[17], t[17], C)
	C, t[18] = madd2(x[19], z[18], t[18], C)
	C, t[19] = madd2(x[19], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 2757850243334722499

	// -----------------------------------
	// Second loop
	C = madd0(m, 17703379845099146005, t[0])

	C, t[0] = madd2(m, 7734635809920459264, t[1], C)

	C, t[1] = madd2(m, 2292005389331193172, t[2], C)

	C, t[2] = madd2(m, 11447591448407216965, t[3], C)

	C, t[3] = madd2(m, 2713343787931573914, t[4], C)

	C, t[4] = madd2(m, 7471655602285219898, t[5], C)

	C, t[5] = madd2(m, 6374557084676251824, t[6], C)

	C, t[6] = madd2(m, 15995486770149793624, t[7], C)

	C, t[7] = madd2(m, 5112259087628106383, t[8], C)

	C, t[8] = madd2(m, 11749997292425923848, t[9], C)

	C, t[9] = madd2(m, 7301606775117575571, t[10], C)

	C, t[10] = madd2(m, 4082714890900575087, t[11], C)

	C, t[11] = madd2(m, 12632943377804295268, t[12], C)

	C, t[12] = madd2(m, 15644807203000242066, t[13], C)

	C, t[13] = madd2(m, 17665048806674573847, t[14], C)

	C, t[14] = madd2(m, 17232950302204688315, t[15], C)

	C, t[15] = madd2(m, 18003906665788434115, t[16], C)

	C, t[16] = madd2(m, 2591688354582635309, t[17], C)

	C, t[17] = madd2(m, 9424246382384949970, t[18], C)

	C, t[18] = madd3(m, 7799987811488357407, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)

	if t[20] != 0 {
		// we need to reduce, we have a result on 21 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(t[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(t[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(t[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(t[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(t[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(t[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(t[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(t[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(t[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(t[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(t[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(t[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(t[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(t[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(t[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(t[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(t[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(t[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(t[19], 7799987811488357407, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7799987811488357407 || (z[19] == 7799987811488357407 && (z[18] < 9424246382384949970 || (z[18] == 9424246382384949970 && (z[17] < 2591688354582635309 || (z[17] == 2591688354582635309 && (z[16] < 18003906665788434115 || (z[16] == 18003906665788434115 && (z[15] < 17232950302204688315 || (z[15] == 17232950302204688315 && (z[14] < 17665048806674573847 || (z[14] == 17665048806674573847 && (z[13] < 15644807203000242066 || (z[13] == 15644807203000242066 && (z[12] < 12632943377804295268 || (z[12] == 12632943377804295268 && (z[11] < 4082714890900575087 || (z[11] == 4082714890900575087 && (z[10] < 7301606775117575571 || (z[10] == 7301606775117575571 && (z[9] < 11749997292425923848 || (z[9] == 11749997292425923848 && (z[8] < 5112259087628106383 || (z[8] == 5112259087628106383 && (z[7] < 15995486770149793624 || (z[7] == 15995486770149793624 && (z[6] < 6374557084676251824 || (z[6] == 6374557084676251824 && (z[5] < 7471655602285219898 || (z[5] == 7471655602285219898 && (z[4] < 2713343787931573914 || (z[4] == 2713343787931573914 && (z[3] < 11447591448407216965 || (z[3] == 11447591448407216965 && (z[2] < 2292005389331193172 || (z[2] == 2292005389331193172 && (z[1] < 7734635809920459264 || (z[1] == 7734635809920459264 && (z[0] < 17703379845099146005))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17703379845099146005, 0)
		z[1], b = bits.Sub64(z[1], 7734635809920459264, b)
		z[2], b = bits.Sub64(z[2], 2292005389331193172, b)
		z[3], b = bits.Sub64(z[3], 11447591448407216965, b)
		z[4], b = bits.Sub64(z[4], 2713343787931573914, b)
		z[5], b = bits.Sub64(z[5], 7471655602285219898, b)
		z[6], b = bits.Sub64(z[6], 6374557084676251824, b)
		z[7], b = bits.Sub64(z[7], 15995486770149793624, b)
		z[8], b = bits.Sub64(z[8], 5112259087628106383, b)
		z[9], b = bits.Sub64(z[9], 11749997292425923848, b)
		z[10], b = bits.Sub64(z[10], 7301606775117575571, b)
		z[11], b = bits.Sub64(z[11], 4082714890900575087, b)
		z[12], b = bits.Sub64(z[12], 12632943377804295268, b)
		z[13], b = bits.Sub64(z[13], 15644807203000242066, b)
		z[14], b = bits.Sub64(z[14], 17665048806674573847, b)
		z[15], b = bits.Sub64(z[15], 17232950302204688315, b)
		z[16], b = bits.Sub64(z[16], 18003906665788434115, b)
		z[17], b = bits.Sub64(z[17], 2591688354582635309, b)
		z[18], b = bits.Sub64(z[18], 9424246382384949970, b)
		z[19], _ = bits.Sub64(z[19], 7799987811488357407, b)
	}
	return z
}

func (z *Element20) Legendre() int {
	var l Element20
	// z^((q-1)/2)
	l.Exp(*z,
		8851689922549573002,
		3867317904960229632,
		10369374731520372394,
		5723795724203608482,
		1356671893965786957,
		3735827801142609949,
		3187278542338125912,
		17221115421929672620,
		2556129543814053191,
		15098370683067737732,
		12874175424413563593,
		2041357445450287543,
		6316471688902147634,
		17045775638354896841,
		18055896440192062731,
		17839847187957119965,
		18225325369748992865,
		1295844177291317654,
		13935495228047250793,
		3899993905744178703,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[19] == 2846768450732836800) && (l[18] == 18044995382649203291) && (l[17] == 13263367364544280996) && (l[16] == 885674815842235000) && (l[15] == 2427587543009726600) && (l[14] == 1563390534069955536) && (l[13] == 5603873741418619098) && (l[12] == 11627601391810512695) && (l[11] == 10281314291908401441) && (l[10] == 3843530523474400472) && (l[9] == 13393493562567255535) && (l[8] == 8222225898453338848) && (l[7] == 4902514607119515983) && (l[6] == 5697629904357047967) && (l[5] == 3503432869139111819) && (l[4] == 13020056497846403786) && (l[3] == 13998305250604669301) && (l[2] == 13862733295047165271) && (l[1] == 2977472453868633086) && (l[0] == 1486728457220811222) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element20) Sqrt(x *Element20) *Element20 {
	// q ≡ 5 (mod 8)
	// see modSqrt5Mod8Prime in math/big/int.go
	var one, alpha, beta, tx, square Element20
	one.SetOne()
	tx.Double(x)
	alpha.Exp(tx,
		2212922480637393250,
		10190201513094833216,
		11815715719734868906,
		6042634949478290024,
		4950853991918834643,
		933956950285652487,
		796819635584531478,
		18140336910764581867,
		639032385953513297,
		8386278689194322337,
		17053601911385554610,
		9733711398217347693,
		6190803940652924812,
		18096501964870887922,
		9125660128475403586,
		9071647815416667895,
		13779703379292024024,
		4935647062750217317,
		17318931862293976410,
		974998476436044675,
	)
	beta.Square(&alpha).
		MulAssign(&tx).
		SubAssign(&one).
		MulAssign(x).
		MulAssign(&alpha)

	square.Square(&beta)
	if square.Equal(x) {
		return z.Set(&beta)
	} else {
		return nil
	}
}

// Square z = x * x mod q
func (z *Element20) Square(x *Element20) *Element20 {
	return z.Mul(x, x)
}
