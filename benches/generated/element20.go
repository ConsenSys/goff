// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 8217571481266912791593936664359767988185441460905915612779562556781423502143937038011878559577078851377120253844525558190918640931563305918926582108628483957819511751911948681099828254351338554436504138982962891350294802448692148573941126371966603751667852944971880575763891903051869812535053151488020537914893479164716669929779712428999021614097942157886573314213657827622005080993013
// Code generated by goff DO NOT EDIT
// Element20 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element20 represents a field element stored on 20 words (uint64)
// Element20 are assumed to be in Montgomery form in all methods
type Element20 [20]uint64

// Element20Limbs number of 64 bits words needed to represent Element20
const Element20Limbs = 20

// Element20Bits number bits needed to represent Element20
const Element20Bits = 1279

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element20) SetUint64(v uint64) *Element20 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element20) Set(x *Element20) *Element20 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	z[16] = x[16]
	z[17] = x[17]
	z[18] = x[18]
	z[19] = x[19]
	return z
}

// SetZero z = 0
func (z *Element20) SetZero() *Element20 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	z[16] = 0
	z[17] = 0
	z[18] = 0
	z[19] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element20) SetOne() *Element20 {
	z[0] = 3858767829904631318
	z[1] = 3291803019242664211
	z[2] = 15171289958872291841
	z[3] = 9881107510491647765
	z[4] = 11495357623827743251
	z[5] = 1765363271537235161
	z[6] = 7974291971628166786
	z[7] = 10263937446038068649
	z[8] = 2281305986730991985
	z[9] = 13424458170636396091
	z[10] = 13615357894951650469
	z[11] = 12388380764352299312
	z[12] = 2044226666295577856
	z[13] = 17416438813314572436
	z[14] = 14898848654709963048
	z[15] = 6520130901059695508
	z[16] = 11962843398981194456
	z[17] = 2476687003650046867
	z[18] = 10825999555572288422
	z[19] = 3882137465294483963
	return z
}

// Neg z = q - x
func (z *Element20) Neg(x *Element20) *Element20 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(7293988121902460149, x[0], 0)
	z[1], borrow = bits.Sub64(7577470527233443702, x[1], borrow)
	z[2], borrow = bits.Sub64(1637727057418629887, x[2], borrow)
	z[3], borrow = bits.Sub64(4282818281608951925, x[3], borrow)
	z[4], borrow = bits.Sub64(3475693224940904182, x[4], borrow)
	z[5], borrow = bits.Sub64(17564062437940934035, x[5], borrow)
	z[6], borrow = bits.Sub64(5236226051040692414, x[6], borrow)
	z[7], borrow = bits.Sub64(4091403313835741483, x[7], borrow)
	z[8], borrow = bits.Sub64(8082719043489279815, x[8], borrow)
	z[9], borrow = bits.Sub64(2511142951536577762, x[9], borrow)
	z[10], borrow = bits.Sub64(11639065126233726381, x[10], borrow)
	z[11], borrow = bits.Sub64(12252553691533401959, x[11], borrow)
	z[12], borrow = bits.Sub64(17424630740561762687, x[12], borrow)
	z[13], borrow = bits.Sub64(9738524667052265397, x[13], borrow)
	z[14], borrow = bits.Sub64(10997319746354570091, x[14], borrow)
	z[15], borrow = bits.Sub64(15186678623179703861, x[15], borrow)
	z[16], borrow = bits.Sub64(3241950337364178579, x[16], borrow)
	z[17], borrow = bits.Sub64(17208400571884528182, x[17], borrow)
	z[18], borrow = bits.Sub64(3810372259068631596, x[18], borrow)
	z[19], _ = bits.Sub64(7282303304207533826, x[19], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element20) Div(x, y *Element20) *Element20 {
	var yInv Element20
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element20) Equal(x *Element20) bool {
	return (z[19] == x[19]) && (z[18] == x[18]) && (z[17] == x[17]) && (z[16] == x[16]) && (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element20) IsZero() bool {
	return (z[19] | z[18] | z[17] | z[16] | z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element20ModulusBigInt big.Int
var onceelement20Modulus sync.Once

func element20ModulusBigInt() *big.Int {
	onceelement20Modulus.Do(func() {
		_element20ModulusBigInt.SetString("8217571481266912791593936664359767988185441460905915612779562556781423502143937038011878559577078851377120253844525558190918640931563305918926582108628483957819511751911948681099828254351338554436504138982962891350294802448692148573941126371966603751667852944971880575763891903051869812535053151488020537914893479164716669929779712428999021614097942157886573314213657827622005080993013", 10)
	})
	return &_element20ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element20) Inverse(x *Element20) *Element20 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element20ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element20) SetRandom() *Element20 {
	bytes := make([]byte, 160)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[16] = binary.BigEndian.Uint64(bytes[128:136])
	z[17] = binary.BigEndian.Uint64(bytes[136:144])
	z[18] = binary.BigEndian.Uint64(bytes[144:152])
	z[19] = binary.BigEndian.Uint64(bytes[152:160])
	z[19] %= 7282303304207533826

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element20) Add(x, y *Element20) *Element20 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	z[16], carry = bits.Add64(x[16], y[16], carry)
	z[17], carry = bits.Add64(x[17], y[17], carry)
	z[18], carry = bits.Add64(x[18], y[18], carry)
	z[19], carry = bits.Add64(x[19], y[19], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], carry = bits.Sub64(z[1], 7577470527233443702, carry)
		z[2], carry = bits.Sub64(z[2], 1637727057418629887, carry)
		z[3], carry = bits.Sub64(z[3], 4282818281608951925, carry)
		z[4], carry = bits.Sub64(z[4], 3475693224940904182, carry)
		z[5], carry = bits.Sub64(z[5], 17564062437940934035, carry)
		z[6], carry = bits.Sub64(z[6], 5236226051040692414, carry)
		z[7], carry = bits.Sub64(z[7], 4091403313835741483, carry)
		z[8], carry = bits.Sub64(z[8], 8082719043489279815, carry)
		z[9], carry = bits.Sub64(z[9], 2511142951536577762, carry)
		z[10], carry = bits.Sub64(z[10], 11639065126233726381, carry)
		z[11], carry = bits.Sub64(z[11], 12252553691533401959, carry)
		z[12], carry = bits.Sub64(z[12], 17424630740561762687, carry)
		z[13], carry = bits.Sub64(z[13], 9738524667052265397, carry)
		z[14], carry = bits.Sub64(z[14], 10997319746354570091, carry)
		z[15], carry = bits.Sub64(z[15], 15186678623179703861, carry)
		z[16], carry = bits.Sub64(z[16], 3241950337364178579, carry)
		z[17], carry = bits.Sub64(z[17], 17208400571884528182, carry)
		z[18], carry = bits.Sub64(z[18], 3810372259068631596, carry)
		z[19], carry = bits.Sub64(z[19], 7282303304207533826, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element20) AddAssign(x *Element20) *Element20 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	z[16], carry = bits.Add64(z[16], x[16], carry)
	z[17], carry = bits.Add64(z[17], x[17], carry)
	z[18], carry = bits.Add64(z[18], x[18], carry)
	z[19], carry = bits.Add64(z[19], x[19], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], carry = bits.Sub64(z[1], 7577470527233443702, carry)
		z[2], carry = bits.Sub64(z[2], 1637727057418629887, carry)
		z[3], carry = bits.Sub64(z[3], 4282818281608951925, carry)
		z[4], carry = bits.Sub64(z[4], 3475693224940904182, carry)
		z[5], carry = bits.Sub64(z[5], 17564062437940934035, carry)
		z[6], carry = bits.Sub64(z[6], 5236226051040692414, carry)
		z[7], carry = bits.Sub64(z[7], 4091403313835741483, carry)
		z[8], carry = bits.Sub64(z[8], 8082719043489279815, carry)
		z[9], carry = bits.Sub64(z[9], 2511142951536577762, carry)
		z[10], carry = bits.Sub64(z[10], 11639065126233726381, carry)
		z[11], carry = bits.Sub64(z[11], 12252553691533401959, carry)
		z[12], carry = bits.Sub64(z[12], 17424630740561762687, carry)
		z[13], carry = bits.Sub64(z[13], 9738524667052265397, carry)
		z[14], carry = bits.Sub64(z[14], 10997319746354570091, carry)
		z[15], carry = bits.Sub64(z[15], 15186678623179703861, carry)
		z[16], carry = bits.Sub64(z[16], 3241950337364178579, carry)
		z[17], carry = bits.Sub64(z[17], 17208400571884528182, carry)
		z[18], carry = bits.Sub64(z[18], 3810372259068631596, carry)
		z[19], carry = bits.Sub64(z[19], 7282303304207533826, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element20) Double(x *Element20) *Element20 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	z[16], carry = bits.Add64(x[16], x[16], carry)
	z[17], carry = bits.Add64(x[17], x[17], carry)
	z[18], carry = bits.Add64(x[18], x[18], carry)
	z[19], carry = bits.Add64(x[19], x[19], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], carry = bits.Sub64(z[1], 7577470527233443702, carry)
		z[2], carry = bits.Sub64(z[2], 1637727057418629887, carry)
		z[3], carry = bits.Sub64(z[3], 4282818281608951925, carry)
		z[4], carry = bits.Sub64(z[4], 3475693224940904182, carry)
		z[5], carry = bits.Sub64(z[5], 17564062437940934035, carry)
		z[6], carry = bits.Sub64(z[6], 5236226051040692414, carry)
		z[7], carry = bits.Sub64(z[7], 4091403313835741483, carry)
		z[8], carry = bits.Sub64(z[8], 8082719043489279815, carry)
		z[9], carry = bits.Sub64(z[9], 2511142951536577762, carry)
		z[10], carry = bits.Sub64(z[10], 11639065126233726381, carry)
		z[11], carry = bits.Sub64(z[11], 12252553691533401959, carry)
		z[12], carry = bits.Sub64(z[12], 17424630740561762687, carry)
		z[13], carry = bits.Sub64(z[13], 9738524667052265397, carry)
		z[14], carry = bits.Sub64(z[14], 10997319746354570091, carry)
		z[15], carry = bits.Sub64(z[15], 15186678623179703861, carry)
		z[16], carry = bits.Sub64(z[16], 3241950337364178579, carry)
		z[17], carry = bits.Sub64(z[17], 17208400571884528182, carry)
		z[18], carry = bits.Sub64(z[18], 3810372259068631596, carry)
		z[19], carry = bits.Sub64(z[19], 7282303304207533826, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element20) Sub(x, y *Element20) *Element20 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	z[16], b = bits.Sub64(x[16], y[16], b)
	z[17], b = bits.Sub64(x[17], y[17], b)
	z[18], b = bits.Sub64(x[18], y[18], b)
	z[19], b = bits.Sub64(x[19], y[19], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7293988121902460149, 0)
		z[1], c = bits.Add64(z[1], 7577470527233443702, c)
		z[2], c = bits.Add64(z[2], 1637727057418629887, c)
		z[3], c = bits.Add64(z[3], 4282818281608951925, c)
		z[4], c = bits.Add64(z[4], 3475693224940904182, c)
		z[5], c = bits.Add64(z[5], 17564062437940934035, c)
		z[6], c = bits.Add64(z[6], 5236226051040692414, c)
		z[7], c = bits.Add64(z[7], 4091403313835741483, c)
		z[8], c = bits.Add64(z[8], 8082719043489279815, c)
		z[9], c = bits.Add64(z[9], 2511142951536577762, c)
		z[10], c = bits.Add64(z[10], 11639065126233726381, c)
		z[11], c = bits.Add64(z[11], 12252553691533401959, c)
		z[12], c = bits.Add64(z[12], 17424630740561762687, c)
		z[13], c = bits.Add64(z[13], 9738524667052265397, c)
		z[14], c = bits.Add64(z[14], 10997319746354570091, c)
		z[15], c = bits.Add64(z[15], 15186678623179703861, c)
		z[16], c = bits.Add64(z[16], 3241950337364178579, c)
		z[17], c = bits.Add64(z[17], 17208400571884528182, c)
		z[18], c = bits.Add64(z[18], 3810372259068631596, c)
		z[19], _ = bits.Add64(z[19], 7282303304207533826, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element20) SubAssign(x *Element20) *Element20 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	z[16], b = bits.Sub64(z[16], x[16], b)
	z[17], b = bits.Sub64(z[17], x[17], b)
	z[18], b = bits.Sub64(z[18], x[18], b)
	z[19], b = bits.Sub64(z[19], x[19], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7293988121902460149, 0)
		z[1], c = bits.Add64(z[1], 7577470527233443702, c)
		z[2], c = bits.Add64(z[2], 1637727057418629887, c)
		z[3], c = bits.Add64(z[3], 4282818281608951925, c)
		z[4], c = bits.Add64(z[4], 3475693224940904182, c)
		z[5], c = bits.Add64(z[5], 17564062437940934035, c)
		z[6], c = bits.Add64(z[6], 5236226051040692414, c)
		z[7], c = bits.Add64(z[7], 4091403313835741483, c)
		z[8], c = bits.Add64(z[8], 8082719043489279815, c)
		z[9], c = bits.Add64(z[9], 2511142951536577762, c)
		z[10], c = bits.Add64(z[10], 11639065126233726381, c)
		z[11], c = bits.Add64(z[11], 12252553691533401959, c)
		z[12], c = bits.Add64(z[12], 17424630740561762687, c)
		z[13], c = bits.Add64(z[13], 9738524667052265397, c)
		z[14], c = bits.Add64(z[14], 10997319746354570091, c)
		z[15], c = bits.Add64(z[15], 15186678623179703861, c)
		z[16], c = bits.Add64(z[16], 3241950337364178579, c)
		z[17], c = bits.Add64(z[17], 17208400571884528182, c)
		z[18], c = bits.Add64(z[18], 3810372259068631596, c)
		z[19], _ = bits.Add64(z[19], 7282303304207533826, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element20) Exp(x Element20, exponent ...uint64) *Element20 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element20) FromMont() *Element20 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 16772543062109053091
		C := madd0(m, 7293988121902460149, z[0])
		C, z[0] = madd2(m, 7577470527233443702, z[1], C)
		C, z[1] = madd2(m, 1637727057418629887, z[2], C)
		C, z[2] = madd2(m, 4282818281608951925, z[3], C)
		C, z[3] = madd2(m, 3475693224940904182, z[4], C)
		C, z[4] = madd2(m, 17564062437940934035, z[5], C)
		C, z[5] = madd2(m, 5236226051040692414, z[6], C)
		C, z[6] = madd2(m, 4091403313835741483, z[7], C)
		C, z[7] = madd2(m, 8082719043489279815, z[8], C)
		C, z[8] = madd2(m, 2511142951536577762, z[9], C)
		C, z[9] = madd2(m, 11639065126233726381, z[10], C)
		C, z[10] = madd2(m, 12252553691533401959, z[11], C)
		C, z[11] = madd2(m, 17424630740561762687, z[12], C)
		C, z[12] = madd2(m, 9738524667052265397, z[13], C)
		C, z[13] = madd2(m, 10997319746354570091, z[14], C)
		C, z[14] = madd2(m, 15186678623179703861, z[15], C)
		C, z[15] = madd2(m, 3241950337364178579, z[16], C)
		C, z[16] = madd2(m, 17208400571884528182, z[17], C)
		C, z[17] = madd2(m, 3810372259068631596, z[18], C)
		C, z[18] = madd2(m, 7282303304207533826, z[19], C)
		z[19] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element20) ToMont() *Element20 {
	var rSquare = Element20{
		16537721066086900548,
		1229010608416854735,
		17161243819287149556,
		9509282084454040446,
		11402643528402225364,
		10166469480557586946,
		11367925508817637882,
		15968301029629476591,
		6308524562341230089,
		3861223370086902912,
		7668467566640118466,
		6962099035291378470,
		16883512536673081415,
		6221599533171078690,
		3061918613932714007,
		12530259393605815789,
		267562509139091729,
		17449049654691835429,
		552228572493461808,
		198882200757021110,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element20) ToRegular() Element20 {
	return *z.FromMont()
}

// String returns the string form of an Element20 in Montgomery form
func (z *Element20) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element20) ToBigInt(res *big.Int) *big.Int {
	bits := (*[20]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element20) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[20]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element20) SetBigInt(v *big.Int) *Element20 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element20ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element20) SetString(s string) *Element20 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element20.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element20) Mul(x, y *Element20) *Element20 {

	var t [21]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)
	C, t[16] = madd1(y[0], x[16], C)
	C, t[17] = madd1(y[0], x[17], C)
	C, t[18] = madd1(y[0], x[18], C)
	C, t[19] = madd1(y[0], x[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)
	C, t[16] = madd2(y[1], x[16], t[16], C)
	C, t[17] = madd2(y[1], x[17], t[17], C)
	C, t[18] = madd2(y[1], x[18], t[18], C)
	C, t[19] = madd2(y[1], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)
	C, t[16] = madd2(y[2], x[16], t[16], C)
	C, t[17] = madd2(y[2], x[17], t[17], C)
	C, t[18] = madd2(y[2], x[18], t[18], C)
	C, t[19] = madd2(y[2], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)
	C, t[16] = madd2(y[3], x[16], t[16], C)
	C, t[17] = madd2(y[3], x[17], t[17], C)
	C, t[18] = madd2(y[3], x[18], t[18], C)
	C, t[19] = madd2(y[3], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)
	C, t[16] = madd2(y[4], x[16], t[16], C)
	C, t[17] = madd2(y[4], x[17], t[17], C)
	C, t[18] = madd2(y[4], x[18], t[18], C)
	C, t[19] = madd2(y[4], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)
	C, t[16] = madd2(y[5], x[16], t[16], C)
	C, t[17] = madd2(y[5], x[17], t[17], C)
	C, t[18] = madd2(y[5], x[18], t[18], C)
	C, t[19] = madd2(y[5], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)
	C, t[16] = madd2(y[6], x[16], t[16], C)
	C, t[17] = madd2(y[6], x[17], t[17], C)
	C, t[18] = madd2(y[6], x[18], t[18], C)
	C, t[19] = madd2(y[6], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)
	C, t[16] = madd2(y[7], x[16], t[16], C)
	C, t[17] = madd2(y[7], x[17], t[17], C)
	C, t[18] = madd2(y[7], x[18], t[18], C)
	C, t[19] = madd2(y[7], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)
	C, t[16] = madd2(y[8], x[16], t[16], C)
	C, t[17] = madd2(y[8], x[17], t[17], C)
	C, t[18] = madd2(y[8], x[18], t[18], C)
	C, t[19] = madd2(y[8], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)
	C, t[16] = madd2(y[9], x[16], t[16], C)
	C, t[17] = madd2(y[9], x[17], t[17], C)
	C, t[18] = madd2(y[9], x[18], t[18], C)
	C, t[19] = madd2(y[9], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)
	C, t[16] = madd2(y[10], x[16], t[16], C)
	C, t[17] = madd2(y[10], x[17], t[17], C)
	C, t[18] = madd2(y[10], x[18], t[18], C)
	C, t[19] = madd2(y[10], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)
	C, t[16] = madd2(y[11], x[16], t[16], C)
	C, t[17] = madd2(y[11], x[17], t[17], C)
	C, t[18] = madd2(y[11], x[18], t[18], C)
	C, t[19] = madd2(y[11], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)
	C, t[16] = madd2(y[12], x[16], t[16], C)
	C, t[17] = madd2(y[12], x[17], t[17], C)
	C, t[18] = madd2(y[12], x[18], t[18], C)
	C, t[19] = madd2(y[12], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)
	C, t[16] = madd2(y[13], x[16], t[16], C)
	C, t[17] = madd2(y[13], x[17], t[17], C)
	C, t[18] = madd2(y[13], x[18], t[18], C)
	C, t[19] = madd2(y[13], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)
	C, t[16] = madd2(y[14], x[16], t[16], C)
	C, t[17] = madd2(y[14], x[17], t[17], C)
	C, t[18] = madd2(y[14], x[18], t[18], C)
	C, t[19] = madd2(y[14], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)
	C, t[16] = madd2(y[15], x[16], t[16], C)
	C, t[17] = madd2(y[15], x[17], t[17], C)
	C, t[18] = madd2(y[15], x[18], t[18], C)
	C, t[19] = madd2(y[15], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[16], x[0], t[0])
	C, t[1] = madd2(y[16], x[1], t[1], C)
	C, t[2] = madd2(y[16], x[2], t[2], C)
	C, t[3] = madd2(y[16], x[3], t[3], C)
	C, t[4] = madd2(y[16], x[4], t[4], C)
	C, t[5] = madd2(y[16], x[5], t[5], C)
	C, t[6] = madd2(y[16], x[6], t[6], C)
	C, t[7] = madd2(y[16], x[7], t[7], C)
	C, t[8] = madd2(y[16], x[8], t[8], C)
	C, t[9] = madd2(y[16], x[9], t[9], C)
	C, t[10] = madd2(y[16], x[10], t[10], C)
	C, t[11] = madd2(y[16], x[11], t[11], C)
	C, t[12] = madd2(y[16], x[12], t[12], C)
	C, t[13] = madd2(y[16], x[13], t[13], C)
	C, t[14] = madd2(y[16], x[14], t[14], C)
	C, t[15] = madd2(y[16], x[15], t[15], C)
	C, t[16] = madd2(y[16], x[16], t[16], C)
	C, t[17] = madd2(y[16], x[17], t[17], C)
	C, t[18] = madd2(y[16], x[18], t[18], C)
	C, t[19] = madd2(y[16], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[17], x[0], t[0])
	C, t[1] = madd2(y[17], x[1], t[1], C)
	C, t[2] = madd2(y[17], x[2], t[2], C)
	C, t[3] = madd2(y[17], x[3], t[3], C)
	C, t[4] = madd2(y[17], x[4], t[4], C)
	C, t[5] = madd2(y[17], x[5], t[5], C)
	C, t[6] = madd2(y[17], x[6], t[6], C)
	C, t[7] = madd2(y[17], x[7], t[7], C)
	C, t[8] = madd2(y[17], x[8], t[8], C)
	C, t[9] = madd2(y[17], x[9], t[9], C)
	C, t[10] = madd2(y[17], x[10], t[10], C)
	C, t[11] = madd2(y[17], x[11], t[11], C)
	C, t[12] = madd2(y[17], x[12], t[12], C)
	C, t[13] = madd2(y[17], x[13], t[13], C)
	C, t[14] = madd2(y[17], x[14], t[14], C)
	C, t[15] = madd2(y[17], x[15], t[15], C)
	C, t[16] = madd2(y[17], x[16], t[16], C)
	C, t[17] = madd2(y[17], x[17], t[17], C)
	C, t[18] = madd2(y[17], x[18], t[18], C)
	C, t[19] = madd2(y[17], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[18], x[0], t[0])
	C, t[1] = madd2(y[18], x[1], t[1], C)
	C, t[2] = madd2(y[18], x[2], t[2], C)
	C, t[3] = madd2(y[18], x[3], t[3], C)
	C, t[4] = madd2(y[18], x[4], t[4], C)
	C, t[5] = madd2(y[18], x[5], t[5], C)
	C, t[6] = madd2(y[18], x[6], t[6], C)
	C, t[7] = madd2(y[18], x[7], t[7], C)
	C, t[8] = madd2(y[18], x[8], t[8], C)
	C, t[9] = madd2(y[18], x[9], t[9], C)
	C, t[10] = madd2(y[18], x[10], t[10], C)
	C, t[11] = madd2(y[18], x[11], t[11], C)
	C, t[12] = madd2(y[18], x[12], t[12], C)
	C, t[13] = madd2(y[18], x[13], t[13], C)
	C, t[14] = madd2(y[18], x[14], t[14], C)
	C, t[15] = madd2(y[18], x[15], t[15], C)
	C, t[16] = madd2(y[18], x[16], t[16], C)
	C, t[17] = madd2(y[18], x[17], t[17], C)
	C, t[18] = madd2(y[18], x[18], t[18], C)
	C, t[19] = madd2(y[18], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[19], x[0], t[0])
	C, t[1] = madd2(y[19], x[1], t[1], C)
	C, t[2] = madd2(y[19], x[2], t[2], C)
	C, t[3] = madd2(y[19], x[3], t[3], C)
	C, t[4] = madd2(y[19], x[4], t[4], C)
	C, t[5] = madd2(y[19], x[5], t[5], C)
	C, t[6] = madd2(y[19], x[6], t[6], C)
	C, t[7] = madd2(y[19], x[7], t[7], C)
	C, t[8] = madd2(y[19], x[8], t[8], C)
	C, t[9] = madd2(y[19], x[9], t[9], C)
	C, t[10] = madd2(y[19], x[10], t[10], C)
	C, t[11] = madd2(y[19], x[11], t[11], C)
	C, t[12] = madd2(y[19], x[12], t[12], C)
	C, t[13] = madd2(y[19], x[13], t[13], C)
	C, t[14] = madd2(y[19], x[14], t[14], C)
	C, t[15] = madd2(y[19], x[15], t[15], C)
	C, t[16] = madd2(y[19], x[16], t[16], C)
	C, t[17] = madd2(y[19], x[17], t[17], C)
	C, t[18] = madd2(y[19], x[18], t[18], C)
	C, t[19] = madd2(y[19], x[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)

	if t[20] != 0 {
		// we need to reduce, we have a result on 21 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(t[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(t[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(t[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(t[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(t[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(t[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(t[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(t[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(t[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(t[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(t[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(t[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(t[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(t[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(t[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(t[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(t[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(t[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(t[19], 7282303304207533826, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}
	return z
}

// MulAssign z = z * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element20) MulAssign(x *Element20) *Element20 {

	var t [21]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)
	C, t[16] = madd1(x[0], z[16], C)
	C, t[17] = madd1(x[0], z[17], C)
	C, t[18] = madd1(x[0], z[18], C)
	C, t[19] = madd1(x[0], z[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)
	C, t[16] = madd2(x[1], z[16], t[16], C)
	C, t[17] = madd2(x[1], z[17], t[17], C)
	C, t[18] = madd2(x[1], z[18], t[18], C)
	C, t[19] = madd2(x[1], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)
	C, t[16] = madd2(x[2], z[16], t[16], C)
	C, t[17] = madd2(x[2], z[17], t[17], C)
	C, t[18] = madd2(x[2], z[18], t[18], C)
	C, t[19] = madd2(x[2], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)
	C, t[16] = madd2(x[3], z[16], t[16], C)
	C, t[17] = madd2(x[3], z[17], t[17], C)
	C, t[18] = madd2(x[3], z[18], t[18], C)
	C, t[19] = madd2(x[3], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)
	C, t[16] = madd2(x[4], z[16], t[16], C)
	C, t[17] = madd2(x[4], z[17], t[17], C)
	C, t[18] = madd2(x[4], z[18], t[18], C)
	C, t[19] = madd2(x[4], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)
	C, t[16] = madd2(x[5], z[16], t[16], C)
	C, t[17] = madd2(x[5], z[17], t[17], C)
	C, t[18] = madd2(x[5], z[18], t[18], C)
	C, t[19] = madd2(x[5], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)
	C, t[16] = madd2(x[6], z[16], t[16], C)
	C, t[17] = madd2(x[6], z[17], t[17], C)
	C, t[18] = madd2(x[6], z[18], t[18], C)
	C, t[19] = madd2(x[6], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)
	C, t[16] = madd2(x[7], z[16], t[16], C)
	C, t[17] = madd2(x[7], z[17], t[17], C)
	C, t[18] = madd2(x[7], z[18], t[18], C)
	C, t[19] = madd2(x[7], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)
	C, t[16] = madd2(x[8], z[16], t[16], C)
	C, t[17] = madd2(x[8], z[17], t[17], C)
	C, t[18] = madd2(x[8], z[18], t[18], C)
	C, t[19] = madd2(x[8], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)
	C, t[16] = madd2(x[9], z[16], t[16], C)
	C, t[17] = madd2(x[9], z[17], t[17], C)
	C, t[18] = madd2(x[9], z[18], t[18], C)
	C, t[19] = madd2(x[9], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)
	C, t[16] = madd2(x[10], z[16], t[16], C)
	C, t[17] = madd2(x[10], z[17], t[17], C)
	C, t[18] = madd2(x[10], z[18], t[18], C)
	C, t[19] = madd2(x[10], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)
	C, t[16] = madd2(x[11], z[16], t[16], C)
	C, t[17] = madd2(x[11], z[17], t[17], C)
	C, t[18] = madd2(x[11], z[18], t[18], C)
	C, t[19] = madd2(x[11], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)
	C, t[16] = madd2(x[12], z[16], t[16], C)
	C, t[17] = madd2(x[12], z[17], t[17], C)
	C, t[18] = madd2(x[12], z[18], t[18], C)
	C, t[19] = madd2(x[12], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)
	C, t[16] = madd2(x[13], z[16], t[16], C)
	C, t[17] = madd2(x[13], z[17], t[17], C)
	C, t[18] = madd2(x[13], z[18], t[18], C)
	C, t[19] = madd2(x[13], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)
	C, t[16] = madd2(x[14], z[16], t[16], C)
	C, t[17] = madd2(x[14], z[17], t[17], C)
	C, t[18] = madd2(x[14], z[18], t[18], C)
	C, t[19] = madd2(x[14], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)
	C, t[16] = madd2(x[15], z[16], t[16], C)
	C, t[17] = madd2(x[15], z[17], t[17], C)
	C, t[18] = madd2(x[15], z[18], t[18], C)
	C, t[19] = madd2(x[15], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[16], z[0], t[0])
	C, t[1] = madd2(x[16], z[1], t[1], C)
	C, t[2] = madd2(x[16], z[2], t[2], C)
	C, t[3] = madd2(x[16], z[3], t[3], C)
	C, t[4] = madd2(x[16], z[4], t[4], C)
	C, t[5] = madd2(x[16], z[5], t[5], C)
	C, t[6] = madd2(x[16], z[6], t[6], C)
	C, t[7] = madd2(x[16], z[7], t[7], C)
	C, t[8] = madd2(x[16], z[8], t[8], C)
	C, t[9] = madd2(x[16], z[9], t[9], C)
	C, t[10] = madd2(x[16], z[10], t[10], C)
	C, t[11] = madd2(x[16], z[11], t[11], C)
	C, t[12] = madd2(x[16], z[12], t[12], C)
	C, t[13] = madd2(x[16], z[13], t[13], C)
	C, t[14] = madd2(x[16], z[14], t[14], C)
	C, t[15] = madd2(x[16], z[15], t[15], C)
	C, t[16] = madd2(x[16], z[16], t[16], C)
	C, t[17] = madd2(x[16], z[17], t[17], C)
	C, t[18] = madd2(x[16], z[18], t[18], C)
	C, t[19] = madd2(x[16], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[17], z[0], t[0])
	C, t[1] = madd2(x[17], z[1], t[1], C)
	C, t[2] = madd2(x[17], z[2], t[2], C)
	C, t[3] = madd2(x[17], z[3], t[3], C)
	C, t[4] = madd2(x[17], z[4], t[4], C)
	C, t[5] = madd2(x[17], z[5], t[5], C)
	C, t[6] = madd2(x[17], z[6], t[6], C)
	C, t[7] = madd2(x[17], z[7], t[7], C)
	C, t[8] = madd2(x[17], z[8], t[8], C)
	C, t[9] = madd2(x[17], z[9], t[9], C)
	C, t[10] = madd2(x[17], z[10], t[10], C)
	C, t[11] = madd2(x[17], z[11], t[11], C)
	C, t[12] = madd2(x[17], z[12], t[12], C)
	C, t[13] = madd2(x[17], z[13], t[13], C)
	C, t[14] = madd2(x[17], z[14], t[14], C)
	C, t[15] = madd2(x[17], z[15], t[15], C)
	C, t[16] = madd2(x[17], z[16], t[16], C)
	C, t[17] = madd2(x[17], z[17], t[17], C)
	C, t[18] = madd2(x[17], z[18], t[18], C)
	C, t[19] = madd2(x[17], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[18], z[0], t[0])
	C, t[1] = madd2(x[18], z[1], t[1], C)
	C, t[2] = madd2(x[18], z[2], t[2], C)
	C, t[3] = madd2(x[18], z[3], t[3], C)
	C, t[4] = madd2(x[18], z[4], t[4], C)
	C, t[5] = madd2(x[18], z[5], t[5], C)
	C, t[6] = madd2(x[18], z[6], t[6], C)
	C, t[7] = madd2(x[18], z[7], t[7], C)
	C, t[8] = madd2(x[18], z[8], t[8], C)
	C, t[9] = madd2(x[18], z[9], t[9], C)
	C, t[10] = madd2(x[18], z[10], t[10], C)
	C, t[11] = madd2(x[18], z[11], t[11], C)
	C, t[12] = madd2(x[18], z[12], t[12], C)
	C, t[13] = madd2(x[18], z[13], t[13], C)
	C, t[14] = madd2(x[18], z[14], t[14], C)
	C, t[15] = madd2(x[18], z[15], t[15], C)
	C, t[16] = madd2(x[18], z[16], t[16], C)
	C, t[17] = madd2(x[18], z[17], t[17], C)
	C, t[18] = madd2(x[18], z[18], t[18], C)
	C, t[19] = madd2(x[18], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[19], z[0], t[0])
	C, t[1] = madd2(x[19], z[1], t[1], C)
	C, t[2] = madd2(x[19], z[2], t[2], C)
	C, t[3] = madd2(x[19], z[3], t[3], C)
	C, t[4] = madd2(x[19], z[4], t[4], C)
	C, t[5] = madd2(x[19], z[5], t[5], C)
	C, t[6] = madd2(x[19], z[6], t[6], C)
	C, t[7] = madd2(x[19], z[7], t[7], C)
	C, t[8] = madd2(x[19], z[8], t[8], C)
	C, t[9] = madd2(x[19], z[9], t[9], C)
	C, t[10] = madd2(x[19], z[10], t[10], C)
	C, t[11] = madd2(x[19], z[11], t[11], C)
	C, t[12] = madd2(x[19], z[12], t[12], C)
	C, t[13] = madd2(x[19], z[13], t[13], C)
	C, t[14] = madd2(x[19], z[14], t[14], C)
	C, t[15] = madd2(x[19], z[15], t[15], C)
	C, t[16] = madd2(x[19], z[16], t[16], C)
	C, t[17] = madd2(x[19], z[17], t[17], C)
	C, t[18] = madd2(x[19], z[18], t[18], C)
	C, t[19] = madd2(x[19], z[19], t[19], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 16772543062109053091

	// -----------------------------------
	// Second loop
	C = madd0(m, 7293988121902460149, t[0])

	C, t[0] = madd2(m, 7577470527233443702, t[1], C)

	C, t[1] = madd2(m, 1637727057418629887, t[2], C)

	C, t[2] = madd2(m, 4282818281608951925, t[3], C)

	C, t[3] = madd2(m, 3475693224940904182, t[4], C)

	C, t[4] = madd2(m, 17564062437940934035, t[5], C)

	C, t[5] = madd2(m, 5236226051040692414, t[6], C)

	C, t[6] = madd2(m, 4091403313835741483, t[7], C)

	C, t[7] = madd2(m, 8082719043489279815, t[8], C)

	C, t[8] = madd2(m, 2511142951536577762, t[9], C)

	C, t[9] = madd2(m, 11639065126233726381, t[10], C)

	C, t[10] = madd2(m, 12252553691533401959, t[11], C)

	C, t[11] = madd2(m, 17424630740561762687, t[12], C)

	C, t[12] = madd2(m, 9738524667052265397, t[13], C)

	C, t[13] = madd2(m, 10997319746354570091, t[14], C)

	C, t[14] = madd2(m, 15186678623179703861, t[15], C)

	C, t[15] = madd2(m, 3241950337364178579, t[16], C)

	C, t[16] = madd2(m, 17208400571884528182, t[17], C)

	C, t[17] = madd2(m, 3810372259068631596, t[18], C)

	C, t[18] = madd3(m, 7282303304207533826, t[19], C, t[20])

	t[19], t[20] = bits.Add64(D, C, 0)

	if t[20] != 0 {
		// we need to reduce, we have a result on 21 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(t[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(t[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(t[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(t[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(t[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(t[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(t[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(t[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(t[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(t[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(t[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(t[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(t[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(t[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(t[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(t[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(t[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(t[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(t[19], 7282303304207533826, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]
	z[16] = t[16]
	z[17] = t[17]
	z[18] = t[18]
	z[19] = t[19]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[19] < 7282303304207533826 || (z[19] == 7282303304207533826 && (z[18] < 3810372259068631596 || (z[18] == 3810372259068631596 && (z[17] < 17208400571884528182 || (z[17] == 17208400571884528182 && (z[16] < 3241950337364178579 || (z[16] == 3241950337364178579 && (z[15] < 15186678623179703861 || (z[15] == 15186678623179703861 && (z[14] < 10997319746354570091 || (z[14] == 10997319746354570091 && (z[13] < 9738524667052265397 || (z[13] == 9738524667052265397 && (z[12] < 17424630740561762687 || (z[12] == 17424630740561762687 && (z[11] < 12252553691533401959 || (z[11] == 12252553691533401959 && (z[10] < 11639065126233726381 || (z[10] == 11639065126233726381 && (z[9] < 2511142951536577762 || (z[9] == 2511142951536577762 && (z[8] < 8082719043489279815 || (z[8] == 8082719043489279815 && (z[7] < 4091403313835741483 || (z[7] == 4091403313835741483 && (z[6] < 5236226051040692414 || (z[6] == 5236226051040692414 && (z[5] < 17564062437940934035 || (z[5] == 17564062437940934035 && (z[4] < 3475693224940904182 || (z[4] == 3475693224940904182 && (z[3] < 4282818281608951925 || (z[3] == 4282818281608951925 && (z[2] < 1637727057418629887 || (z[2] == 1637727057418629887 && (z[1] < 7577470527233443702 || (z[1] == 7577470527233443702 && (z[0] < 7293988121902460149))))))))))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7293988121902460149, 0)
		z[1], b = bits.Sub64(z[1], 7577470527233443702, b)
		z[2], b = bits.Sub64(z[2], 1637727057418629887, b)
		z[3], b = bits.Sub64(z[3], 4282818281608951925, b)
		z[4], b = bits.Sub64(z[4], 3475693224940904182, b)
		z[5], b = bits.Sub64(z[5], 17564062437940934035, b)
		z[6], b = bits.Sub64(z[6], 5236226051040692414, b)
		z[7], b = bits.Sub64(z[7], 4091403313835741483, b)
		z[8], b = bits.Sub64(z[8], 8082719043489279815, b)
		z[9], b = bits.Sub64(z[9], 2511142951536577762, b)
		z[10], b = bits.Sub64(z[10], 11639065126233726381, b)
		z[11], b = bits.Sub64(z[11], 12252553691533401959, b)
		z[12], b = bits.Sub64(z[12], 17424630740561762687, b)
		z[13], b = bits.Sub64(z[13], 9738524667052265397, b)
		z[14], b = bits.Sub64(z[14], 10997319746354570091, b)
		z[15], b = bits.Sub64(z[15], 15186678623179703861, b)
		z[16], b = bits.Sub64(z[16], 3241950337364178579, b)
		z[17], b = bits.Sub64(z[17], 17208400571884528182, b)
		z[18], b = bits.Sub64(z[18], 3810372259068631596, b)
		z[19], _ = bits.Sub64(z[19], 7282303304207533826, b)
	}
	return z
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element20) Legendre() int {
	var l Element20
	// z^((q-1)/2)
	l.Exp(*z,
		3646994060951230074,
		13012107300471497659,
		10042235565564090751,
		2141409140804475962,
		10961218649325227899,
		8782031218970467017,
		11841485062375122015,
		11269073693772646549,
		4041359521744639907,
		10478943512623064689,
		15042904599971638998,
		15349648882621476787,
		17935687407135657151,
		14092634370380908506,
		14722031910032060853,
		16816711348444627738,
		1620975168682089289,
		8604200285942264091,
		1905186129534315798,
		3641151652103766913,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[19] == 3882137465294483963) && (l[18] == 10825999555572288422) && (l[17] == 2476687003650046867) && (l[16] == 11962843398981194456) && (l[15] == 6520130901059695508) && (l[14] == 14898848654709963048) && (l[13] == 17416438813314572436) && (l[12] == 2044226666295577856) && (l[11] == 12388380764352299312) && (l[10] == 13615357894951650469) && (l[9] == 13424458170636396091) && (l[8] == 2281305986730991985) && (l[7] == 10263937446038068649) && (l[6] == 7974291971628166786) && (l[5] == 1765363271537235161) && (l[4] == 11495357623827743251) && (l[3] == 9881107510491647765) && (l[2] == 15171289958872291841) && (l[1] == 3291803019242664211) && (l[0] == 3858767829904631318) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element20) Sqrt(x *Element20) *Element20 {
	// q ≡ 5 (mod 8)
	// see modSqrt5Mod8Prime in math/big/int.go
	var one, alpha, beta, tx, square Element20
	one.SetOne()
	tx.Double(x)
	alpha.Exp(tx,
		14746806570519971230,
		17088084880400038126,
		11733930928245798495,
		14370410340483282702,
		7351990680758694878,
		16030565860024780466,
		7572057284021168407,
		16652326478725325349,
		5622025898863547880,
		11843107915010541980,
		17595784205275073461,
		17672470275937532908,
		13707293888638690095,
		8134844611022615030,
		12903880014362791021,
		8815863855538544838,
		14240301847452686034,
		11374422108340341830,
		5087982550810966853,
		910287913025941728,
	)
	beta.Square(&alpha).
		MulAssign(&tx).
		SubAssign(&one).
		MulAssign(x).
		MulAssign(&alpha)

	// as we didn't compute the legendre symbol, ensure we found beta such that beta * beta = x
	square.Square(&beta)
	if square.Equal(x) {
		return z.Set(&beta)
	}
	return nil
}

// Square z = x * x mod q
func (z *Element20) Square(x *Element20) *Element20 {
	return z.Mul(x, x)
}
