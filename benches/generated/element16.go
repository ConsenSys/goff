// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 78673390048624123720498553613052498686559613915058097624075444376283051147554225680622218546332565455471544757384988975622716424856446887065524247195810246179192510274337320593582535509774426291861511643496572991197353486793250102349532767932740079027046730917875901568964394478250752566062517723700500183879
// Code generated by goff DO NOT EDIT
// Element16 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"
	"unsafe"
)

// Element16 represents a field element stored on 16 words (uint64)
// Element16 are assumed to be in Montgomery form in all methods
type Element16 [16]uint64

// Element16Limbs number of 64 bits words needed to represent Element16
const Element16Limbs = 16

// Element16Bits number bits needed to represent Element16
const Element16Bits = 1023

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element16) SetUint64(v uint64) *Element16 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element16) Set(x *Element16) *Element16 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	return z
}

// SetZero z = 0
func (z *Element16) SetZero() *Element16 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element16) SetOne() *Element16 {
	z[0] = 5731084528715663730
	z[1] = 15198348345861800238
	z[2] = 2449967133708082815
	z[3] = 12497402664046779859
	z[4] = 13985868409953358684
	z[5] = 9703563694256598587
	z[6] = 1481823542272094114
	z[7] = 12782317945960193326
	z[8] = 18115360456159023711
	z[9] = 2019817211695648171
	z[10] = 17158667229790767803
	z[11] = 10741511853144229181
	z[12] = 8606029360284911195
	z[13] = 7740438045410636588
	z[14] = 6989186924149250879
	z[15] = 2300852836835593302
	return z
}

// Neg z = q - x
func (z *Element16) Neg(x *Element16) *Element16 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(15581201809351719751, x[0], 0)
	z[1], borrow = bits.Sub64(1624197863923875688, x[1], borrow)
	z[2], borrow = bits.Sub64(7998388470000734400, x[2], borrow)
	z[3], borrow = bits.Sub64(12198042741686161686, x[3], borrow)
	z[4], borrow = bits.Sub64(2230437831878096465, x[4], borrow)
	z[5], borrow = bits.Sub64(13594962226581252322, x[5], borrow)
	z[6], borrow = bits.Sub64(17705832302573504558, x[6], borrow)
	z[7], borrow = bits.Sub64(2832213063874679144, x[7], borrow)
	z[8], borrow = bits.Sub64(165691808775263952, x[8], borrow)
	z[9], borrow = bits.Sub64(8213463431006951722, x[9], borrow)
	z[10], borrow = bits.Sub64(644038421959391906, x[10], borrow)
	z[11], borrow = bits.Sub64(3852616110282661217, x[11], borrow)
	z[12], borrow = bits.Sub64(14143729393567096018, x[12], borrow)
	z[13], borrow = bits.Sub64(5353153014149457513, x[13], borrow)
	z[14], borrow = bits.Sub64(14952150611634926176, x[14], borrow)
	z[15], _ = bits.Sub64(8072945618436979156, x[15], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element16) Div(x, y *Element16) *Element16 {
	var yInv Element16
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element16) Equal(x *Element16) bool {
	return (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element16) IsZero() bool {
	return (z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element16ModulusBigInt big.Int
var onceelement16Modulus sync.Once

func element16ModulusBigInt() *big.Int {
	onceelement16Modulus.Do(func() {
		_element16ModulusBigInt.SetString("78673390048624123720498553613052498686559613915058097624075444376283051147554225680622218546332565455471544757384988975622716424856446887065524247195810246179192510274337320593582535509774426291861511643496572991197353486793250102349532767932740079027046730917875901568964394478250752566062517723700500183879", 10)
	})
	return &_element16ModulusBigInt
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element16) Inverse(x *Element16) *Element16 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, element16ModulusBigInt())
	z.SetBigInt(&_xNonMont)
	return z
}

// SetRandom sets z to a random element < q
func (z *Element16) SetRandom() *Element16 {
	bytes := make([]byte, 128)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[15] %= 8072945618436979156

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element16) Add(x, y *Element16) *Element16 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], carry = bits.Add64(x[11], y[11], carry)
	z[12], carry = bits.Add64(x[12], y[12], carry)
	z[13], carry = bits.Add64(x[13], y[13], carry)
	z[14], carry = bits.Add64(x[14], y[14], carry)
	z[15], carry = bits.Add64(x[15], y[15], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], carry = bits.Sub64(z[1], 1624197863923875688, carry)
		z[2], carry = bits.Sub64(z[2], 7998388470000734400, carry)
		z[3], carry = bits.Sub64(z[3], 12198042741686161686, carry)
		z[4], carry = bits.Sub64(z[4], 2230437831878096465, carry)
		z[5], carry = bits.Sub64(z[5], 13594962226581252322, carry)
		z[6], carry = bits.Sub64(z[6], 17705832302573504558, carry)
		z[7], carry = bits.Sub64(z[7], 2832213063874679144, carry)
		z[8], carry = bits.Sub64(z[8], 165691808775263952, carry)
		z[9], carry = bits.Sub64(z[9], 8213463431006951722, carry)
		z[10], carry = bits.Sub64(z[10], 644038421959391906, carry)
		z[11], carry = bits.Sub64(z[11], 3852616110282661217, carry)
		z[12], carry = bits.Sub64(z[12], 14143729393567096018, carry)
		z[13], carry = bits.Sub64(z[13], 5353153014149457513, carry)
		z[14], carry = bits.Sub64(z[14], 14952150611634926176, carry)
		z[15], carry = bits.Sub64(z[15], 8072945618436979156, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element16) AddAssign(x *Element16) *Element16 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], carry = bits.Add64(z[4], x[4], carry)
	z[5], carry = bits.Add64(z[5], x[5], carry)
	z[6], carry = bits.Add64(z[6], x[6], carry)
	z[7], carry = bits.Add64(z[7], x[7], carry)
	z[8], carry = bits.Add64(z[8], x[8], carry)
	z[9], carry = bits.Add64(z[9], x[9], carry)
	z[10], carry = bits.Add64(z[10], x[10], carry)
	z[11], carry = bits.Add64(z[11], x[11], carry)
	z[12], carry = bits.Add64(z[12], x[12], carry)
	z[13], carry = bits.Add64(z[13], x[13], carry)
	z[14], carry = bits.Add64(z[14], x[14], carry)
	z[15], carry = bits.Add64(z[15], x[15], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], carry = bits.Sub64(z[1], 1624197863923875688, carry)
		z[2], carry = bits.Sub64(z[2], 7998388470000734400, carry)
		z[3], carry = bits.Sub64(z[3], 12198042741686161686, carry)
		z[4], carry = bits.Sub64(z[4], 2230437831878096465, carry)
		z[5], carry = bits.Sub64(z[5], 13594962226581252322, carry)
		z[6], carry = bits.Sub64(z[6], 17705832302573504558, carry)
		z[7], carry = bits.Sub64(z[7], 2832213063874679144, carry)
		z[8], carry = bits.Sub64(z[8], 165691808775263952, carry)
		z[9], carry = bits.Sub64(z[9], 8213463431006951722, carry)
		z[10], carry = bits.Sub64(z[10], 644038421959391906, carry)
		z[11], carry = bits.Sub64(z[11], 3852616110282661217, carry)
		z[12], carry = bits.Sub64(z[12], 14143729393567096018, carry)
		z[13], carry = bits.Sub64(z[13], 5353153014149457513, carry)
		z[14], carry = bits.Sub64(z[14], 14952150611634926176, carry)
		z[15], carry = bits.Sub64(z[15], 8072945618436979156, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element16) Double(x *Element16) *Element16 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], carry = bits.Add64(x[11], x[11], carry)
	z[12], carry = bits.Add64(x[12], x[12], carry)
	z[13], carry = bits.Add64(x[13], x[13], carry)
	z[14], carry = bits.Add64(x[14], x[14], carry)
	z[15], carry = bits.Add64(x[15], x[15], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], carry = bits.Sub64(z[1], 1624197863923875688, carry)
		z[2], carry = bits.Sub64(z[2], 7998388470000734400, carry)
		z[3], carry = bits.Sub64(z[3], 12198042741686161686, carry)
		z[4], carry = bits.Sub64(z[4], 2230437831878096465, carry)
		z[5], carry = bits.Sub64(z[5], 13594962226581252322, carry)
		z[6], carry = bits.Sub64(z[6], 17705832302573504558, carry)
		z[7], carry = bits.Sub64(z[7], 2832213063874679144, carry)
		z[8], carry = bits.Sub64(z[8], 165691808775263952, carry)
		z[9], carry = bits.Sub64(z[9], 8213463431006951722, carry)
		z[10], carry = bits.Sub64(z[10], 644038421959391906, carry)
		z[11], carry = bits.Sub64(z[11], 3852616110282661217, carry)
		z[12], carry = bits.Sub64(z[12], 14143729393567096018, carry)
		z[13], carry = bits.Sub64(z[13], 5353153014149457513, carry)
		z[14], carry = bits.Sub64(z[14], 14952150611634926176, carry)
		z[15], carry = bits.Sub64(z[15], 8072945618436979156, carry)
		return z
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element16) Sub(x, y *Element16) *Element16 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	z[12], b = bits.Sub64(x[12], y[12], b)
	z[13], b = bits.Sub64(x[13], y[13], b)
	z[14], b = bits.Sub64(x[14], y[14], b)
	z[15], b = bits.Sub64(x[15], y[15], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 15581201809351719751, 0)
		z[1], c = bits.Add64(z[1], 1624197863923875688, c)
		z[2], c = bits.Add64(z[2], 7998388470000734400, c)
		z[3], c = bits.Add64(z[3], 12198042741686161686, c)
		z[4], c = bits.Add64(z[4], 2230437831878096465, c)
		z[5], c = bits.Add64(z[5], 13594962226581252322, c)
		z[6], c = bits.Add64(z[6], 17705832302573504558, c)
		z[7], c = bits.Add64(z[7], 2832213063874679144, c)
		z[8], c = bits.Add64(z[8], 165691808775263952, c)
		z[9], c = bits.Add64(z[9], 8213463431006951722, c)
		z[10], c = bits.Add64(z[10], 644038421959391906, c)
		z[11], c = bits.Add64(z[11], 3852616110282661217, c)
		z[12], c = bits.Add64(z[12], 14143729393567096018, c)
		z[13], c = bits.Add64(z[13], 5353153014149457513, c)
		z[14], c = bits.Add64(z[14], 14952150611634926176, c)
		z[15], _ = bits.Add64(z[15], 8072945618436979156, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element16) SubAssign(x *Element16) *Element16 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	z[5], b = bits.Sub64(z[5], x[5], b)
	z[6], b = bits.Sub64(z[6], x[6], b)
	z[7], b = bits.Sub64(z[7], x[7], b)
	z[8], b = bits.Sub64(z[8], x[8], b)
	z[9], b = bits.Sub64(z[9], x[9], b)
	z[10], b = bits.Sub64(z[10], x[10], b)
	z[11], b = bits.Sub64(z[11], x[11], b)
	z[12], b = bits.Sub64(z[12], x[12], b)
	z[13], b = bits.Sub64(z[13], x[13], b)
	z[14], b = bits.Sub64(z[14], x[14], b)
	z[15], b = bits.Sub64(z[15], x[15], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 15581201809351719751, 0)
		z[1], c = bits.Add64(z[1], 1624197863923875688, c)
		z[2], c = bits.Add64(z[2], 7998388470000734400, c)
		z[3], c = bits.Add64(z[3], 12198042741686161686, c)
		z[4], c = bits.Add64(z[4], 2230437831878096465, c)
		z[5], c = bits.Add64(z[5], 13594962226581252322, c)
		z[6], c = bits.Add64(z[6], 17705832302573504558, c)
		z[7], c = bits.Add64(z[7], 2832213063874679144, c)
		z[8], c = bits.Add64(z[8], 165691808775263952, c)
		z[9], c = bits.Add64(z[9], 8213463431006951722, c)
		z[10], c = bits.Add64(z[10], 644038421959391906, c)
		z[11], c = bits.Add64(z[11], 3852616110282661217, c)
		z[12], c = bits.Add64(z[12], 14143729393567096018, c)
		z[13], c = bits.Add64(z[13], 5353153014149457513, c)
		z[14], c = bits.Add64(z[14], 14952150611634926176, c)
		z[15], _ = bits.Add64(z[15], 8072945618436979156, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element16) Exp(x Element16, exponent ...uint64) *Element16 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element16) FromMont() *Element16 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 14599950919741735305
		C := madd0(m, 15581201809351719751, z[0])
		C, z[0] = madd2(m, 1624197863923875688, z[1], C)
		C, z[1] = madd2(m, 7998388470000734400, z[2], C)
		C, z[2] = madd2(m, 12198042741686161686, z[3], C)
		C, z[3] = madd2(m, 2230437831878096465, z[4], C)
		C, z[4] = madd2(m, 13594962226581252322, z[5], C)
		C, z[5] = madd2(m, 17705832302573504558, z[6], C)
		C, z[6] = madd2(m, 2832213063874679144, z[7], C)
		C, z[7] = madd2(m, 165691808775263952, z[8], C)
		C, z[8] = madd2(m, 8213463431006951722, z[9], C)
		C, z[9] = madd2(m, 644038421959391906, z[10], C)
		C, z[10] = madd2(m, 3852616110282661217, z[11], C)
		C, z[11] = madd2(m, 14143729393567096018, z[12], C)
		C, z[12] = madd2(m, 5353153014149457513, z[13], C)
		C, z[13] = madd2(m, 14952150611634926176, z[14], C)
		C, z[14] = madd2(m, 8072945618436979156, z[15], C)
		z[15] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element16) ToMont() *Element16 {
	var rSquare = Element16{
		10293910055304045817,
		18089876400099882969,
		10590417612154821629,
		16412668806159757439,
		9923390205649781303,
		768760684614128584,
		303257887574433427,
		13281197702911227391,
		2368485578430774176,
		3767683099646185951,
		14434754830607060353,
		6338849379175271034,
		4916101835823662409,
		12320011684413575600,
		15141253857019201660,
		4539428371944312616,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element16) ToRegular() Element16 {
	return *z.FromMont()
}

// String returns the string form of an Element16 in Montgomery form
func (z *Element16) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element16) ToBigInt(res *big.Int) *big.Int {
	bits := (*[16]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element16) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[16]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element16) SetBigInt(v *big.Int) *Element16 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element16ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element16) SetString(s string) *Element16 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element16.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element16) Mul(x, y *Element16) *Element16 {

	var t [17]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)

	if t[16] != 0 {
		// we need to reduce, we have a result on 17 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(t[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(t[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(t[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(t[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(t[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(t[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(t[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(t[8], 165691808775263952, b)
		z[9], b = bits.Sub64(t[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(t[10], 644038421959391906, b)
		z[11], b = bits.Sub64(t[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(t[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(t[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(t[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(t[15], 8072945618436979156, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}
	return z
}

// MulAssign z = z * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element16) MulAssign(x *Element16) *Element16 {

	var t [17]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)
	C, t[7] = madd1(x[0], z[7], C)
	C, t[8] = madd1(x[0], z[8], C)
	C, t[9] = madd1(x[0], z[9], C)
	C, t[10] = madd1(x[0], z[10], C)
	C, t[11] = madd1(x[0], z[11], C)
	C, t[12] = madd1(x[0], z[12], C)
	C, t[13] = madd1(x[0], z[13], C)
	C, t[14] = madd1(x[0], z[14], C)
	C, t[15] = madd1(x[0], z[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)
	C, t[7] = madd2(x[1], z[7], t[7], C)
	C, t[8] = madd2(x[1], z[8], t[8], C)
	C, t[9] = madd2(x[1], z[9], t[9], C)
	C, t[10] = madd2(x[1], z[10], t[10], C)
	C, t[11] = madd2(x[1], z[11], t[11], C)
	C, t[12] = madd2(x[1], z[12], t[12], C)
	C, t[13] = madd2(x[1], z[13], t[13], C)
	C, t[14] = madd2(x[1], z[14], t[14], C)
	C, t[15] = madd2(x[1], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)
	C, t[7] = madd2(x[2], z[7], t[7], C)
	C, t[8] = madd2(x[2], z[8], t[8], C)
	C, t[9] = madd2(x[2], z[9], t[9], C)
	C, t[10] = madd2(x[2], z[10], t[10], C)
	C, t[11] = madd2(x[2], z[11], t[11], C)
	C, t[12] = madd2(x[2], z[12], t[12], C)
	C, t[13] = madd2(x[2], z[13], t[13], C)
	C, t[14] = madd2(x[2], z[14], t[14], C)
	C, t[15] = madd2(x[2], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)
	C, t[7] = madd2(x[3], z[7], t[7], C)
	C, t[8] = madd2(x[3], z[8], t[8], C)
	C, t[9] = madd2(x[3], z[9], t[9], C)
	C, t[10] = madd2(x[3], z[10], t[10], C)
	C, t[11] = madd2(x[3], z[11], t[11], C)
	C, t[12] = madd2(x[3], z[12], t[12], C)
	C, t[13] = madd2(x[3], z[13], t[13], C)
	C, t[14] = madd2(x[3], z[14], t[14], C)
	C, t[15] = madd2(x[3], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)
	C, t[7] = madd2(x[4], z[7], t[7], C)
	C, t[8] = madd2(x[4], z[8], t[8], C)
	C, t[9] = madd2(x[4], z[9], t[9], C)
	C, t[10] = madd2(x[4], z[10], t[10], C)
	C, t[11] = madd2(x[4], z[11], t[11], C)
	C, t[12] = madd2(x[4], z[12], t[12], C)
	C, t[13] = madd2(x[4], z[13], t[13], C)
	C, t[14] = madd2(x[4], z[14], t[14], C)
	C, t[15] = madd2(x[4], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)
	C, t[7] = madd2(x[5], z[7], t[7], C)
	C, t[8] = madd2(x[5], z[8], t[8], C)
	C, t[9] = madd2(x[5], z[9], t[9], C)
	C, t[10] = madd2(x[5], z[10], t[10], C)
	C, t[11] = madd2(x[5], z[11], t[11], C)
	C, t[12] = madd2(x[5], z[12], t[12], C)
	C, t[13] = madd2(x[5], z[13], t[13], C)
	C, t[14] = madd2(x[5], z[14], t[14], C)
	C, t[15] = madd2(x[5], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)
	C, t[7] = madd2(x[6], z[7], t[7], C)
	C, t[8] = madd2(x[6], z[8], t[8], C)
	C, t[9] = madd2(x[6], z[9], t[9], C)
	C, t[10] = madd2(x[6], z[10], t[10], C)
	C, t[11] = madd2(x[6], z[11], t[11], C)
	C, t[12] = madd2(x[6], z[12], t[12], C)
	C, t[13] = madd2(x[6], z[13], t[13], C)
	C, t[14] = madd2(x[6], z[14], t[14], C)
	C, t[15] = madd2(x[6], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], z[0], t[0])
	C, t[1] = madd2(x[7], z[1], t[1], C)
	C, t[2] = madd2(x[7], z[2], t[2], C)
	C, t[3] = madd2(x[7], z[3], t[3], C)
	C, t[4] = madd2(x[7], z[4], t[4], C)
	C, t[5] = madd2(x[7], z[5], t[5], C)
	C, t[6] = madd2(x[7], z[6], t[6], C)
	C, t[7] = madd2(x[7], z[7], t[7], C)
	C, t[8] = madd2(x[7], z[8], t[8], C)
	C, t[9] = madd2(x[7], z[9], t[9], C)
	C, t[10] = madd2(x[7], z[10], t[10], C)
	C, t[11] = madd2(x[7], z[11], t[11], C)
	C, t[12] = madd2(x[7], z[12], t[12], C)
	C, t[13] = madd2(x[7], z[13], t[13], C)
	C, t[14] = madd2(x[7], z[14], t[14], C)
	C, t[15] = madd2(x[7], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], z[0], t[0])
	C, t[1] = madd2(x[8], z[1], t[1], C)
	C, t[2] = madd2(x[8], z[2], t[2], C)
	C, t[3] = madd2(x[8], z[3], t[3], C)
	C, t[4] = madd2(x[8], z[4], t[4], C)
	C, t[5] = madd2(x[8], z[5], t[5], C)
	C, t[6] = madd2(x[8], z[6], t[6], C)
	C, t[7] = madd2(x[8], z[7], t[7], C)
	C, t[8] = madd2(x[8], z[8], t[8], C)
	C, t[9] = madd2(x[8], z[9], t[9], C)
	C, t[10] = madd2(x[8], z[10], t[10], C)
	C, t[11] = madd2(x[8], z[11], t[11], C)
	C, t[12] = madd2(x[8], z[12], t[12], C)
	C, t[13] = madd2(x[8], z[13], t[13], C)
	C, t[14] = madd2(x[8], z[14], t[14], C)
	C, t[15] = madd2(x[8], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], z[0], t[0])
	C, t[1] = madd2(x[9], z[1], t[1], C)
	C, t[2] = madd2(x[9], z[2], t[2], C)
	C, t[3] = madd2(x[9], z[3], t[3], C)
	C, t[4] = madd2(x[9], z[4], t[4], C)
	C, t[5] = madd2(x[9], z[5], t[5], C)
	C, t[6] = madd2(x[9], z[6], t[6], C)
	C, t[7] = madd2(x[9], z[7], t[7], C)
	C, t[8] = madd2(x[9], z[8], t[8], C)
	C, t[9] = madd2(x[9], z[9], t[9], C)
	C, t[10] = madd2(x[9], z[10], t[10], C)
	C, t[11] = madd2(x[9], z[11], t[11], C)
	C, t[12] = madd2(x[9], z[12], t[12], C)
	C, t[13] = madd2(x[9], z[13], t[13], C)
	C, t[14] = madd2(x[9], z[14], t[14], C)
	C, t[15] = madd2(x[9], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], z[0], t[0])
	C, t[1] = madd2(x[10], z[1], t[1], C)
	C, t[2] = madd2(x[10], z[2], t[2], C)
	C, t[3] = madd2(x[10], z[3], t[3], C)
	C, t[4] = madd2(x[10], z[4], t[4], C)
	C, t[5] = madd2(x[10], z[5], t[5], C)
	C, t[6] = madd2(x[10], z[6], t[6], C)
	C, t[7] = madd2(x[10], z[7], t[7], C)
	C, t[8] = madd2(x[10], z[8], t[8], C)
	C, t[9] = madd2(x[10], z[9], t[9], C)
	C, t[10] = madd2(x[10], z[10], t[10], C)
	C, t[11] = madd2(x[10], z[11], t[11], C)
	C, t[12] = madd2(x[10], z[12], t[12], C)
	C, t[13] = madd2(x[10], z[13], t[13], C)
	C, t[14] = madd2(x[10], z[14], t[14], C)
	C, t[15] = madd2(x[10], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], z[0], t[0])
	C, t[1] = madd2(x[11], z[1], t[1], C)
	C, t[2] = madd2(x[11], z[2], t[2], C)
	C, t[3] = madd2(x[11], z[3], t[3], C)
	C, t[4] = madd2(x[11], z[4], t[4], C)
	C, t[5] = madd2(x[11], z[5], t[5], C)
	C, t[6] = madd2(x[11], z[6], t[6], C)
	C, t[7] = madd2(x[11], z[7], t[7], C)
	C, t[8] = madd2(x[11], z[8], t[8], C)
	C, t[9] = madd2(x[11], z[9], t[9], C)
	C, t[10] = madd2(x[11], z[10], t[10], C)
	C, t[11] = madd2(x[11], z[11], t[11], C)
	C, t[12] = madd2(x[11], z[12], t[12], C)
	C, t[13] = madd2(x[11], z[13], t[13], C)
	C, t[14] = madd2(x[11], z[14], t[14], C)
	C, t[15] = madd2(x[11], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], z[0], t[0])
	C, t[1] = madd2(x[12], z[1], t[1], C)
	C, t[2] = madd2(x[12], z[2], t[2], C)
	C, t[3] = madd2(x[12], z[3], t[3], C)
	C, t[4] = madd2(x[12], z[4], t[4], C)
	C, t[5] = madd2(x[12], z[5], t[5], C)
	C, t[6] = madd2(x[12], z[6], t[6], C)
	C, t[7] = madd2(x[12], z[7], t[7], C)
	C, t[8] = madd2(x[12], z[8], t[8], C)
	C, t[9] = madd2(x[12], z[9], t[9], C)
	C, t[10] = madd2(x[12], z[10], t[10], C)
	C, t[11] = madd2(x[12], z[11], t[11], C)
	C, t[12] = madd2(x[12], z[12], t[12], C)
	C, t[13] = madd2(x[12], z[13], t[13], C)
	C, t[14] = madd2(x[12], z[14], t[14], C)
	C, t[15] = madd2(x[12], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], z[0], t[0])
	C, t[1] = madd2(x[13], z[1], t[1], C)
	C, t[2] = madd2(x[13], z[2], t[2], C)
	C, t[3] = madd2(x[13], z[3], t[3], C)
	C, t[4] = madd2(x[13], z[4], t[4], C)
	C, t[5] = madd2(x[13], z[5], t[5], C)
	C, t[6] = madd2(x[13], z[6], t[6], C)
	C, t[7] = madd2(x[13], z[7], t[7], C)
	C, t[8] = madd2(x[13], z[8], t[8], C)
	C, t[9] = madd2(x[13], z[9], t[9], C)
	C, t[10] = madd2(x[13], z[10], t[10], C)
	C, t[11] = madd2(x[13], z[11], t[11], C)
	C, t[12] = madd2(x[13], z[12], t[12], C)
	C, t[13] = madd2(x[13], z[13], t[13], C)
	C, t[14] = madd2(x[13], z[14], t[14], C)
	C, t[15] = madd2(x[13], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], z[0], t[0])
	C, t[1] = madd2(x[14], z[1], t[1], C)
	C, t[2] = madd2(x[14], z[2], t[2], C)
	C, t[3] = madd2(x[14], z[3], t[3], C)
	C, t[4] = madd2(x[14], z[4], t[4], C)
	C, t[5] = madd2(x[14], z[5], t[5], C)
	C, t[6] = madd2(x[14], z[6], t[6], C)
	C, t[7] = madd2(x[14], z[7], t[7], C)
	C, t[8] = madd2(x[14], z[8], t[8], C)
	C, t[9] = madd2(x[14], z[9], t[9], C)
	C, t[10] = madd2(x[14], z[10], t[10], C)
	C, t[11] = madd2(x[14], z[11], t[11], C)
	C, t[12] = madd2(x[14], z[12], t[12], C)
	C, t[13] = madd2(x[14], z[13], t[13], C)
	C, t[14] = madd2(x[14], z[14], t[14], C)
	C, t[15] = madd2(x[14], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], z[0], t[0])
	C, t[1] = madd2(x[15], z[1], t[1], C)
	C, t[2] = madd2(x[15], z[2], t[2], C)
	C, t[3] = madd2(x[15], z[3], t[3], C)
	C, t[4] = madd2(x[15], z[4], t[4], C)
	C, t[5] = madd2(x[15], z[5], t[5], C)
	C, t[6] = madd2(x[15], z[6], t[6], C)
	C, t[7] = madd2(x[15], z[7], t[7], C)
	C, t[8] = madd2(x[15], z[8], t[8], C)
	C, t[9] = madd2(x[15], z[9], t[9], C)
	C, t[10] = madd2(x[15], z[10], t[10], C)
	C, t[11] = madd2(x[15], z[11], t[11], C)
	C, t[12] = madd2(x[15], z[12], t[12], C)
	C, t[13] = madd2(x[15], z[13], t[13], C)
	C, t[14] = madd2(x[15], z[14], t[14], C)
	C, t[15] = madd2(x[15], z[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 14599950919741735305

	// -----------------------------------
	// Second loop
	C = madd0(m, 15581201809351719751, t[0])

	C, t[0] = madd2(m, 1624197863923875688, t[1], C)

	C, t[1] = madd2(m, 7998388470000734400, t[2], C)

	C, t[2] = madd2(m, 12198042741686161686, t[3], C)

	C, t[3] = madd2(m, 2230437831878096465, t[4], C)

	C, t[4] = madd2(m, 13594962226581252322, t[5], C)

	C, t[5] = madd2(m, 17705832302573504558, t[6], C)

	C, t[6] = madd2(m, 2832213063874679144, t[7], C)

	C, t[7] = madd2(m, 165691808775263952, t[8], C)

	C, t[8] = madd2(m, 8213463431006951722, t[9], C)

	C, t[9] = madd2(m, 644038421959391906, t[10], C)

	C, t[10] = madd2(m, 3852616110282661217, t[11], C)

	C, t[11] = madd2(m, 14143729393567096018, t[12], C)

	C, t[12] = madd2(m, 5353153014149457513, t[13], C)

	C, t[13] = madd2(m, 14952150611634926176, t[14], C)

	C, t[14] = madd3(m, 8072945618436979156, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)

	if t[16] != 0 {
		// we need to reduce, we have a result on 17 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(t[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(t[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(t[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(t[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(t[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(t[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(t[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(t[8], 165691808775263952, b)
		z[9], b = bits.Sub64(t[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(t[10], 644038421959391906, b)
		z[11], b = bits.Sub64(t[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(t[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(t[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(t[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(t[15], 8072945618436979156, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 8072945618436979156 || (z[15] == 8072945618436979156 && (z[14] < 14952150611634926176 || (z[14] == 14952150611634926176 && (z[13] < 5353153014149457513 || (z[13] == 5353153014149457513 && (z[12] < 14143729393567096018 || (z[12] == 14143729393567096018 && (z[11] < 3852616110282661217 || (z[11] == 3852616110282661217 && (z[10] < 644038421959391906 || (z[10] == 644038421959391906 && (z[9] < 8213463431006951722 || (z[9] == 8213463431006951722 && (z[8] < 165691808775263952 || (z[8] == 165691808775263952 && (z[7] < 2832213063874679144 || (z[7] == 2832213063874679144 && (z[6] < 17705832302573504558 || (z[6] == 17705832302573504558 && (z[5] < 13594962226581252322 || (z[5] == 13594962226581252322 && (z[4] < 2230437831878096465 || (z[4] == 2230437831878096465 && (z[3] < 12198042741686161686 || (z[3] == 12198042741686161686 && (z[2] < 7998388470000734400 || (z[2] == 7998388470000734400 && (z[1] < 1624197863923875688 || (z[1] == 1624197863923875688 && (z[0] < 15581201809351719751))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15581201809351719751, 0)
		z[1], b = bits.Sub64(z[1], 1624197863923875688, b)
		z[2], b = bits.Sub64(z[2], 7998388470000734400, b)
		z[3], b = bits.Sub64(z[3], 12198042741686161686, b)
		z[4], b = bits.Sub64(z[4], 2230437831878096465, b)
		z[5], b = bits.Sub64(z[5], 13594962226581252322, b)
		z[6], b = bits.Sub64(z[6], 17705832302573504558, b)
		z[7], b = bits.Sub64(z[7], 2832213063874679144, b)
		z[8], b = bits.Sub64(z[8], 165691808775263952, b)
		z[9], b = bits.Sub64(z[9], 8213463431006951722, b)
		z[10], b = bits.Sub64(z[10], 644038421959391906, b)
		z[11], b = bits.Sub64(z[11], 3852616110282661217, b)
		z[12], b = bits.Sub64(z[12], 14143729393567096018, b)
		z[13], b = bits.Sub64(z[13], 5353153014149457513, b)
		z[14], b = bits.Sub64(z[14], 14952150611634926176, b)
		z[15], _ = bits.Sub64(z[15], 8072945618436979156, b)
	}
	return z
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element16) Legendre() int {
	var l Element16
	// z^((q-1)/2)
	l.Exp(*z,
		7790600904675859875,
		812098931961937844,
		3999194235000367200,
		15322393407697856651,
		1115218915939048232,
		6797481113290626161,
		8852916151286752279,
		1416106531937339572,
		82845904387631976,
		4106731715503475861,
		9545391247834471761,
		1926308055141330608,
		16295236733638323817,
		2676576507074728756,
		7476075305817463088,
		4036472809218489578,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[15] == 2300852836835593302) && (l[14] == 6989186924149250879) && (l[13] == 7740438045410636588) && (l[12] == 8606029360284911195) && (l[11] == 10741511853144229181) && (l[10] == 17158667229790767803) && (l[9] == 2019817211695648171) && (l[8] == 18115360456159023711) && (l[7] == 12782317945960193326) && (l[6] == 1481823542272094114) && (l[5] == 9703563694256598587) && (l[4] == 13985868409953358684) && (l[3] == 12497402664046779859) && (l[2] == 2449967133708082815) && (l[1] == 15198348345861800238) && (l[0] == 5731084528715663730) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element16) Sqrt(x *Element16) *Element16 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element16
	y.Exp(*x,
		3895300452337929938,
		406049465980968922,
		11222969154354959408,
		7661196703848928325,
		9780981494824299924,
		12622112593500088888,
		4426458075643376139,
		708053265968669786,
		9264794989048591796,
		11276737894606513738,
		4772695623917235880,
		10186526064425441112,
		8147618366819161908,
		1338288253537364378,
		3738037652908731544,
		2018236404609244789,
	)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// Square z = x * x mod q
func (z *Element16) Square(x *Element16) *Element16 {
	return z.Mul(x, x)
}
