// Code generated by goff DO NOT EDIT
package generated

import (
	"crypto/rand"
	"math/big"
	"math/bits"
	mrand "math/rand"
	"testing"
)

func TestELEMENT07CorrectessAgainstBigInt(t *testing.T) {
	modulus, _ := new(big.Int).SetString("322682568289525361762046250237368232446223696123443138893952234340997414728466624440898096951488632464052441876554825788797264920515711", 10)
	cmpEandB := func(e *Element07, b *big.Int, name string) {
		var _e big.Int
		if e.FromMont().ToBigInt(&_e).Cmp(b) != 0 {
			t.Fatal(name, "failed")
		}
	}
	var modulusMinusOne, one big.Int
	one.SetUint64(1)

	modulusMinusOne.Sub(modulus, &one)

	for i := 0; i < 10000; i++ {

		// sample 2 random big int
		b1, _ := rand.Int(rand.Reader, modulus)
		b2, _ := rand.Int(rand.Reader, modulus)
		rExp := mrand.Uint64()

		// adding edge cases
		// TODO need more edge cases
		switch i {
		case 0:
			rExp = 0
			b1.SetUint64(0)
		case 1:
			b2.SetUint64(0)
		case 2:
			b1.SetUint64(0)
			b2.SetUint64(0)
		case 3:
			rExp = 0
		case 4:
			rExp = 1
		case 5:
			rExp = ^uint64(0) // max uint
		case 6:
			rExp = 2
			b1.Set(&modulusMinusOne)
		case 7:
			b2.Set(&modulusMinusOne)
		case 8:
			b1.Set(&modulusMinusOne)
			b2.Set(&modulusMinusOne)
		}

		rbExp := new(big.Int).SetUint64(rExp)

		var bMul, bAdd, bSub, bDiv, bNeg, bLsh, bInv, bExp, bSquare big.Int

		// e1 = mont(b1), e2 = mont(b2)
		var e1, e2, eMul, eAdd, eSub, eDiv, eNeg, eLsh, eInv, eExp, eSquare, eMulAssign, eSubAssign, eAddAssign Element07
		e1.SetBigInt(b1)
		e2.SetBigInt(b2)

		// (e1*e2).FromMont() === b1*b2 mod q ... etc
		eSquare.Square(&e1)
		eMul.Mul(&e1, &e2)
		eMulAssign.Set(&e1)
		eMulAssign.MulAssign(&e2)
		eAdd.Add(&e1, &e2)
		eAddAssign.Set(&e1)
		eAddAssign.AddAssign(&e2)
		eSub.Sub(&e1, &e2)
		eSubAssign.Set(&e1)
		eSubAssign.SubAssign(&e2)
		eDiv.Div(&e1, &e2)
		eNeg.Neg(&e1)
		eInv.Inverse(&e1)
		eExp.Exp(e1, rExp)
		eLsh.Double(&e1)

		// same operations with big int
		bAdd.Add(b1, b2).Mod(&bAdd, modulus)
		bMul.Mul(b1, b2).Mod(&bMul, modulus)
		bSquare.Mul(b1, b1).Mod(&bSquare, modulus)
		bSub.Sub(b1, b2).Mod(&bSub, modulus)
		bDiv.ModInverse(b2, modulus)
		bDiv.Mul(&bDiv, b1).
			Mod(&bDiv, modulus)
		bNeg.Neg(b1).Mod(&bNeg, modulus)

		bInv.ModInverse(b1, modulus)
		bExp.Exp(b1, rbExp, modulus)
		bLsh.Lsh(b1, 1).Mod(&bLsh, modulus)

		cmpEandB(&eSquare, &bSquare, "Square")
		cmpEandB(&eMul, &bMul, "Mul")
		cmpEandB(&eMulAssign, &bMul, "MulAssign")
		cmpEandB(&eAdd, &bAdd, "Add")
		cmpEandB(&eAddAssign, &bAdd, "AddAssign")
		cmpEandB(&eSub, &bSub, "Sub")
		cmpEandB(&eSubAssign, &bSub, "SubAssign")
		cmpEandB(&eDiv, &bDiv, "Div")
		cmpEandB(&eNeg, &bNeg, "Neg")
		cmpEandB(&eInv, &bInv, "Inv")
		cmpEandB(&eExp, &bExp, "Exp")
		cmpEandB(&eLsh, &bLsh, "Lsh")
	}
}

func TestELEMENT07IsRandom(t *testing.T) {
	for i := 0; i < 1000; i++ {
		var x, y Element07
		x.SetRandom()
		y.SetRandom()
		if x.Equal(&y) {
			t.Fatal("2 random numbers are unlikely to be equal")
		}
	}
}

// -------------------------------------------------------------------------------------------------
// benchmarks
// most benchmarks are rudimentary and should sample a large number of random inputs
// or be run multiple times to ensure it didn't measure the fastest path of the function
// TODO: clean up and push benchmarking branch

var benchResElement07 Element07

func BenchmarkInverseELEMENT07(b *testing.B) {
	var x Element07
	x.SetRandom()
	benchResElement07.SetRandom()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		benchResElement07.Inverse(&x)
	}

}
func BenchmarkExpELEMENT07(b *testing.B) {
	var x Element07
	x.SetRandom()
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Exp(x, mrand.Uint64())
	}
}

func BenchmarkDoubleELEMENT07(b *testing.B) {
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Double(&benchResElement07)
	}
}

func BenchmarkAddELEMENT07(b *testing.B) {
	var x Element07
	x.SetRandom()
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Add(&x, &benchResElement07)
	}
}

func BenchmarkSubELEMENT07(b *testing.B) {
	var x Element07
	x.SetRandom()
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Sub(&x, &benchResElement07)
	}
}

func BenchmarkNegELEMENT07(b *testing.B) {
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Neg(&benchResElement07)
	}
}

func BenchmarkDivELEMENT07(b *testing.B) {
	var x Element07
	x.SetRandom()
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Div(&x, &benchResElement07)
	}
}

func BenchmarkFromMontELEMENT07(b *testing.B) {
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.FromMont()
	}
}

func BenchmarkToMontELEMENT07(b *testing.B) {
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.ToMont()
	}
}
func BenchmarkSquareELEMENT07(b *testing.B) {
	benchResElement07.SetRandom()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.Square(&benchResElement07)
	}
}

func BenchmarkMulAssignELEMENT07(b *testing.B) {
	x := Element07{
		11394061373368433203,
		6151568944091229183,
		13234826941241376623,
		15235843581831928969,
		9210085638756949795,
		3757868771183409087,
		7192684189326524933,
	}
	benchResElement07.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.MulAssign(&x)
	}
}

// Montgomery multiplication benchmarks
func (z *Element07) mulCIOS(x *Element07) *Element07 {

	var t [8]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], z[0])
	C, t[1] = madd1(x[0], z[1], C)
	C, t[2] = madd1(x[0], z[2], C)
	C, t[3] = madd1(x[0], z[3], C)
	C, t[4] = madd1(x[0], z[4], C)
	C, t[5] = madd1(x[0], z[5], C)
	C, t[6] = madd1(x[0], z[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], z[0], t[0])
	C, t[1] = madd2(x[1], z[1], t[1], C)
	C, t[2] = madd2(x[1], z[2], t[2], C)
	C, t[3] = madd2(x[1], z[3], t[3], C)
	C, t[4] = madd2(x[1], z[4], t[4], C)
	C, t[5] = madd2(x[1], z[5], t[5], C)
	C, t[6] = madd2(x[1], z[6], t[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], z[0], t[0])
	C, t[1] = madd2(x[2], z[1], t[1], C)
	C, t[2] = madd2(x[2], z[2], t[2], C)
	C, t[3] = madd2(x[2], z[3], t[3], C)
	C, t[4] = madd2(x[2], z[4], t[4], C)
	C, t[5] = madd2(x[2], z[5], t[5], C)
	C, t[6] = madd2(x[2], z[6], t[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], z[0], t[0])
	C, t[1] = madd2(x[3], z[1], t[1], C)
	C, t[2] = madd2(x[3], z[2], t[2], C)
	C, t[3] = madd2(x[3], z[3], t[3], C)
	C, t[4] = madd2(x[3], z[4], t[4], C)
	C, t[5] = madd2(x[3], z[5], t[5], C)
	C, t[6] = madd2(x[3], z[6], t[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], z[0], t[0])
	C, t[1] = madd2(x[4], z[1], t[1], C)
	C, t[2] = madd2(x[4], z[2], t[2], C)
	C, t[3] = madd2(x[4], z[3], t[3], C)
	C, t[4] = madd2(x[4], z[4], t[4], C)
	C, t[5] = madd2(x[4], z[5], t[5], C)
	C, t[6] = madd2(x[4], z[6], t[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], z[0], t[0])
	C, t[1] = madd2(x[5], z[1], t[1], C)
	C, t[2] = madd2(x[5], z[2], t[2], C)
	C, t[3] = madd2(x[5], z[3], t[3], C)
	C, t[4] = madd2(x[5], z[4], t[4], C)
	C, t[5] = madd2(x[5], z[5], t[5], C)
	C, t[6] = madd2(x[5], z[6], t[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], z[0], t[0])
	C, t[1] = madd2(x[6], z[1], t[1], C)
	C, t[2] = madd2(x[6], z[2], t[2], C)
	C, t[3] = madd2(x[6], z[3], t[3], C)
	C, t[4] = madd2(x[6], z[4], t[4], C)
	C, t[5] = madd2(x[6], z[5], t[5], C)
	C, t[6] = madd2(x[6], z[6], t[6], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1339912018327196801

	// -----------------------------------
	// Second loop
	C = madd0(m, 16042456689041413247, t[0])

	C, t[0] = madd2(m, 8921525998091268897, t[1], C)

	C, t[1] = madd2(m, 9917432144473167513, t[2], C)

	C, t[2] = madd2(m, 5991078201727054466, t[3], C)

	C, t[3] = madd2(m, 8555911982396543610, t[4], C)

	C, t[4] = madd2(m, 6108322778814717573, t[5], C)

	C, t[5] = madd3(m, 8189495902344504465, t[6], C, t[7])

	t[6], t[7] = bits.Add64(D, C, 0)

	if t[7] != 0 {
		// we need to reduce, we have a result on 8 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 16042456689041413247, 0)
		z[1], b = bits.Sub64(t[1], 8921525998091268897, b)
		z[2], b = bits.Sub64(t[2], 9917432144473167513, b)
		z[3], b = bits.Sub64(t[3], 5991078201727054466, b)
		z[4], b = bits.Sub64(t[4], 8555911982396543610, b)
		z[5], b = bits.Sub64(t[5], 6108322778814717573, b)
		z[6], _ = bits.Sub64(t[6], 8189495902344504465, b)
		return z
	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]

	// if z > q --> z -= q
	if !(z[6] < 8189495902344504465 || (z[6] == 8189495902344504465 && (z[5] < 6108322778814717573 || (z[5] == 6108322778814717573 && (z[4] < 8555911982396543610 || (z[4] == 8555911982396543610 && (z[3] < 5991078201727054466 || (z[3] == 5991078201727054466 && (z[2] < 9917432144473167513 || (z[2] == 9917432144473167513 && (z[1] < 8921525998091268897 || (z[1] == 8921525998091268897 && (z[0] < 16042456689041413247))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16042456689041413247, 0)
		z[1], b = bits.Sub64(z[1], 8921525998091268897, b)
		z[2], b = bits.Sub64(z[2], 9917432144473167513, b)
		z[3], b = bits.Sub64(z[3], 5991078201727054466, b)
		z[4], b = bits.Sub64(z[4], 8555911982396543610, b)
		z[5], b = bits.Sub64(z[5], 6108322778814717573, b)
		z[6], _ = bits.Sub64(z[6], 8189495902344504465, b)
	}
	return z
}

func (z *Element07) mulNoCarry(x *Element07) *Element07 {

	var t [7]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		c[2], t[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd1(v, x[6], c[1])
		t[6], t[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		t[6], t[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		t[6], t[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		t[6], t[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		t[6], t[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}
	{
		// round 5
		v := z[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		t[6], t[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}
	{
		// round 6
		v := z[6]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 1339912018327196801
		c[2] = madd0(m, 16042456689041413247, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 8921525998091268897, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 9917432144473167513, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 5991078201727054466, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 8555911982396543610, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], z[4] = madd2(m, 6108322778814717573, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		z[6], z[5] = madd3(m, 8189495902344504465, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	if !(z[6] < 8189495902344504465 || (z[6] == 8189495902344504465 && (z[5] < 6108322778814717573 || (z[5] == 6108322778814717573 && (z[4] < 8555911982396543610 || (z[4] == 8555911982396543610 && (z[3] < 5991078201727054466 || (z[3] == 5991078201727054466 && (z[2] < 9917432144473167513 || (z[2] == 9917432144473167513 && (z[1] < 8921525998091268897 || (z[1] == 8921525998091268897 && (z[0] < 16042456689041413247))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16042456689041413247, 0)
		z[1], b = bits.Sub64(z[1], 8921525998091268897, b)
		z[2], b = bits.Sub64(z[2], 9917432144473167513, b)
		z[3], b = bits.Sub64(z[3], 5991078201727054466, b)
		z[4], b = bits.Sub64(z[4], 8555911982396543610, b)
		z[5], b = bits.Sub64(z[5], 6108322778814717573, b)
		z[6], _ = bits.Sub64(z[6], 8189495902344504465, b)
	}
	return z
}

func (z *Element07) mulFIPS(x *Element07) *Element07 {

	var p [7]uint64
	var t, u, v uint64
	u, v = bits.Mul64(z[0], x[0])
	p[0] = v * 1339912018327196801
	u, v, _ = madd(p[0], 16042456689041413247, 0, u, v)
	t, u, v = madd(z[0], x[1], 0, u, v)
	t, u, v = madd(p[0], 8921525998091268897, t, u, v)
	t, u, v = madd(z[1], x[0], t, u, v)
	p[1] = v * 1339912018327196801
	u, v, _ = madd(p[1], 16042456689041413247, t, u, v)
	t, u, v = madd(z[0], x[2], 0, u, v)
	t, u, v = madd(p[0], 9917432144473167513, t, u, v)
	t, u, v = madd(z[1], x[1], t, u, v)
	t, u, v = madd(p[1], 8921525998091268897, t, u, v)
	t, u, v = madd(z[2], x[0], t, u, v)
	p[2] = v * 1339912018327196801
	u, v, _ = madd(p[2], 16042456689041413247, t, u, v)
	t, u, v = madd(z[0], x[3], 0, u, v)
	t, u, v = madd(p[0], 5991078201727054466, t, u, v)
	t, u, v = madd(z[1], x[2], t, u, v)
	t, u, v = madd(p[1], 9917432144473167513, t, u, v)
	t, u, v = madd(z[2], x[1], t, u, v)
	t, u, v = madd(p[2], 8921525998091268897, t, u, v)
	t, u, v = madd(z[3], x[0], t, u, v)
	p[3] = v * 1339912018327196801
	u, v, _ = madd(p[3], 16042456689041413247, t, u, v)
	t, u, v = madd(z[0], x[4], 0, u, v)
	t, u, v = madd(p[0], 8555911982396543610, t, u, v)
	t, u, v = madd(z[1], x[3], t, u, v)
	t, u, v = madd(p[1], 5991078201727054466, t, u, v)
	t, u, v = madd(z[2], x[2], t, u, v)
	t, u, v = madd(p[2], 9917432144473167513, t, u, v)
	t, u, v = madd(z[3], x[1], t, u, v)
	t, u, v = madd(p[3], 8921525998091268897, t, u, v)
	t, u, v = madd(z[4], x[0], t, u, v)
	p[4] = v * 1339912018327196801
	u, v, _ = madd(p[4], 16042456689041413247, t, u, v)
	t, u, v = madd(z[0], x[5], 0, u, v)
	t, u, v = madd(p[0], 6108322778814717573, t, u, v)
	t, u, v = madd(z[1], x[4], t, u, v)
	t, u, v = madd(p[1], 8555911982396543610, t, u, v)
	t, u, v = madd(z[2], x[3], t, u, v)
	t, u, v = madd(p[2], 5991078201727054466, t, u, v)
	t, u, v = madd(z[3], x[2], t, u, v)
	t, u, v = madd(p[3], 9917432144473167513, t, u, v)
	t, u, v = madd(z[4], x[1], t, u, v)
	t, u, v = madd(p[4], 8921525998091268897, t, u, v)
	t, u, v = madd(z[5], x[0], t, u, v)
	p[5] = v * 1339912018327196801
	u, v, _ = madd(p[5], 16042456689041413247, t, u, v)
	t, u, v = madd(z[0], x[6], 0, u, v)
	t, u, v = madd(p[0], 8189495902344504465, t, u, v)
	t, u, v = madd(z[1], x[5], t, u, v)
	t, u, v = madd(p[1], 6108322778814717573, t, u, v)
	t, u, v = madd(z[2], x[4], t, u, v)
	t, u, v = madd(p[2], 8555911982396543610, t, u, v)
	t, u, v = madd(z[3], x[3], t, u, v)
	t, u, v = madd(p[3], 5991078201727054466, t, u, v)
	t, u, v = madd(z[4], x[2], t, u, v)
	t, u, v = madd(p[4], 9917432144473167513, t, u, v)
	t, u, v = madd(z[5], x[1], t, u, v)
	t, u, v = madd(p[5], 8921525998091268897, t, u, v)
	t, u, v = madd(z[6], x[0], t, u, v)
	p[6] = v * 1339912018327196801
	u, v, _ = madd(p[6], 16042456689041413247, t, u, v)
	t, u, v = madd(z[1], x[6], 0, u, v)
	t, u, v = madd(p[1], 8189495902344504465, t, u, v)
	t, u, v = madd(z[2], x[5], t, u, v)
	t, u, v = madd(p[2], 6108322778814717573, t, u, v)
	t, u, v = madd(z[3], x[4], t, u, v)
	t, u, v = madd(p[3], 8555911982396543610, t, u, v)
	t, u, v = madd(z[4], x[3], t, u, v)
	t, u, v = madd(p[4], 5991078201727054466, t, u, v)
	t, u, v = madd(z[5], x[2], t, u, v)
	t, u, v = madd(p[5], 9917432144473167513, t, u, v)
	t, u, v = madd(z[6], x[1], t, u, v)
	u, v, p[0] = madd(p[6], 8921525998091268897, t, u, v)
	t, u, v = madd(z[2], x[6], 0, u, v)
	t, u, v = madd(p[2], 8189495902344504465, t, u, v)
	t, u, v = madd(z[3], x[5], t, u, v)
	t, u, v = madd(p[3], 6108322778814717573, t, u, v)
	t, u, v = madd(z[4], x[4], t, u, v)
	t, u, v = madd(p[4], 8555911982396543610, t, u, v)
	t, u, v = madd(z[5], x[3], t, u, v)
	t, u, v = madd(p[5], 5991078201727054466, t, u, v)
	t, u, v = madd(z[6], x[2], t, u, v)
	u, v, p[1] = madd(p[6], 9917432144473167513, t, u, v)
	t, u, v = madd(z[3], x[6], 0, u, v)
	t, u, v = madd(p[3], 8189495902344504465, t, u, v)
	t, u, v = madd(z[4], x[5], t, u, v)
	t, u, v = madd(p[4], 6108322778814717573, t, u, v)
	t, u, v = madd(z[5], x[4], t, u, v)
	t, u, v = madd(p[5], 8555911982396543610, t, u, v)
	t, u, v = madd(z[6], x[3], t, u, v)
	u, v, p[2] = madd(p[6], 5991078201727054466, t, u, v)
	t, u, v = madd(z[4], x[6], 0, u, v)
	t, u, v = madd(p[4], 8189495902344504465, t, u, v)
	t, u, v = madd(z[5], x[5], t, u, v)
	t, u, v = madd(p[5], 6108322778814717573, t, u, v)
	t, u, v = madd(z[6], x[4], t, u, v)
	u, v, p[3] = madd(p[6], 8555911982396543610, t, u, v)
	t, u, v = madd(z[5], x[6], 0, u, v)
	t, u, v = madd(p[5], 8189495902344504465, t, u, v)
	t, u, v = madd(z[6], x[5], t, u, v)
	u, v, p[4] = madd(p[6], 6108322778814717573, t, u, v)
	t, u, v = madd(z[6], x[6], t, u, v)
	u, v, p[5] = madd(p[6], 8189495902344504465, t, u, v)

	p[6] = v
	z[6] = p[6]
	z[5] = p[5]
	z[4] = p[4]
	z[3] = p[3]
	z[2] = p[2]
	z[1] = p[1]
	z[0] = p[0]
	// copy(z[:], p[:])

	// if z > q --> z -= q
	if !(z[6] < 8189495902344504465 || (z[6] == 8189495902344504465 && (z[5] < 6108322778814717573 || (z[5] == 6108322778814717573 && (z[4] < 8555911982396543610 || (z[4] == 8555911982396543610 && (z[3] < 5991078201727054466 || (z[3] == 5991078201727054466 && (z[2] < 9917432144473167513 || (z[2] == 9917432144473167513 && (z[1] < 8921525998091268897 || (z[1] == 8921525998091268897 && (z[0] < 16042456689041413247))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16042456689041413247, 0)
		z[1], b = bits.Sub64(z[1], 8921525998091268897, b)
		z[2], b = bits.Sub64(z[2], 9917432144473167513, b)
		z[3], b = bits.Sub64(z[3], 5991078201727054466, b)
		z[4], b = bits.Sub64(z[4], 8555911982396543610, b)
		z[5], b = bits.Sub64(z[5], 6108322778814717573, b)
		z[6], _ = bits.Sub64(z[6], 8189495902344504465, b)
	}
	return z
}

func BenchmarkMulCIOSELEMENT07(b *testing.B) {
	x := Element07{
		11394061373368433203,
		6151568944091229183,
		13234826941241376623,
		15235843581831928969,
		9210085638756949795,
		3757868771183409087,
		7192684189326524933,
	}
	benchResElement07.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.mulCIOS(&x)
	}
}

func BenchmarkMulFIPSELEMENT07(b *testing.B) {
	x := Element07{
		11394061373368433203,
		6151568944091229183,
		13234826941241376623,
		15235843581831928969,
		9210085638756949795,
		3757868771183409087,
		7192684189326524933,
	}
	benchResElement07.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.mulFIPS(&x)
	}
}

func BenchmarkMulNoCarryELEMENT07(b *testing.B) {
	x := Element07{
		11394061373368433203,
		6151568944091229183,
		13234826941241376623,
		15235843581831928969,
		9210085638756949795,
		3757868771183409087,
		7192684189326524933,
	}
	benchResElement07.SetOne()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		benchResElement07.mulNoCarry(&x)
	}
}
