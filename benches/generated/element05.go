// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// field modulus q =
//
// 934378582467464189700914053313996869525543880896321794320087268775301899163185860685514690237041
// Code generated by goff DO NOT EDIT
// Element05 are assumed to be in Montgomery form in all methods

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// Package generated (generated by goff) contains field arithmetics operations
package generated

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"sync"

	"unsafe"
)

// Element05 represents a field element stored on 5 words (uint64)
// Element05 are assumed to be in Montgomery form in all methods
type Element05 [5]uint64

// Element05Limbs number of 64 bits words needed to represent Element05
const Element05Limbs = 5

// Element05Bits number bits needed to represent Element05
const Element05Bits = 319

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element05) SetUint64(v uint64) *Element05 {
	z[0] = v
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	return z.ToMont()
}

// Set z = x
func (z *Element05) Set(x *Element05) *Element05 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	return z
}

// SetZero z = 0
func (z *Element05) SetZero() *Element05 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element05) SetOne() *Element05 {
	z[0] = 3621798139462736670
	z[1] = 16689283524132064388
	z[2] = 11790870258032907875
	z[3] = 4657473125268848732
	z[4] = 2307842208791080454
	return z
}

// Neg z = q - x
func (z *Element05) Neg(x *Element05) *Element05 {
	if x.IsZero() {
		return z.SetZero()
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(16635845003978183281, x[0], 0)
	z[1], borrow = bits.Sub64(878730274788743613, x[1], borrow)
	z[2], borrow = bits.Sub64(12551308944693097678, x[2], borrow)
	z[3], borrow = bits.Sub64(16118007511075127249, x[3], borrow)
	z[4], _ = bits.Sub64(8069450932459235580, x[4], borrow)
	return z
}

// Div z = x*y^-1 mod q
func (z *Element05) Div(x, y *Element05) *Element05 {
	var yInv Element05
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element05) Equal(x *Element05) bool {
	return (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element05) IsZero() bool {
	return (z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// field modulus stored as big.Int
var _element05ModulusBigInt big.Int
var onceelement05Modulus sync.Once

func element05ModulusBigInt() *big.Int {
	onceelement05Modulus.Do(func() {
		_element05ModulusBigInt.SetString("934378582467464189700914053313996869525543880896321794320087268775301899163185860685514690237041", 10)
	})
	return &_element05ModulusBigInt
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element05) Inverse(x *Element05) *Element05 {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element05{
		16635845003978183281,
		878730274788743613,
		12551308944693097678,
		16118007511075127249,
		8069450932459235580,
	}

	// initialize s = r^2
	var s = Element05{
		8664969491196291364,
		8541706094236673567,
		13711323172044937911,
		6605445853798925691,
		6838009688143588832,
	}

	// r = 0
	r := Element05{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger, uIsOne, vIsOne bool

	for !uIsOne && !vIsOne {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[4] << 63
			v[4] >>= 1
			t = t2
			t2 = v[3] << 63
			v[3] = (v[3] >> 1) | t
			t = t2
			t2 = v[2] << 63
			v[2] = (v[2] >> 1) | t
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 16635845003978183281, 0)
				s[1], carry = bits.Add64(s[1], 878730274788743613, carry)
				s[2], carry = bits.Add64(s[2], 12551308944693097678, carry)
				s[3], carry = bits.Add64(s[3], 16118007511075127249, carry)
				s[4], _ = bits.Add64(s[4], 8069450932459235580, carry)

			}

			// s = s >> 1
			t2 = s[4] << 63
			s[4] >>= 1
			t = t2
			t2 = s[3] << 63
			s[3] = (s[3] >> 1) | t
			t = t2
			t2 = s[2] << 63
			s[2] = (s[2] >> 1) | t
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[4] << 63
			u[4] >>= 1
			t = t2
			t2 = u[3] << 63
			u[3] = (u[3] >> 1) | t
			t = t2
			t2 = u[2] << 63
			u[2] = (u[2] >> 1) | t
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 16635845003978183281, 0)
				r[1], carry = bits.Add64(r[1], 878730274788743613, carry)
				r[2], carry = bits.Add64(r[2], 12551308944693097678, carry)
				r[3], carry = bits.Add64(r[3], 16118007511075127249, carry)
				r[4], _ = bits.Add64(r[4], 8069450932459235580, carry)

			}

			// r = r >> 1
			t2 = r[4] << 63
			r[4] >>= 1
			t = t2
			t2 = r[3] << 63
			r[3] = (r[3] >> 1) | t
			t = t2
			t2 = r[2] << 63
			r[2] = (r[2] >> 1) | t
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], _ = bits.Sub64(v[4], u[4], borrow)

			// r >= s
			bigger = !(r[4] < s[4] || (r[4] == s[4] && (r[3] < s[3] || (r[3] == s[3] && (r[2] < s[2] || (r[2] == s[2] && (r[1] < s[1] || (r[1] == s[1] && (r[0] < s[0])))))))))

			if bigger {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 16635845003978183281, 0)
				s[1], carry = bits.Add64(s[1], 878730274788743613, carry)
				s[2], carry = bits.Add64(s[2], 12551308944693097678, carry)
				s[3], carry = bits.Add64(s[3], 16118007511075127249, carry)
				s[4], _ = bits.Add64(s[4], 8069450932459235580, carry)

			}

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], _ = bits.Sub64(s[4], r[4], borrow)

		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], _ = bits.Sub64(u[4], v[4], borrow)

			// s >= r
			bigger = !(s[4] < r[4] || (s[4] == r[4] && (s[3] < r[3] || (s[3] == r[3] && (s[2] < r[2] || (s[2] == r[2] && (s[1] < r[1] || (s[1] == r[1] && (s[0] < r[0])))))))))

			if bigger {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 16635845003978183281, 0)
				r[1], carry = bits.Add64(r[1], 878730274788743613, carry)
				r[2], carry = bits.Add64(r[2], 12551308944693097678, carry)
				r[3], carry = bits.Add64(r[3], 16118007511075127249, carry)
				r[4], _ = bits.Add64(r[4], 8069450932459235580, carry)

			}

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], _ = bits.Sub64(r[4], s[4], borrow)

		}
		uIsOne = (u[0] == 1) && (u[4]|u[3]|u[2]|u[1]) == 0
		vIsOne = (v[0] == 1) && (v[4]|v[3]|v[2]|v[1]) == 0
	}

	if uIsOne {
		z.Set(&r)
	} else {
		z.Set(&s)
	}

	return z
}

// SetRandom sets z to a random element < q
func (z *Element05) SetRandom() *Element05 {
	bytes := make([]byte, 40)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[4] %= 8069450932459235580

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}

	return z
}

// Add z = x + y mod q
func (z *Element05) Add(x, y *Element05) *Element05 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], _ = bits.Add64(x[4], y[4], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}
	return z
}

// AddAssign z = z + x mod q
func (z *Element05) AddAssign(x *Element05) *Element05 {
	var carry uint64

	z[0], carry = bits.Add64(z[0], x[0], 0)
	z[1], carry = bits.Add64(z[1], x[1], carry)
	z[2], carry = bits.Add64(z[2], x[2], carry)
	z[3], carry = bits.Add64(z[3], x[3], carry)
	z[4], _ = bits.Add64(z[4], x[4], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element05) Double(x *Element05) *Element05 {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], _ = bits.Add64(x[4], x[4], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}
	return z
}

// Sub  z = x - y mod q
func (z *Element05) Sub(x, y *Element05) *Element05 {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 16635845003978183281, 0)
		z[1], c = bits.Add64(z[1], 878730274788743613, c)
		z[2], c = bits.Add64(z[2], 12551308944693097678, c)
		z[3], c = bits.Add64(z[3], 16118007511075127249, c)
		z[4], _ = bits.Add64(z[4], 8069450932459235580, c)
	}
	return z
}

// SubAssign  z = z - x mod q
func (z *Element05) SubAssign(x *Element05) *Element05 {
	var b uint64
	z[0], b = bits.Sub64(z[0], x[0], 0)
	z[1], b = bits.Sub64(z[1], x[1], b)
	z[2], b = bits.Sub64(z[2], x[2], b)
	z[3], b = bits.Sub64(z[3], x[3], b)
	z[4], b = bits.Sub64(z[4], x[4], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 16635845003978183281, 0)
		z[1], c = bits.Add64(z[1], 878730274788743613, c)
		z[2], c = bits.Add64(z[2], 12551308944693097678, c)
		z[3], c = bits.Add64(z[3], 16118007511075127249, c)
		z[4], _ = bits.Add64(z[4], 8069450932459235580, c)
	}
	return z
}

// Exp z = x^exponent mod q
// (not optimized)
// exponent (non-montgomery form) is ordered from least significant word to most significant word
func (z *Element05) Exp(x Element05, exponent ...uint64) *Element05 {
	r := 0
	msb := 0
	for i := len(exponent) - 1; i >= 0; i-- {
		if exponent[i] == 0 {
			r++
		} else {
			msb = (i * 64) + bits.Len64(exponent[i])
			break
		}
	}
	exponent = exponent[:len(exponent)-r]
	if len(exponent) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	l := msb - 2
	for i := l; i >= 0; i-- {
		z.Square(z)
		if exponent[i/64]&(1<<uint(i%64)) != 0 {
			z.MulAssign(&x)
		}
	}
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element05) FromMont() *Element05 {

	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2371522283029795183
		C := madd0(m, 16635845003978183281, z[0])
		C, z[0] = madd2(m, 878730274788743613, z[1], C)
		C, z[1] = madd2(m, 12551308944693097678, z[2], C)
		C, z[2] = madd2(m, 16118007511075127249, z[3], C)
		C, z[3] = madd2(m, 8069450932459235580, z[4], C)
		z[4] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2371522283029795183
		C := madd0(m, 16635845003978183281, z[0])
		C, z[0] = madd2(m, 878730274788743613, z[1], C)
		C, z[1] = madd2(m, 12551308944693097678, z[2], C)
		C, z[2] = madd2(m, 16118007511075127249, z[3], C)
		C, z[3] = madd2(m, 8069450932459235580, z[4], C)
		z[4] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2371522283029795183
		C := madd0(m, 16635845003978183281, z[0])
		C, z[0] = madd2(m, 878730274788743613, z[1], C)
		C, z[1] = madd2(m, 12551308944693097678, z[2], C)
		C, z[2] = madd2(m, 16118007511075127249, z[3], C)
		C, z[3] = madd2(m, 8069450932459235580, z[4], C)
		z[4] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2371522283029795183
		C := madd0(m, 16635845003978183281, z[0])
		C, z[0] = madd2(m, 878730274788743613, z[1], C)
		C, z[1] = madd2(m, 12551308944693097678, z[2], C)
		C, z[2] = madd2(m, 16118007511075127249, z[3], C)
		C, z[3] = madd2(m, 8069450932459235580, z[4], C)
		z[4] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 2371522283029795183
		C := madd0(m, 16635845003978183281, z[0])
		C, z[0] = madd2(m, 878730274788743613, z[1], C)
		C, z[1] = madd2(m, 12551308944693097678, z[2], C)
		C, z[2] = madd2(m, 16118007511075127249, z[3], C)
		C, z[3] = madd2(m, 8069450932459235580, z[4], C)
		z[4] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}
	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element05) ToMont() *Element05 {
	var rSquare = Element05{
		8664969491196291364,
		8541706094236673567,
		13711323172044937911,
		6605445853798925691,
		6838009688143588832,
	}
	return z.MulAssign(&rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element05) ToRegular() Element05 {
	return *z.FromMont()
}

// String returns the string form of an Element05 in Montgomery form
func (z *Element05) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element05) ToBigInt(res *big.Int) *big.Int {
	bits := (*[5]big.Word)(unsafe.Pointer(z))
	return res.SetBits(bits[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element05) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	bits := (*[5]big.Word)(unsafe.Pointer(&z))
	return res.SetBits(bits[:])
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element05) SetBigInt(v *big.Int) *Element05 {
	z.SetZero()

	zero := big.NewInt(0)
	q := element05ModulusBigInt()

	// copy input
	vv := new(big.Int).Set(v)

	// while v < 0, v+=q
	for vv.Cmp(zero) == -1 {
		vv.Add(vv, q)
	}
	// while v > q, v-=q
	for vv.Cmp(q) == 1 {
		vv.Sub(vv, q)
	}
	// if v == q, return 0
	if vv.Cmp(q) == 0 {
		return z
	}
	// v should
	vBits := vv.Bits()
	for i := 0; i < len(vBits); i++ {
		z[i] = uint64(vBits[i])
	}
	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element05) SetString(s string) *Element05 {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element05.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

// Mul z = x * y mod q
func (z *Element05) Mul(x, y *Element05) *Element05 {

	var t [5]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		z[4], z[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}
	return z
}

// MulAssign z = z * x mod q
func (z *Element05) MulAssign(x *Element05) *Element05 {

	var t [5]uint64
	var c [3]uint64
	{
		// round 0
		v := z[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 1
		v := z[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 2
		v := z[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 3
		v := z[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		t[4], t[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}
	{
		// round 4
		v := z[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 2371522283029795183
		c[2] = madd0(m, 16635845003978183281, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 878730274788743613, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 12551308944693097678, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 16118007511075127249, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		z[4], z[3] = madd3(m, 8069450932459235580, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[4] < 8069450932459235580 || (z[4] == 8069450932459235580 && (z[3] < 16118007511075127249 || (z[3] == 16118007511075127249 && (z[2] < 12551308944693097678 || (z[2] == 12551308944693097678 && (z[1] < 878730274788743613 || (z[1] == 878730274788743613 && (z[0] < 16635845003978183281))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 16635845003978183281, 0)
		z[1], b = bits.Sub64(z[1], 878730274788743613, b)
		z[2], b = bits.Sub64(z[2], 12551308944693097678, b)
		z[3], b = bits.Sub64(z[3], 16118007511075127249, b)
		z[4], _ = bits.Sub64(z[4], 8069450932459235580, b)
	}
	return z
}

func (z *Element05) Legendre() int {
	var l Element05
	// z^((p-1)/2)
	l.Exp(*z,
		17541294538843867448,
		439365137394371806,
		15499026509201324647,
		8059003755537563624,
		4034725466229617790,
	)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[4] == 2307842208791080454) && (l[3] == 4657473125268848732) && (l[2] == 11790870258032907875) && (l[1] == 16689283524132064388) && (l[0] == 3621798139462736670) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element05) Sqrt(x *Element05) *Element05 {
	switch x.Legendre() {
	case -1:
		return nil
	case 0:
		return z.SetZero()
	case 1:
		break
	}
	panic("not implemented")
}

// Square z = x * x mod q
func (z *Element05) Square(x *Element05) *Element05 {
	return z.Mul(x, x)
}
